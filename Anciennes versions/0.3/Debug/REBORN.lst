SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\Az\From-Far-Casio-Project\Projet en cours\REBORN.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        REBORN.c     1    /*****************************************************************/
        REBORN.c     2    /*                                                               */
        REBORN.c     3    /*   CASIO fx-9860G SDK Library                                  */
        REBORN.c     4    /*                                                               */
        REBORN.c     5    /*   File name : [ProjectName].c                                 */
        REBORN.c     6    /*                                                               */
        REBORN.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
        REBORN.c     8    /*                                                               */
        REBORN.c     9    /*****************************************************************/
        REBORN.c    10    #include "fxlib.h"
        REBORN.c    11    #include "stdio.h"
        REBORN.c    12    #include "math.h"
        REBORN.c    13    #include "MonochromeLib.h"
        REBORN.c    14    void userInterface();
        REBORN.c    15    void display();
        REBORN.c    16    void generateOutputs();
        REBORN.c    17    void useOutputs();
        REBORN.c    18    void displayExternal();
        REBORN.c    19    //****************************************************************************
        REBORN.c    20    //  AddIn_main (Sample program main function)
        REBORN.c    21    //
        REBORN.c    22    //  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
        REBORN.c    23    //                        : 0 = This application is launched by a strip in eACT application.
        REBORN.c    24    //
        REBORN.c    25    //              OptionNum : Strip number (0~3)
        REBORN.c    26    //                         (This parameter is only used when isAppli parameter is 0.)
        REBORN.c    27    //
        REBORN.c    28    //  retval  :   1 = No error / 0 = Error
        REBORN.c    29    //
        REBORN.c    30    //****************************************************************************
        REBORN.c    31    int output1, output2, output3;
        REBORN.c    32    int const X0=1580160; // les trois seed sont considerees comme origines de l'espace. MULTIPLES DE 128, X0-
                         +1580160/128 donne le cube actuel(je crois)
        REBORN.c    33    int const Y0=2144640;
        REBORN.c    34    int const Z0=2745088;
        REBORN.c    35    int X=0;         // coordonees    X%128 donne donc x dans le cube actuel
        REBORN.c    36    int Y=0;
        REBORN.c    37    int Z=0;
        REBORN.c    38    int sunStorageX[10];
        REBORN.c    39    int sunStorageY[10];
        REBORN.c    40    int sunStorageZ[10];
        REBORN.c    41    int astralStorageX1[90];
        REBORN.c    42    int astralStorageY1[90];
        REBORN.c    43    int astralStorageZ1[90];
        REBORN.c    44    char i, o, p, x, y, z;
        REBORN.c    45    int systemDensity = 0;
        REBORN.c    46    int planetDensity = 0;
        REBORN.c    47    int planetX, planetY, planetZ, sunX, sunY, sunZ, planetCount;
        REBORN.c    48    int AddIn_main(int isAppli, unsigned short OptionNum){
P   00000000              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=32
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
    0000000A 2F96                   MOV.L       R9,@-R15
    0000000C 2F86                   MOV.L       R8,@-R15
    0000000E 4F22                   STS.L       PR,@-R15
        REBORN.c    49        //userInterface();
        REBORN.c    50        generateOutputs();                                   //normalement on apelle juste userInterface mais 
                         +ca provoque le bug: Lignes de planentes 
    00000010 B1B6                   BSR         _generateOutputs
    00000012 0009                   NOP
        REBORN.c    51        displayExternal(0,0,0,0);
    00000014 E700                   MOV         #0,R7
    00000016 6673                   MOV         R7,R6
    00000018 6573                   MOV         R7,R5
    0000001A B147                   BSR         _displayExternal
    0000001C 6473                   MOV         R7,R4
    0000001E 9862                   MOV.W       L529,R8    ; H'7537
    00000020 9A62                   MOV.W       L529+2,R10 ; H'7532
    00000022 6983                   MOV         R8,R9
    00000024 DB33                   MOV.L       L529+14,R11; _IsKeyDown
    00000026 DC34                   MOV.L       L529+18,R12; _z
    00000028 DD34                   MOV.L       L529+22,R13; _y
    0000002A DE35                   MOV.L       L529+26,R14; _x
        REBORN.c    52        while(!IsKeyDown(KEY_CTRL_EXIT)){
    0000002C A04C                   BRA         L490
    0000002E 79FF                   ADD         #-1,R9
    00000030              L491:                             
        REBORN.c    53            if(IsKeyDown(KEY_CTRL_UP)){
    00000030 945B                   MOV.W       L529+4,R4  ; H'7542
    00000032 4B0B                   JSR         @R11
    00000034 0009                   NOP
    00000036 2008                   TST         R0,R0
    00000038 8907                   BT          L492
        REBORN.c    54                --y;
    0000003A 63D0                   MOV.B       @R13,R3
    0000003C 73FF                   ADD         #-1,R3
    0000003E 2D30                   MOV.B       R3,@R13
        REBORN.c    55                displayExternal(0,x,y,z);
    00000040 67C0                   MOV.B       @R12,R7
    00000042 66D0                   MOV.B       @R13,R6
    00000044 65E0                   MOV.B       @R14,R5
    00000046 B131                   BSR         _displayExternal
    00000048 E400                   MOV         #0,R4
    0000004A              L492:                             
        REBORN.c    56            }
        REBORN.c    57            if(IsKeyDown(KEY_CTRL_DOWN)){
    0000004A 944F                   MOV.W       L529+6,R4  ; H'7547
    0000004C 4B0B                   JSR         @R11
    0000004E 0009                   NOP
    00000050 2008                   TST         R0,R0
    00000052 8907                   BT          L493
        REBORN.c    58                ++y;
    00000054 62D0                   MOV.B       @R13,R2
    00000056 7201                   ADD         #1,R2
    00000058 2D20                   MOV.B       R2,@R13
        REBORN.c    59                displayExternal(0,x,y,z);
    0000005A 67C0                   MOV.B       @R12,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000005C 66D0                   MOV.B       @R13,R6
    0000005E 65E0                   MOV.B       @R14,R5
    00000060 B124                   BSR         _displayExternal
    00000062 E400                   MOV         #0,R4
    00000064              L493:                             
        REBORN.c    60            }
        REBORN.c    61            if(IsKeyDown(KEY_CTRL_LEFT)){
    00000064 9443                   MOV.W       L529+8,R4  ; H'7544
    00000066 4B0B                   JSR         @R11
    00000068 0009                   NOP
    0000006A 2008                   TST         R0,R0
    0000006C 8907                   BT          L494
        REBORN.c    62                --x;
    0000006E 63E0                   MOV.B       @R14,R3
    00000070 73FF                   ADD         #-1,R3
    00000072 2E30                   MOV.B       R3,@R14
        REBORN.c    63                displayExternal(0,x,y,z);
    00000074 67C0                   MOV.B       @R12,R7
    00000076 66D0                   MOV.B       @R13,R6
    00000078 65E0                   MOV.B       @R14,R5
    0000007A B117                   BSR         _displayExternal
    0000007C E400                   MOV         #0,R4
    0000007E              L494:                             
        REBORN.c    64            }
        REBORN.c    65            if(IsKeyDown(KEY_CTRL_RIGHT)){
    0000007E 9437                   MOV.W       L529+10,R4 ; H'7545
    00000080 4B0B                   JSR         @R11
    00000082 0009                   NOP
    00000084 2008                   TST         R0,R0
    00000086 8907                   BT          L495
        REBORN.c    66                ++x;
    00000088 62E0                   MOV.B       @R14,R2
    0000008A 7201                   ADD         #1,R2
    0000008C 2E20                   MOV.B       R2,@R14
        REBORN.c    67                displayExternal(0,x,y,z);
    0000008E 67C0                   MOV.B       @R12,R7
    00000090 66D0                   MOV.B       @R13,R6
    00000092 65E0                   MOV.B       @R14,R5
    00000094 B10A                   BSR         _displayExternal
    00000096 E400                   MOV         #0,R4
    00000098              L495:                             
        REBORN.c    68            }
        REBORN.c    69            if(IsKeyDown(KEY_CTRL_SHIFT)){
    00000098 4B0B                   JSR         @R11
    0000009A 6493                   MOV         R9,R4
    0000009C 2008                   TST         R0,R0
    0000009E 8907                   BT          L496
        REBORN.c    70                --z;
    000000A0 63C0                   MOV.B       @R12,R3
    000000A2 73FF                   ADD         #-1,R3
    000000A4 2C30                   MOV.B       R3,@R12
        REBORN.c    71                displayExternal(0,x,y,z);
    000000A6 67C0                   MOV.B       @R12,R7
    000000A8 66D0                   MOV.B       @R13,R6
    000000AA 65E0                   MOV.B       @R14,R5
    000000AC B0FE                   BSR         _displayExternal
    000000AE E400                   MOV         #0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000B0              L496:                             
        REBORN.c    72            }
        REBORN.c    73            if(IsKeyDown(KEY_CTRL_ALPHA)){
    000000B0 4B0B                   JSR         @R11
    000000B2 6483                   MOV         R8,R4
    000000B4 2008                   TST         R0,R0
    000000B6 8907                   BT          L490
        REBORN.c    74                ++z;
    000000B8 62C0                   MOV.B       @R12,R2
    000000BA 7201                   ADD         #1,R2
    000000BC 2C20                   MOV.B       R2,@R12
        REBORN.c    75                displayExternal(0,x,y,z);
    000000BE 67C0                   MOV.B       @R12,R7
    000000C0 66D0                   MOV.B       @R13,R6
    000000C2 65E0                   MOV.B       @R14,R5
    000000C4 B0F2                   BSR         _displayExternal
    000000C6 E400                   MOV         #0,R4
    000000C8              L490:                             
    000000C8 4B0B                   JSR         @R11
    000000CA 64A3                   MOV         R10,R4
    000000CC 2008                   TST         R0,R0
    000000CE 89AF                   BT          L491
        REBORN.c    76            }
        REBORN.c    77        }
        REBORN.c    78            Sleep(10);
    000000D0 4F26                   LDS.L       @R15+,PR
    000000D2 E40A                   MOV         #10,R4
    000000D4 D30B                   MOV.L       L529+30,R3 ; _Sleep
    000000D6 68F6                   MOV.L       @R15+,R8
    000000D8 69F6                   MOV.L       @R15+,R9
    000000DA 6AF6                   MOV.L       @R15+,R10
    000000DC 6BF6                   MOV.L       @R15+,R11
    000000DE 6CF6                   MOV.L       @R15+,R12
    000000E0 6DF6                   MOV.L       @R15+,R13
    000000E2 432B                   JMP         @R3
    000000E4 6EF6                   MOV.L       @R15+,R14
    000000E6              L529:                             
    000000E6 7537                   .DATA.W     H'7537
    000000E8 7532                   .DATA.W     H'7532
    000000EA 7542                   .DATA.W     H'7542
    000000EC 7547                   .DATA.W     H'7547
    000000EE 7544                   .DATA.W     H'7544
    000000F0 7545                   .DATA.W     H'7545
    000000F2 0000                   .DATA.W     0
    000000F4 <00000000>             .DATA.L     _IsKeyDown
    000000F8 <00000000>             .DATA.L     _z
    000000FC <00000000>             .DATA.L     _y
    00000100 <00000000>             .DATA.L     _x
    00000104 <00000000>             .DATA.L     _Sleep
        REBORN.c    79    }
        REBORN.c    80    void userInterface(){
    00000108              _userInterface:                  ; function: userInterface
                                                           ; frame size=32
                                                           ; used runtime library name:
                                                           ; __modls
    00000108 2FE6                   MOV.L       R14,@-R15
    0000010A 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000010C 2FC6                   MOV.L       R12,@-R15
    0000010E 2FB6                   MOV.L       R11,@-R15
    00000110 2FA6                   MOV.L       R10,@-R15
    00000112 2F96                   MOV.L       R9,@-R15
    00000114 2F86                   MOV.L       R8,@-R15
    00000116 4F22                   STS.L       PR,@-R15
        REBORN.c    81        int x, y, z;
        REBORN.c    82        x =X%128;
    00000118 9C16                   MOV.W       L530,R12   ; H'0080
    0000011A DD0C                   MOV.L       L530+4,R13 ; _X
    0000011C D30C                   MOV.L       L530+8,R3  ; __modls
    0000011E 61D2                   MOV.L       @R13,R1
    00000120 430B                   JSR         @R3
    00000122 60C3                   MOV         R12,R0
        REBORN.c    83        y =Y%128;
    00000124 D80B                   MOV.L       L530+12,R8 ; _Y
    00000126 6A03                   MOV         R0,R10
    00000128 D209                   MOV.L       L530+8,R2  ; __modls
    0000012A 6182                   MOV.L       @R8,R1
    0000012C 420B                   JSR         @R2
    0000012E 60C3                   MOV         R12,R0
        REBORN.c    84        z =Z%128;
    00000130 D209                   MOV.L       L530+16,R2 ; _Z
    00000132 6903                   MOV         R0,R9
    00000134 D306                   MOV.L       L530+8,R3  ; __modls
    00000136 6122                   MOV.L       @R2,R1
    00000138 430B                   JSR         @R3
    0000013A 60C3                   MOV         R12,R0
        REBORN.c    85        ML_display_vram();
    0000013C D307                   MOV.L       L530+20,R3 ; _ML_display_vram
    0000013E 430B                   JSR         @R3
    00000140 6B03                   MOV         R0,R11
    00000142 DE07                   MOV.L       L530+24,R14; _IsKeyDown
        REBORN.c    86        while(!(X%128 == 64 && Y%128 == 64 && Z%128 == 64)){   //deplacements           //Sys error quand gauc
                         +he et droite
    00000144 A05E                   BRA         L498
    00000146 0009                   NOP
    00000148              L530:                             
    00000148 0080                   .DATA.W     H'0080
    0000014A 0000                   .DATA.W     0
    0000014C <00000000>             .DATA.L     _X
    00000150 <00000000>             .DATA.L     __modls
    00000154 <00000000>             .DATA.L     _Y
    00000158 <00000000>             .DATA.L     _Z
    0000015C <00000000>             .DATA.L     _ML_display_vram
    00000160 <00000000>             .DATA.L     _IsKeyDown
    00000164              L499:                             
        REBORN.c    87            if(IsKeyDown(KEY_CTRL_UP)){
    00000164 948F                   MOV.W       L531,R4    ; H'7542
    00000166 4E0B                   JSR         @R14
    00000168 0009                   NOP
    0000016A 2008                   TST         R0,R0
    0000016C 8907                   BT          L500
        REBORN.c    88                --Y;
        REBORN.c    89                display(1,x,y,z);
    0000016E 67B3                   MOV         R11,R7
    00000170 6282                   MOV.L       @R8,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000172 6693                   MOV         R9,R6
    00000174 72FF                   ADD         #-1,R2
    00000176 65A3                   MOV         R10,R5
    00000178 2822                   MOV.L       R2,@R8
    0000017A B063                   BSR         _display
    0000017C E401                   MOV         #1,R4
    0000017E              L500:                             
        REBORN.c    90            }
        REBORN.c    91            if(IsKeyDown(KEY_CTRL_DOWN)){
    0000017E 9483                   MOV.W       L531+2,R4  ; H'7547
    00000180 4E0B                   JSR         @R14
    00000182 0009                   NOP
    00000184 2008                   TST         R0,R0
    00000186 8907                   BT          L501
        REBORN.c    92                ++Y;
    00000188 6382                   MOV.L       @R8,R3
        REBORN.c    93                display(1,x,y,z);
    0000018A 67B3                   MOV         R11,R7
    0000018C 7301                   ADD         #1,R3
    0000018E 6693                   MOV         R9,R6
    00000190 2832                   MOV.L       R3,@R8
    00000192 65A3                   MOV         R10,R5
    00000194 B056                   BSR         _display
    00000196 E401                   MOV         #1,R4
    00000198              L501:                             
        REBORN.c    94            }
        REBORN.c    95            if(IsKeyDown(KEY_CTRL_LEFT)){
    00000198 9477                   MOV.W       L531+4,R4  ; H'7544
    0000019A 4E0B                   JSR         @R14
    0000019C 0009                   NOP
    0000019E 2008                   TST         R0,R0
    000001A0 8907                   BT          L502
        REBORN.c    96                --X;
        REBORN.c    97                display(1,x,y,z);
    000001A2 67B3                   MOV         R11,R7
    000001A4 62D2                   MOV.L       @R13,R2
    000001A6 6693                   MOV         R9,R6
    000001A8 72FF                   ADD         #-1,R2
    000001AA 65A3                   MOV         R10,R5
    000001AC 2D22                   MOV.L       R2,@R13
    000001AE B049                   BSR         _display
    000001B0 E401                   MOV         #1,R4
    000001B2              L502:                             
        REBORN.c    98            }
        REBORN.c    99            if(IsKeyDown(KEY_CTRL_RIGHT)){
    000001B2 946B                   MOV.W       L531+6,R4  ; H'7545
    000001B4 4E0B                   JSR         @R14
    000001B6 0009                   NOP
    000001B8 2008                   TST         R0,R0
    000001BA 8907                   BT          L503
        REBORN.c   100                ++X;
    000001BC 63D2                   MOV.L       @R13,R3
        REBORN.c   101                display(1,x,y,z);
    000001BE 67B3                   MOV         R11,R7
    000001C0 7301                   ADD         #1,R3
    000001C2 6693                   MOV         R9,R6
    000001C4 2D32                   MOV.L       R3,@R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001C6 65A3                   MOV         R10,R5
    000001C8 B03C                   BSR         _display
    000001CA E401                   MOV         #1,R4
    000001CC              L503:                             
        REBORN.c   102            }
        REBORN.c   103            if(IsKeyDown(KEY_CTRL_SHIFT)){
    000001CC 945F                   MOV.W       L531+8,R4  ; H'7536
    000001CE 4E0B                   JSR         @R14
    000001D0 0009                   NOP
    000001D2 2008                   TST         R0,R0
    000001D4 8908                   BT          L504
        REBORN.c   104                --Z;
        REBORN.c   105                display(1,x,y,z);
    000001D6 67B3                   MOV         R11,R7
    000001D8 D22E                   MOV.L       L531+14,R2 ; _Z
    000001DA 6693                   MOV         R9,R6
    000001DC 6322                   MOV.L       @R2,R3
    000001DE 65A3                   MOV         R10,R5
    000001E0 73FF                   ADD         #-1,R3
    000001E2 2232                   MOV.L       R3,@R2
    000001E4 B02E                   BSR         _display
    000001E6 E401                   MOV         #1,R4
    000001E8              L504:                             
        REBORN.c   106            }
        REBORN.c   107            if(IsKeyDown(KEY_CTRL_ALPHA)){
    000001E8 9452                   MOV.W       L531+10,R4 ; H'7537
    000001EA 4E0B                   JSR         @R14
    000001EC 0009                   NOP
    000001EE 2008                   TST         R0,R0
    000001F0 8908                   BT          L498
        REBORN.c   108                ++Z;
        REBORN.c   109                display(1,x,y,z);
    000001F2 67B3                   MOV         R11,R7
    000001F4 D227                   MOV.L       L531+14,R2 ; _Z
    000001F6 6693                   MOV         R9,R6
    000001F8 6322                   MOV.L       @R2,R3
    000001FA 65A3                   MOV         R10,R5
    000001FC 7301                   ADD         #1,R3
    000001FE 2232                   MOV.L       R3,@R2
    00000200 B020                   BSR         _display
    00000202 E401                   MOV         #1,R4
    00000204              L498:                             
    00000204 61D2                   MOV.L       @R13,R1
    00000206 D324                   MOV.L       L531+18,R3 ; __modls
    00000208 430B                   JSR         @R3
    0000020A 60C3                   MOV         R12,R0
    0000020C 8840                   CMP/EQ      #64,R0
    0000020E 8BA9                   BF          L499
    00000210 D222                   MOV.L       L531+22,R2 ; _Y
    00000212 6122                   MOV.L       @R2,R1
    00000214 D320                   MOV.L       L531+18,R3 ; __modls
    00000216 430B                   JSR         @R3
    00000218 60C3                   MOV         R12,R0
    0000021A 8840                   CMP/EQ      #64,R0
    0000021C 8BA2                   BF          L499
    0000021E D01D                   MOV.L       L531+14,R0 ; _Z
    00000220 D31D                   MOV.L       L531+18,R3 ; __modls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000222 6102                   MOV.L       @R0,R1
    00000224 430B                   JSR         @R3
    00000226 60C3                   MOV         R12,R0
    00000228 8840                   CMP/EQ      #64,R0
    0000022A 8B9B                   BF          L499
        REBORN.c   110            }
        REBORN.c   111        }
        REBORN.c   112        display(0,x,y,z);
    0000022C 4F26                   LDS.L       @R15+,PR
    0000022E 67B3                   MOV         R11,R7
    00000230 68F6                   MOV.L       @R15+,R8
    00000232 6693                   MOV         R9,R6
    00000234 69F6                   MOV.L       @R15+,R9
    00000236 65A3                   MOV         R10,R5
    00000238 6AF6                   MOV.L       @R15+,R10
    0000023A E400                   MOV         #0,R4
    0000023C 6BF6                   MOV.L       @R15+,R11
    0000023E 6CF6                   MOV.L       @R15+,R12
    00000240 6DF6                   MOV.L       @R15+,R13
    00000242 6EF6                   MOV.L       @R15+,R14
        REBORN.c   113    }
        REBORN.c   114    void display(call,x,y,z){
    00000244              _display:                        ; function: display
                                                           ; frame size=20
    00000244 2FE6                   MOV.L       R14,@-R15
        REBORN.c   115        if(call){
    00000246 2448                   TST         R4,R4
    00000248 4F22                   STS.L       PR,@-R15
    0000024A 7FF4                   ADD         #-12,R15
    0000024C 2F52                   MOV.L       R5,@R15
    0000024E 1F61                   MOV.L       R6,@(4,R15)
    00000250 8D28                   BT/S        L506
    00000252 1F72                   MOV.L       R7,@(8,R15)
        REBORN.c   116            generateOutputs();
    00000254 B094                   BSR         _generateOutputs
    00000256 0009                   NOP
        REBORN.c   117            useOutputs();
    00000258 B0BF                   BSR         _useOutputs
    0000025A 0009                   NOP
        REBORN.c   118            displayExternal(0,x,y,z);  //cube central
    0000025C 57F2                   MOV.L       @(8,R15),R7
    0000025E 56F1                   MOV.L       @(4,R15),R6
    00000260 65F2                   MOV.L       @R15,R5
    00000262 B023                   BSR         _displayExternal
    00000264 E400                   MOV         #0,R4
        REBORN.c   119            Z = Z-128;
    00000266 DE0B                   MOV.L       L531+14,R14; _Z
    00000268 62E2                   MOV.L       @R14,R2
    0000026A 7280                   ADD         #-128,R2
        REBORN.c   120            generateOutputs();
    0000026C B088                   BSR         _generateOutputs
    0000026E 2E22                   MOV.L       R2,@R14
        REBORN.c   121            useOutputs();
    00000270 B0B3                   BSR         _useOutputs
    00000272 0009                   NOP
        REBORN.c   122            displayExternal(-1,x,y,z); //cube central arriere
    00000274 57F2                   MOV.L       @(8,R15),R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000276 56F1                   MOV.L       @(4,R15),R6
    00000278 65F2                   MOV.L       @R15,R5
    0000027A B017                   BSR         _displayExternal
    0000027C E4FF                   MOV         #-1,R4
        REBORN.c   123            Z = Z+128;
    0000027E 9308                   MOV.W       L531+12,R3 ; H'0080
    00000280 62E2                   MOV.L       @R14,R2
    00000282 A00D                   BRA         L527
    00000284 0009                   NOP
    00000286              L531:                             
    00000286 7542                   .DATA.W     H'7542
    00000288 7547                   .DATA.W     H'7547
    0000028A 7544                   .DATA.W     H'7544
    0000028C 7545                   .DATA.W     H'7545
    0000028E 7536                   .DATA.W     H'7536
    00000290 7537                   .DATA.W     H'7537
    00000292 0080                   .DATA.W     H'0080
    00000294 <00000000>             .DATA.L     _Z
    00000298 <00000000>             .DATA.L     __modls
    0000029C <00000000>             .DATA.L     _Y
    000002A0              L527:                             
    000002A0 323C                   ADD         R3,R2
    000002A2 2E22                   MOV.L       R2,@R14
    000002A4              L506:                             
        REBORN.c   124            //if(x<=64 && y<=64){            //VVV cubes lateraux , n'existent pas encore dans dispExternal, l
                         +es integrer depuis la v 0.1
        REBORN.c   125            //    for (i = 0; i < 1; ++i){
        REBORN.c   126            //        X = X-128;
        REBORN.c   127            //        generateOutputs();
        REBORN.c   128            //        useOutputs();
        REBORN.c   129            //        displayExternal(1+i);
        REBORN.c   130            //        Y = Y-128;
        REBORN.c   131            //        generateOutputs();
        REBORN.c   132            //        useOutputs();
        REBORN.c   133            //        displayExternal(3+i);
        REBORN.c   134            //        X = X+128;
        REBORN.c   135            //        generateOutputs();
        REBORN.c   136            //        useOutputs();
        REBORN.c   137            //        displayExternal(5+i);
        REBORN.c   138            //        Y = Y+128;
        REBORN.c   139            //        Z = Z-128;
        REBORN.c   140            //    }
        REBORN.c   141            //    Z = Z+128;
        REBORN.c   142            //}
        REBORN.c   143            //if(x>=64 && y<=64){
        REBORN.c   144            //    for (i = 0; i < 1; ++i){
        REBORN.c   145            //        X = X+128;
        REBORN.c   146            //        generateOutputs();
        REBORN.c   147            //        useOutputs();
        REBORN.c   148            //        displayExternal(1+i);
        REBORN.c   149            //        Y = Y-128;
        REBORN.c   150            //        generateOutputs();
        REBORN.c   151            //        useOutputs();
        REBORN.c   152            //        displayExternal(3+i);
        REBORN.c   153            //        X = X-128;
        REBORN.c   154            //        generateOutputs();
        REBORN.c   155            //        useOutputs();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        REBORN.c   156            //        displayExternal(5+i);
        REBORN.c   157            //        Y = Y+128;
        REBORN.c   158            //        Z = Z-128;
        REBORN.c   159            //    }
        REBORN.c   160            //    Z = Z+128;
        REBORN.c   161            //}
        REBORN.c   162            //if(x<=64 && y>=64){
        REBORN.c   163            //    for (i = 0; i < 1; ++i){
        REBORN.c   164            //        X = X-128;
        REBORN.c   165            //        generateOutputs();
        REBORN.c   166            //        useOutputs();
        REBORN.c   167            //        displayExternal(1+i);
        REBORN.c   168            //        Y = Y+128;
        REBORN.c   169            //        generateOutputs();
        REBORN.c   170            //        useOutputs();
        REBORN.c   171            //        displayExternal(3+i);
        REBORN.c   172            //        X = X+128;
        REBORN.c   173            //        generateOutputs();
        REBORN.c   174            //        useOutputs();
        REBORN.c   175            //        displayExternal(5+i);
        REBORN.c   176            //        Y = Y-128;
        REBORN.c   177            //        Z = Z-128;
        REBORN.c   178            //    }
        REBORN.c   179            //    Z = Z+128;
        REBORN.c   180            //}
        REBORN.c   181            //if(x>=64 && y>=64){
        REBORN.c   182            //    for (i = 0; i < 1; ++i){
        REBORN.c   183            //        X = X+128;
        REBORN.c   184            //        generateOutputs();
        REBORN.c   185            //        useOutputs();
        REBORN.c   186            //        displayExternal(1+i);
        REBORN.c   187            //        Y = Y+128;
        REBORN.c   188            //        generateOutputs();
        REBORN.c   189            //        useOutputs();
        REBORN.c   190            //        displayExternal(3+i);
        REBORN.c   191            //        X = X-128;
        REBORN.c   192            //        generateOutputs();
        REBORN.c   193            //        useOutputs();
        REBORN.c   194            //        displayExternal(5+i);
        REBORN.c   195            //        Y = Y-128;
        REBORN.c   196            //        Z = Z-128;
        REBORN.c   197            //    }
        REBORN.c   198            //    Z = Z+128;
        REBORN.c   199            //}
        REBORN.c   200        
        REBORN.c   201        } //determine le cube a generer et apelle External 
        REBORN.c   202    }
    000002A4 7F0C                   ADD         #12,R15
    000002A6 4F26                   LDS.L       @R15+,PR
    000002A8 000B                   RTS
    000002AA 6EF6                   MOV.L       @R15+,R14
        REBORN.c   203    void displayExternal(call,x,y,z){
    000002AC              _displayExternal:                ; function: displayExternal
                                                           ; frame size=32
    000002AC 2FE6                   MOV.L       R14,@-R15
        REBORN.c   204        if(call==0){
    000002AE 2448                   TST         R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002B0 2FD6                   MOV.L       R13,@-R15
    000002B2 2FC6                   MOV.L       R12,@-R15
    000002B4 2FB6                   MOV.L       R11,@-R15
    000002B6 6B53                   MOV         R5,R11
    000002B8 2FA6                   MOV.L       R10,@-R15
    000002BA 6A63                   MOV         R6,R10
    000002BC 2F96                   MOV.L       R9,@-R15
    000002BE 2F86                   MOV.L       R8,@-R15
    000002C0 4F22                   STS.L       PR,@-R15
    000002C2 8F39                   BF/S        L507
    000002C4 6C73                   MOV         R7,R12
        REBORN.c   205            ML_clear_vram();
    000002C6 D221                   MOV.L       L532,R2    ; _ML_clear_vram
    000002C8 420B                   JSR         @R2
    000002CA 0009                   NOP
        REBORN.c   206            for (i = 0; i < systemDensity-1; ++i){
    000002CC D820                   MOV.L       L532+4,R8  ; _sunStorageZ
    000002CE E300                   MOV         #0,R3
    000002D0 D920                   MOV.L       L532+8,R9  ; _ML_circle
    000002D2 DE21                   MOV.L       L532+12,R14; _i
    000002D4 A010                   BRA         L508
    000002D6 2E30                   MOV.B       R3,@R14
    000002D8              L509:                             
        REBORN.c   207                ML_circle(x+sunStorageX[i], y+sunStorageY[i], z+sunStorageZ[i], 1);
    000002D8 6DE0                   MOV.B       @R14,R13
    000002DA E701                   MOV         #1,R7
    000002DC D31F                   MOV.L       L532+16,R3 ; _sunStorageY
    000002DE 4D08                   SHLL2       R13
    000002E0 60D3                   MOV         R13,R0
    000002E2 068E                   MOV.L       @(R0,R8),R6
    000002E4 053E                   MOV.L       @(R0,R3),R5
    000002E6 36CC                   ADD         R12,R6
    000002E8 D31D                   MOV.L       L532+20,R3 ; _sunStorageX
    000002EA 35AC                   ADD         R10,R5
    000002EC 043E                   MOV.L       @(R0,R3),R4
    000002EE 490B                   JSR         @R9
    000002F0 34BC                   ADD         R11,R4
    000002F2 62E0                   MOV.B       @R14,R2
    000002F4 7201                   ADD         #1,R2
    000002F6 2E20                   MOV.B       R2,@R14
    000002F8              L508:                             
    000002F8 63E0                   MOV.B       @R14,R3
    000002FA D11A                   MOV.L       L532+24,R1 ; _systemDensity
    000002FC 6212                   MOV.L       @R1,R2
    000002FE 72FF                   ADD         #-1,R2
    00000300 3323                   CMP/GE      R2,R3
    00000302 8BE9                   BF          L509
        REBORN.c   208            }
        REBORN.c   209            for (i = 0; i < planetCount-1; ++i){
    00000304 D818                   MOV.L       L532+28,R8 ; _ML_filled_circle
    00000306 E200                   MOV         #0,R2
    00000308 D918                   MOV.L       L532+32,R9 ; _planetCount
    0000030A A010                   BRA         L510
    0000030C 2E20                   MOV.B       R2,@R14
    0000030E              L511:                             
        REBORN.c   210                ML_filled_circle(x+astralStorageX1[i], y+astralStorageY1[i], z+astralStorageZ1[i], 1);
    0000030E E701                   MOV         #1,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000310 6DE0                   MOV.B       @R14,R13
    00000312 4D08                   SHLL2       R13
    00000314 D016                   MOV.L       L532+36,R0 ; _astralStorageZ1
    00000316 06DE                   MOV.L       @(R0,R13),R6
    00000318 D016                   MOV.L       L532+40,R0 ; _astralStorageY1
    0000031A 36CC                   ADD         R12,R6
    0000031C 05DE                   MOV.L       @(R0,R13),R5
    0000031E 35AC                   ADD         R10,R5
    00000320 D015                   MOV.L       L532+44,R0 ; _astralStorageX1
    00000322 04DE                   MOV.L       @(R0,R13),R4
    00000324 480B                   JSR         @R8
    00000326 34BC                   ADD         R11,R4
    00000328 63E0                   MOV.B       @R14,R3
    0000032A 7301                   ADD         #1,R3
    0000032C 2E30                   MOV.B       R3,@R14
    0000032E              L510:                             
    0000032E 62E0                   MOV.B       @R14,R2
    00000330 6392                   MOV.L       @R9,R3
    00000332 73FF                   ADD         #-1,R3
    00000334 3233                   CMP/GE      R3,R2
    00000336 8BEA                   BF          L511
    00000338              L507:                             
        REBORN.c   211            }
        REBORN.c   212        }
        REBORN.c   213        ML_display_vram();
    00000338 4F26                   LDS.L       @R15+,PR
    0000033A 68F6                   MOV.L       @R15+,R8
    0000033C D30F                   MOV.L       L532+48,R3 ; _ML_display_vram
    0000033E 69F6                   MOV.L       @R15+,R9
    00000340 6AF6                   MOV.L       @R15+,R10
    00000342 6BF6                   MOV.L       @R15+,R11
    00000344 6CF6                   MOV.L       @R15+,R12
    00000346 6DF6                   MOV.L       @R15+,R13
    00000348 432B                   JMP         @R3
    0000034A 6EF6                   MOV.L       @R15+,R14
    0000034C              L532:                             
    0000034C <00000000>             .DATA.L     _ML_clear_vram
    00000350 <00000000>             .DATA.L     _sunStorageZ
    00000354 <00000000>             .DATA.L     _ML_circle
    00000358 <00000000>             .DATA.L     _i
    0000035C <00000000>             .DATA.L     _sunStorageY
    00000360 <00000000>             .DATA.L     _sunStorageX
    00000364 <00000000>             .DATA.L     _systemDensity
    00000368 <00000000>             .DATA.L     _ML_filled_circle
    0000036C <00000000>             .DATA.L     _planetCount
    00000370 <00000000>             .DATA.L     _astralStorageZ1
    00000374 <00000000>             .DATA.L     _astralStorageY1
    00000378 <00000000>             .DATA.L     _astralStorageX1
    0000037C <00000000>             .DATA.L     _ML_display_vram
        REBORN.c   214    }
        REBORN.c   215    void generateOutputs(){// genere 3 constantes en fonc de X Y Z et des seed X0 Y0 Z0
    00000380              _generateOutputs:                ; function: generateOutputs
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __modls
    00000380 2FE6                   MOV.L       R14,@-R15
    00000382 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000384 2FC6                   MOV.L       R12,@-R15
    00000386 4F22                   STS.L       PR,@-R15
        REBORN.c   216        //int local, local1;
        REBORN.c   217        //local = X0-(X/128);
        REBORN.c   218        //while (local>1000){
        REBORN.c   219        //    local /= 10;
        REBORN.c   220        //}
        REBORN.c   221        srand(X);
    00000388 DE4C                   MOV.L       L533+6,R14 ; _srand
    0000038A D34D                   MOV.L       L533+10,R3 ; _X
    0000038C 4E0B                   JSR         @R14
    0000038E 6432                   MOV.L       @R3,R4
        REBORN.c   222        output1 = rand() % 999;
    00000390 9C91                   MOV.W       L533,R12   ; H'03E7
    00000392 DD4C                   MOV.L       L533+14,R13; _rand
    00000394 4D0B                   JSR         @R13
    00000396 0009                   NOP
    00000398 D24B                   MOV.L       L533+18,R2 ; __modls
    0000039A 6103                   MOV         R0,R1
    0000039C 420B                   JSR         @R2
    0000039E 60C3                   MOV         R12,R0
    000003A0 D34A                   MOV.L       L533+22,R3 ; _output1
    000003A2 2302                   MOV.L       R0,@R3
        REBORN.c   223        //output1 = local;
        REBORN.c   224        //local = Y0-(Y/128);
        REBORN.c   225        //while (local>1000){
        REBORN.c   226        //    local /= 10;
        REBORN.c   227        //}
        REBORN.c   228        srand(Y+1);
    000003A4 D24A                   MOV.L       L533+26,R2 ; _Y
    000003A6 6422                   MOV.L       @R2,R4
    000003A8 4E0B                   JSR         @R14
    000003AA 7401                   ADD         #1,R4
        REBORN.c   229        output2 = rand() % 999;
    000003AC 4D0B                   JSR         @R13
    000003AE 0009                   NOP
    000003B0 D345                   MOV.L       L533+18,R3 ; __modls
    000003B2 6103                   MOV         R0,R1
    000003B4 430B                   JSR         @R3
    000003B6 60C3                   MOV         R12,R0
    000003B8 D246                   MOV.L       L533+30,R2 ; _output2
    000003BA 2202                   MOV.L       R0,@R2
        REBORN.c   230        //output2 = local;
        REBORN.c   231        //local = Z0-(Z/128);
        REBORN.c   232        //while (local>1000){
        REBORN.c   233        //    local /= 10;
        REBORN.c   234        //}
        REBORN.c   235        srand(Z);
    000003BC D346                   MOV.L       L533+34,R3 ; _Z
    000003BE 4E0B                   JSR         @R14
    000003C0 6432                   MOV.L       @R3,R4
        REBORN.c   236        output3 = rand() % 999;
    000003C2 4D0B                   JSR         @R13
    000003C4 0009                   NOP
    000003C6 6103                   MOV         R0,R1
    000003C8 D23F                   MOV.L       L533+18,R2 ; __modls
    000003CA 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003CC 60C3                   MOV         R12,R0
    000003CE D343                   MOV.L       L533+38,R3 ; _output3
    000003D0 2302                   MOV.L       R0,@R3
        REBORN.c   237        //output3 = local;
        REBORN.c   238        //output1=output1*X;
        REBORN.c   239        //output2=output2*Y;
        REBORN.c   240        //output3=output3*Z;
        REBORN.c   241        //do{                               // les outputs sont redimenssiones a un maximum de 999 
        REBORN.c   242        //    local1 = output1%10;
        REBORN.c   243        //    output1 = (output1-local1)/10;
        REBORN.c   244        //} while (output1>1000);
        REBORN.c   245        //do{
        REBORN.c   246        //    local1 = output2%10;
        REBORN.c   247        //    output2 = (output2-local1)/10;
        REBORN.c   248        //} while (output2>1000);
        REBORN.c   249        //do
        REBORN.c   250        //{
        REBORN.c   251        //    local1 = output3%10;
        REBORN.c   252        //    output3 = (output3-local1)/10;
        REBORN.c   253        //} while (output3>1000);
        REBORN.c   254    
        REBORN.c   255        useOutputs();
    000003D2 4F26                   LDS.L       @R15+,PR
    000003D4 6CF6                   MOV.L       @R15+,R12
    000003D6 6DF6                   MOV.L       @R15+,R13
    000003D8 6EF6                   MOV.L       @R15+,R14
        REBORN.c   256    }
        REBORN.c   257    void useOutputs(){// rempli les listes d'infos des planetes grace aux outputs (a refaire si systemes solai
                         +res)
    000003DA              _useOutputs:                     ; function: useOutputs
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __modls, __itod, __led
    000003DA 2FE6                   MOV.L       R14,@-R15
    000003DC 2FD6                   MOV.L       R13,@-R15
    000003DE 2FC6                   MOV.L       R12,@-R15
    000003E0 2FB6                   MOV.L       R11,@-R15
    000003E2 2FA6                   MOV.L       R10,@-R15
    000003E4 2F96                   MOV.L       R9,@-R15
    000003E6 2F86                   MOV.L       R8,@-R15
    000003E8 4F22                   STS.L       PR,@-R15
    000003EA 4F12                   STS.L       MACL,@-R15
        REBORN.c   258        srand(output1);
    000003EC D237                   MOV.L       L533+22,R2 ; _output1
    000003EE 7FFC                   ADD         #-4,R15
    000003F0 D332                   MOV.L       L533+6,R3  ; _srand
    000003F2 430B                   JSR         @R3
    000003F4 6422                   MOV.L       @R2,R4
        REBORN.c   259        systemDensity = 5;
    000003F6 E105                   MOV         #5,R1
    000003F8 D339                   MOV.L       L533+42,R3 ; _systemDensity
        REBORN.c   260        planetX, planetY, planetZ;
        REBORN.c   261        planetCount=0;
    000003FA E200                   MOV         #0,R2
    000003FC D039                   MOV.L       L533+46,R0 ; _planetCount
    000003FE 2312                   MOV.L       R1,@R3
    00000400 2022                   MOV.L       R2,@R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        REBORN.c   262        for (i = 0; i <= systemDensity; ++i){
    00000402 DA39                   MOV.L       L533+50,R10; _i
    00000404 D82F                   MOV.L       L533+14,R8 ; _rand
    00000406 2A20                   MOV.B       R2,@R10
    00000408 D938                   MOV.L       L533+54,R9 ; _astralStorageZ1
    0000040A DB39                   MOV.L       L533+58,R11; _planetX
    0000040C DC39                   MOV.L       L533+62,R12; _planetY
    0000040E DD3A                   MOV.L       L533+66,R13; _p
    00000410 DE3A                   MOV.L       L533+70,R14; _o
    00000412 9151                   MOV.W       L533+2,R1  ; H'0190
    00000414 319C                   ADD         R9,R1
    00000416 A166                   BRA         L512
    00000418 2F12                   MOV.L       R1,@R15
    0000041A              L513:                             
        REBORN.c   263            //create suns
        REBORN.c   264    
        REBORN.c   265            output1= output1*i;
    0000041A 62A0                   MOV.B       @R10,R2
    0000041C D12B                   MOV.L       L533+22,R1 ; _output1
    0000041E 6312                   MOV.L       @R1,R3
    00000420 0237                   MUL.L       R3,R2
    00000422 6013                   MOV         R1,R0
        REBORN.c   266            srand(output1+i);
    00000424 D325                   MOV.L       L533+6,R3  ; _srand
    00000426 021A                   STS         MACL,R2
    00000428 2022                   MOV.L       R2,@R0
    0000042A 64A0                   MOV.B       @R10,R4
    0000042C 430B                   JSR         @R3
    0000042E 342C                   ADD         R2,R4
        REBORN.c   267            sunX = (rand() % 120)+8;//X
    00000430 480B                   JSR         @R8
    00000432 0009                   NOP
    00000434 D224                   MOV.L       L533+18,R2 ; __modls
    00000436 6103                   MOV         R0,R1
    00000438 420B                   JSR         @R2
    0000043A E078                   MOV         #120,R0
    0000043C D330                   MOV.L       L533+74,R3 ; _sunX
    0000043E 7008                   ADD         #8,R0
        REBORN.c   268            srand(output2+i);
    00000440 D124                   MOV.L       L533+30,R1 ; _output2
    00000442 2302                   MOV.L       R0,@R3
    00000444 64A0                   MOV.B       @R10,R4
    00000446 6212                   MOV.L       @R1,R2
    00000448 D31C                   MOV.L       L533+6,R3  ; _srand
    0000044A 430B                   JSR         @R3
    0000044C 342C                   ADD         R2,R4
        REBORN.c   269            sunY = (rand() % 120)+8;//Y
    0000044E 480B                   JSR         @R8
    00000450 0009                   NOP
    00000452 6103                   MOV         R0,R1
    00000454 D21C                   MOV.L       L533+18,R2 ; __modls
    00000456 420B                   JSR         @R2
    00000458 E078                   MOV         #120,R0
    0000045A 7008                   ADD         #8,R0
    0000045C D329                   MOV.L       L533+78,R3 ; _sunY
    0000045E 2302                   MOV.L       R0,@R3
        REBORN.c   270            srand(output3+i);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000460 64A0                   MOV.B       @R10,R4
    00000462 D11E                   MOV.L       L533+38,R1 ; _output3
    00000464 D315                   MOV.L       L533+6,R3  ; _srand
    00000466 6212                   MOV.L       @R1,R2
    00000468 430B                   JSR         @R3
    0000046A 342C                   ADD         R2,R4
        REBORN.c   271            sunZ = (rand() % 7)+2;//Z
    0000046C 480B                   JSR         @R8
    0000046E 0009                   NOP
    00000470 D215                   MOV.L       L533+18,R2 ; __modls
    00000472 6103                   MOV         R0,R1
    00000474 420B                   JSR         @R2
    00000476 E007                   MOV         #7,R0
    00000478 D323                   MOV.L       L533+82,R3 ; _sunZ
    0000047A 7002                   ADD         #2,R0
    0000047C 2302                   MOV.L       R0,@R3
        REBORN.c   272            sunStorageX[i] = sunX;   //fill storage
    0000047E 62A0                   MOV.B       @R10,R2
    00000480 D022                   MOV.L       L533+86,R0 ; _sunStorageX
    00000482 4208                   SHLL2       R2
    00000484 D31E                   MOV.L       L533+74,R3 ; _sunX
    00000486 6132                   MOV.L       @R3,R1
        REBORN.c   273            sunStorageY[i] = sunY;
    00000488 D31E                   MOV.L       L533+78,R3 ; _sunY
    0000048A 0216                   MOV.L       R1,@(R0,R2)
    0000048C 62A0                   MOV.B       @R10,R2
    0000048E 4208                   SHLL2       R2
    00000490 D01F                   MOV.L       L533+90,R0 ; _sunStorageY
    00000492 6132                   MOV.L       @R3,R1
        REBORN.c   274            sunStorageZ[i] = sunZ;
    00000494 D31C                   MOV.L       L533+82,R3 ; _sunZ
    00000496 0216                   MOV.L       R1,@(R0,R2)
    00000498 62A0                   MOV.B       @R10,R2
    0000049A 4208                   SHLL2       R2
    0000049C D01D                   MOV.L       L533+94,R0 ; _sunStorageZ
    0000049E 6132                   MOV.L       @R3,R1
        REBORN.c   275            planetDensity = (rand() % 20)+1;    // create density
    000004A0 480B                   JSR         @R8
    000004A2 0216                   MOV.L       R1,@(R0,R2)
    000004A4 D208                   MOV.L       L533+18,R2 ; __modls
    000004A6 6103                   MOV         R0,R1
    000004A8 420B                   JSR         @R2
    000004AA E014                   MOV         #20,R0
    000004AC D31A                   MOV.L       L533+98,R3 ; _planetDensity
    000004AE 7001                   ADD         #1,R0
    000004B0 2302                   MOV.L       R0,@R3
        REBORN.c   276            for (o = 0; o < planetDensity; ++o){
    000004B2 A10D                   BRA         L528
    000004B4 E200                   MOV         #0,R2
    000004B6              L533:                             
    000004B6 03E7                   .DATA.W     H'03E7
    000004B8 0190                   .DATA.W     H'0190
    000004BA 0000                   .DATA.W     0
    000004BC <00000000>             .DATA.L     _srand
    000004C0 <00000000>             .DATA.L     _X
    000004C4 <00000000>             .DATA.L     _rand
    000004C8 <00000000>             .DATA.L     __modls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004CC <00000000>             .DATA.L     _output1
    000004D0 <00000000>             .DATA.L     _Y
    000004D4 <00000000>             .DATA.L     _output2
    000004D8 <00000000>             .DATA.L     _Z
    000004DC <00000000>             .DATA.L     _output3
    000004E0 <00000000>             .DATA.L     _systemDensity
    000004E4 <00000000>             .DATA.L     _planetCount
    000004E8 <00000000>             .DATA.L     _i
    000004EC <00000000>             .DATA.L     _astralStorageZ1
    000004F0 <00000000>             .DATA.L     _planetX
    000004F4 <00000000>             .DATA.L     _planetY
    000004F8 <00000000>             .DATA.L     _p
    000004FC <00000000>             .DATA.L     _o
    00000500 <00000000>             .DATA.L     _sunX
    00000504 <00000000>             .DATA.L     _sunY
    00000508 <00000000>             .DATA.L     _sunZ
    0000050C <00000000>             .DATA.L     _sunStorageX
    00000510 <00000000>             .DATA.L     _sunStorageY
    00000514 <00000000>             .DATA.L     _sunStorageZ
    00000518 <00000000>             .DATA.L     _planetDensity
    0000051C              L515:                             
        REBORN.c   277                //create planets around sun
        REBORN.c   278    
        REBORN.c   279                //X
        REBORN.c   280                srand(output1+sunX+o);
    0000051C 64E0                   MOV.B       @R14,R4
    0000051E D27B                   MOV.L       L534+2,R2  ; _output1
    00000520 D07B                   MOV.L       L534+6,R0  ; _sunX
    00000522 6322                   MOV.L       @R2,R3
    00000524 6102                   MOV.L       @R0,R1
    00000526 343C                   ADD         R3,R4
    00000528 D37A                   MOV.L       L534+10,R3 ; _srand
    0000052A 430B                   JSR         @R3
    0000052C 341C                   ADD         R1,R4
        REBORN.c   281                planetX = (rand() % 47) -15;
    0000052E 480B                   JSR         @R8
    00000530 0009                   NOP
    00000532 6103                   MOV         R0,R1
    00000534 D278                   MOV.L       L534+14,R2 ; __modls
    00000536 420B                   JSR         @R2
    00000538 E02F                   MOV         #47,R0
    0000053A 70F1                   ADD         #-15,R0
    0000053C 6403                   MOV         R0,R4
    0000053E E309                   MOV         #9,R3
    00000540 3437                   CMP/GT      R3,R4
    00000542 8D05                   BT/S        L516
    00000544 2B02                   MOV.L       R0,@R11
    00000546 61B2                   MOV.L       @R11,R1
    00000548 4111                   CMP/PZ      R1
    0000054A 8B01                   BF          L516
        REBORN.c   282                if(planetX <= 9 && planetX >= 0){
        REBORN.c   283                    planetX = planetX+9;
    0000054C 7409                   ADD         #9,R4
    0000054E 2B42                   MOV.L       R4,@R11
    00000550              L516:                             
    00000550 64B2                   MOV.L       @R11,R4
    00000552 E3F7                   MOV         #-9,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000554 3433                   CMP/GE      R3,R4
    00000556 8B03                   BF          L517
    00000558 4415                   CMP/PL      R4
    0000055A 8901                   BT          L517
        REBORN.c   284                }
        REBORN.c   285                if(planetX >= -9 && planetX <= 0){
        REBORN.c   286                    planetX = planetX-9;
    0000055C 74F7                   ADD         #-9,R4
    0000055E 2B42                   MOV.L       R4,@R11
    00000560              L517:                             
        REBORN.c   287                }
        REBORN.c   288                planetX = sunX+planetX;
    00000560 D16B                   MOV.L       L534+6,R1  ; _sunX
    00000562 6312                   MOV.L       @R1,R3
    00000564 62B2                   MOV.L       @R11,R2
    00000566 323C                   ADD         R3,R2
    00000568 2B22                   MOV.L       R2,@R11
        REBORN.c   289    
        REBORN.c   290                //Y
        REBORN.c   291                srand(output2+sunY+o);
    0000056A 64E0                   MOV.B       @R14,R4
    0000056C D26B                   MOV.L       L534+18,R2 ; _output2
    0000056E 6322                   MOV.L       @R2,R3
    00000570 D06B                   MOV.L       L534+22,R0 ; _sunY
    00000572 343C                   ADD         R3,R4
    00000574 6102                   MOV.L       @R0,R1
    00000576 D367                   MOV.L       L534+10,R3 ; _srand
    00000578 430B                   JSR         @R3
    0000057A 341C                   ADD         R1,R4
        REBORN.c   292                planetY = (rand() % 47) -15;
    0000057C 480B                   JSR         @R8
    0000057E 0009                   NOP
    00000580 D265                   MOV.L       L534+14,R2 ; __modls
    00000582 6103                   MOV         R0,R1
    00000584 420B                   JSR         @R2
    00000586 E02F                   MOV         #47,R0
    00000588 70F1                   ADD         #-15,R0
    0000058A 6403                   MOV         R0,R4
    0000058C E309                   MOV         #9,R3
    0000058E 3437                   CMP/GT      R3,R4
    00000590 8D05                   BT/S        L518
    00000592 2C02                   MOV.L       R0,@R12
    00000594 61C2                   MOV.L       @R12,R1
    00000596 4111                   CMP/PZ      R1
    00000598 8B01                   BF          L518
        REBORN.c   293                if(planetY <= 9 && planetY >= 0){
        REBORN.c   294                    planetY = planetY+9;
    0000059A 7409                   ADD         #9,R4
    0000059C 2C42                   MOV.L       R4,@R12
    0000059E              L518:                             
    0000059E E3F7                   MOV         #-9,R3
    000005A0 64C2                   MOV.L       @R12,R4
    000005A2 3433                   CMP/GE      R3,R4
    000005A4 8B03                   BF          L519
    000005A6 4415                   CMP/PL      R4
    000005A8 8901                   BT          L519
        REBORN.c   295                }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        REBORN.c   296                if(planetY >= -9 && planetY <= 0){
        REBORN.c   297                    planetY = planetY-9;
    000005AA 74F7                   ADD         #-9,R4
    000005AC 2C42                   MOV.L       R4,@R12
    000005AE              L519:                             
        REBORN.c   298                }
        REBORN.c   299                planetY = sunY+planetY;
    000005AE D15C                   MOV.L       L534+22,R1 ; _sunY
    000005B0 62C2                   MOV.L       @R12,R2
    000005B2 6312                   MOV.L       @R1,R3
        REBORN.c   300                //while(sqrt(pow(planetX-sunX,2)+pow(planetY-sunY,2))>20){
        REBORN.c   301                //    --planetX;
        REBORN.c   302                //    --planetY;
        REBORN.c   303                //}
        REBORN.c   304    
        REBORN.c   305                //Z
        REBORN.c   306                srand(output3+sunZ+o);
    000005B4 D05C                   MOV.L       L534+30,R0 ; _sunZ
    000005B6 323C                   ADD         R3,R2
    000005B8 2C22                   MOV.L       R2,@R12
    000005BA 64E0                   MOV.B       @R14,R4
    000005BC D259                   MOV.L       L534+26,R2 ; _output3
    000005BE 6322                   MOV.L       @R2,R3
    000005C0 6102                   MOV.L       @R0,R1
    000005C2 343C                   ADD         R3,R4
    000005C4 D353                   MOV.L       L534+10,R3 ; _srand
    000005C6 430B                   JSR         @R3
    000005C8 341C                   ADD         R1,R4
        REBORN.c   307                planetZ = (rand() % 3)+1;
    000005CA 480B                   JSR         @R8
    000005CC 0009                   NOP
    000005CE 6103                   MOV         R0,R1
    000005D0 D251                   MOV.L       L534+14,R2 ; __modls
    000005D2 420B                   JSR         @R2
    000005D4 E003                   MOV         #3,R0
    000005D6 7001                   ADD         #1,R0
    000005D8 D354                   MOV.L       L534+34,R3 ; _planetZ
    000005DA 2302                   MOV.L       R0,@R3
        REBORN.c   308                astralStorageX1[o] = planetX;   //fill storage
    000005DC 62E0                   MOV.B       @R14,R2
    000005DE 4208                   SHLL2       R2
    000005E0 D053                   MOV.L       L534+38,R0 ; _astralStorageX1
    000005E2 61B2                   MOV.L       @R11,R1
    000005E4 0216                   MOV.L       R1,@(R0,R2)
        REBORN.c   309                astralStorageY1[o] = planetY;
    000005E6 62E0                   MOV.B       @R14,R2
    000005E8 D052                   MOV.L       L534+42,R0 ; _astralStorageY1
    000005EA 4208                   SHLL2       R2
    000005EC 61C2                   MOV.L       @R12,R1
    000005EE 0216                   MOV.L       R1,@(R0,R2)
        REBORN.c   310                astralStorageZ1[o] = planetZ;
    000005F0 60E0                   MOV.B       @R14,R0
    000005F2 4008                   SHLL2       R0
    000005F4 6232                   MOV.L       @R3,R2
    000005F6 0926                   MOV.L       R2,@(R0,R9)
        REBORN.c   311                ++planetCount;
    000005F8 D14F                   MOV.L       L534+46,R1 ; _planetCount




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005FA 6012                   MOV.L       @R1,R0
    000005FC 7001                   ADD         #1,R0
    000005FE 2102                   MOV.L       R0,@R1
        REBORN.c   312                for (p = o-1; p > 0; --p){
    00000600 62E0                   MOV.B       @R14,R2
    00000602 72FF                   ADD         #-1,R2
    00000604 A05F                   BRA         L520
    00000606 2D20                   MOV.B       R2,@R13
    00000608              L523:                             
        REBORN.c   313                    while(fabs(astralStorageX1[p]-astralStorageX1[o]) <= (astralStorageZ1[p]+astralStorageZ1[o
                         +]+1)){
        REBORN.c   314                        ++astralStorageX1[p];
    00000608 61D0                   MOV.B       @R13,R1
    0000060A 4108                   SHLL2       R1
    0000060C D048                   MOV.L       L534+38,R0 ; _astralStorageX1
    0000060E 031E                   MOV.L       @(R0,R1),R3
    00000610 7301                   ADD         #1,R3
    00000612 0136                   MOV.L       R3,@(R0,R1)
    00000614              L522:                             
    00000614 63E0                   MOV.B       @R14,R3
    00000616 4308                   SHLL2       R3
    00000618 D045                   MOV.L       L534+38,R0 ; _astralStorageX1
    0000061A 023E                   MOV.L       @(R0,R3),R2
    0000061C 60D0                   MOV.B       @R13,R0
    0000061E 4008                   SHLL2       R0
    00000620 D143                   MOV.L       L534+38,R1 ; _astralStorageX1
    00000622 001E                   MOV.L       @(R0,R1),R0
    00000624 D345                   MOV.L       L534+50,R3 ; __itod
    00000626 3028                   SUB         R2,R0
    00000628 7FF0                   ADD         #-16,R15
    0000062A 430B                   JSR         @R3
    0000062C 2FF6                   MOV.L       R15,@-R15
    0000062E E208                   MOV         #8,R2
    00000630 D343                   MOV.L       L534+54,R3 ; _fabs
    00000632 32FC                   ADD         R15,R2
    00000634 430B                   JSR         @R3
    00000636 2F26                   MOV.L       R2,@-R15
    00000638 60D0                   MOV.B       @R13,R0
    0000063A 4008                   SHLL2       R0
    0000063C 009E                   MOV.L       @(R0,R9),R0
    0000063E 63E0                   MOV.B       @R14,R3
    00000640 4308                   SHLL2       R3
    00000642 339C                   ADD         R9,R3
    00000644 6232                   MOV.L       @R3,R2
    00000646 7F04                   ADD         #4,R15
    00000648 D33C                   MOV.L       L534+50,R3 ; __itod
    0000064A 302C                   ADD         R2,R0
    0000064C 7001                   ADD         #1,R0
    0000064E 430B                   JSR         @R3
    00000650 2FF6                   MOV.L       R15,@-R15
    00000652 D23C                   MOV.L       L534+58,R2 ; __led
    00000654 420B                   JSR         @R2
    00000656 0009                   NOP
    00000658 8800                   CMP/EQ      #0,R0
    0000065A 8BD5                   BF          L523
        REBORN.c   315                    }
        REBORN.c   316                    astralStorageZ1[100] = planetZ;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000065C 63F2                   MOV.L       @R15,R3
    0000065E D133                   MOV.L       L534+34,R1 ; _planetZ
    00000660 6212                   MOV.L       @R1,R2
    00000662 2322                   MOV.L       R2,@R3
        REBORN.c   317                    while(fabs(astralStorageY1[p]-astralStorageY1[o]) <= (astralStorageZ1[p]+astralStorageZ1[o
                         +]+1)){
    00000664 A008                   BRA         L524
    00000666 0009                   NOP
    00000668              L525:                             
        REBORN.c   318                        ++astralStorageY1[p];
    00000668 60D0                   MOV.B       @R13,R0
    0000066A 4008                   SHLL2       R0
    0000066C D131                   MOV.L       L534+42,R1 ; _astralStorageY1
    0000066E 031E                   MOV.L       @(R0,R1),R3
    00000670 7301                   ADD         #1,R3
    00000672 6213                   MOV         R1,R2
    00000674 320C                   ADD         R0,R2
    00000676 2232                   MOV.L       R3,@R2
    00000678              L524:                             
    00000678 63E0                   MOV.B       @R14,R3
    0000067A 4308                   SHLL2       R3
    0000067C D02D                   MOV.L       L534+42,R0 ; _astralStorageY1
    0000067E 023E                   MOV.L       @(R0,R3),R2
    00000680 60D0                   MOV.B       @R13,R0
    00000682 4008                   SHLL2       R0
    00000684 D12B                   MOV.L       L534+42,R1 ; _astralStorageY1
    00000686 001E                   MOV.L       @(R0,R1),R0
    00000688 D32C                   MOV.L       L534+50,R3 ; __itod
    0000068A 3028                   SUB         R2,R0
    0000068C 7FF0                   ADD         #-16,R15
    0000068E 430B                   JSR         @R3
    00000690 2FF6                   MOV.L       R15,@-R15
    00000692 E208                   MOV         #8,R2
    00000694 D32A                   MOV.L       L534+54,R3 ; _fabs
    00000696 32FC                   ADD         R15,R2
    00000698 430B                   JSR         @R3
    0000069A 2F26                   MOV.L       R2,@-R15
    0000069C 60D0                   MOV.B       @R13,R0
    0000069E 4008                   SHLL2       R0
    000006A0 009E                   MOV.L       @(R0,R9),R0
    000006A2 63E0                   MOV.B       @R14,R3
    000006A4 4308                   SHLL2       R3
    000006A6 339C                   ADD         R9,R3
    000006A8 6232                   MOV.L       @R3,R2
    000006AA 7F04                   ADD         #4,R15
    000006AC D323                   MOV.L       L534+50,R3 ; __itod
    000006AE 302C                   ADD         R2,R0
    000006B0 7001                   ADD         #1,R0
    000006B2 430B                   JSR         @R3
    000006B4 2FF6                   MOV.L       R15,@-R15
    000006B6 D223                   MOV.L       L534+58,R2 ; __led
    000006B8 420B                   JSR         @R2
    000006BA 0009                   NOP
    000006BC 8800                   CMP/EQ      #0,R0
    000006BE 8BD3                   BF          L525
    000006C0 63D0                   MOV.B       @R13,R3
    000006C2 73FF                   ADD         #-1,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006C4 2D30                   MOV.B       R3,@R13
    000006C6              L520:                             
    000006C6 62D0                   MOV.B       @R13,R2
    000006C8 4215                   CMP/PL      R2
    000006CA 89A3                   BT          L522
    000006CC 62E0                   MOV.B       @R14,R2
    000006CE 7201                   ADD         #1,R2
    000006D0              L528:                             
    000006D0 2E20                   MOV.B       R2,@R14
    000006D2 63E0                   MOV.B       @R14,R3
    000006D4 D11C                   MOV.L       L534+62,R1 ; _planetDensity
    000006D6 6212                   MOV.L       @R1,R2
    000006D8 3323                   CMP/GE      R2,R3
    000006DA 8901                   BT          L535
    000006DC AF1E                   BRA         L515
    000006DE 0009                   NOP
    000006E0              L535:                             
    000006E0 60A0                   MOV.B       @R10,R0
    000006E2 7001                   ADD         #1,R0
    000006E4 2A00                   MOV.B       R0,@R10
    000006E6              L512:                             
    000006E6 63A0                   MOV.B       @R10,R3
    000006E8 D118                   MOV.L       L534+66,R1 ; _systemDensity
    000006EA 6212                   MOV.L       @R1,R2
    000006EC 3327                   CMP/GT      R2,R3
    000006EE 8901                   BT          L536
    000006F0 AE93                   BRA         L513
    000006F2 0009                   NOP
    000006F4              L536:                             
        REBORN.c   319                    }
        REBORN.c   320                    
        REBORN.c   321                }
        REBORN.c   322                
        REBORN.c   323            }
        REBORN.c   324        }
        REBORN.c   325    }
    000006F4 7F04                   ADD         #4,R15
    000006F6 4F16                   LDS.L       @R15+,MACL
    000006F8 4F26                   LDS.L       @R15+,PR
    000006FA 68F6                   MOV.L       @R15+,R8
    000006FC 69F6                   MOV.L       @R15+,R9
    000006FE 6AF6                   MOV.L       @R15+,R10
    00000700 6BF6                   MOV.L       @R15+,R11
    00000702 6CF6                   MOV.L       @R15+,R12
    00000704 6DF6                   MOV.L       @R15+,R13
    00000706 000B                   RTS
    00000708 6EF6                   MOV.L       @R15+,R14
    0000070A              L534:                             
    0000070A 0000                   .DATA.W     0
    0000070C <00000000>             .DATA.L     _output1
    00000710 <00000000>             .DATA.L     _sunX
    00000714 <00000000>             .DATA.L     _srand
    00000718 <00000000>             .DATA.L     __modls
    0000071C <00000000>             .DATA.L     _output2
    00000720 <00000000>             .DATA.L     _sunY
    00000724 <00000000>             .DATA.L     _output3
    00000728 <00000000>             .DATA.L     _sunZ




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000072C <00000000>             .DATA.L     _planetZ
    00000730 <00000000>             .DATA.L     _astralStorageX1
    00000734 <00000000>             .DATA.L     _astralStorageY1
    00000738 <00000000>             .DATA.L     _planetCount
    0000073C <00000000>             .DATA.L     __itod
    00000740 <00000000>             .DATA.L     _fabs
    00000744 <00000000>             .DATA.L     __led
    00000748 <00000000>             .DATA.L     _planetDensity
    0000074C <00000000>             .DATA.L     _systemDensity
        REBORN.c   326    
        REBORN.c   327    
        REBORN.c   328    
        REBORN.c   329    
        REBORN.c   330    //****************************************************************************
        REBORN.c   331    //**************                                              ****************
        REBORN.c   332    //**************                 Notice!                      ****************
        REBORN.c   333    //**************                                              ****************
        REBORN.c   334    //**************  Please do not change the following source.  ****************
        REBORN.c   335    //**************                                              ****************
        REBORN.c   336    //****************************************************************************
        REBORN.c   337    
        REBORN.c   338    
        REBORN.c   339    #pragma section _BR_Size
        REBORN.c   340    unsigned long BR_Size;
        REBORN.c   341    #pragma section
        REBORN.c   342    
        REBORN.c   343    
        REBORN.c   344    #pragma section _TOP
        REBORN.c   345    
        REBORN.c   346    //****************************************************************************
        REBORN.c   347    //  InitializeSystem
        REBORN.c   348    //
        REBORN.c   349    //  param   :   isAppli   : 1 = Application / 0 = eActivity
        REBORN.c   350    //              OptionNum : Option Number (only eActivity)
        REBORN.c   351    //
        REBORN.c   352    //  retval  :   1 = No error / 0 = Error
        REBORN.c   353    //
        REBORN.c   354    //****************************************************************************
        REBORN.c   355    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
        REBORN.c   356    {
        REBORN.c   357        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L537+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L537:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
        REBORN.c   358    }
        REBORN.c   359    
        REBORN.c   360    #pragma section
C   00000000              _X0:                             ; static: X0
    00000000 00181C80               .DATA.L     H'00181C80
    00000004              _Y0:                             ; static: Y0
    00000004 0020B980               .DATA.L     H'0020B980
    00000008              _Z0:                             ; static: Z0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000008 0029E300               .DATA.L     H'0029E300
D   00000000              _X:                              ; static: X
    00000000 00000000               .DATA.L     H'00000000
    00000004              _Y:                              ; static: Y
    00000004 00000000               .DATA.L     H'00000000
    00000008              _Z:                              ; static: Z
    00000008 00000000               .DATA.L     H'00000000
    0000000C              _systemDensity:                  ; static: systemDensity
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _planetDensity:                  ; static: planetDensity
    00000010 00000000               .DATA.L     H'00000000
B   00000000              _output1:                        ; static: output1
    00000000 00000004               .RES.L      1
    00000004              _output2:                        ; static: output2
    00000004 00000004               .RES.L      1
    00000008              _output3:                        ; static: output3
    00000008 00000004               .RES.L      1
    0000000C              _sunStorageX:                    ; static: sunStorageX
    0000000C 00000028               .RES.L      10
    00000034              _sunStorageY:                    ; static: sunStorageY
    00000034 00000028               .RES.L      10
    0000005C              _sunStorageZ:                    ; static: sunStorageZ
    0000005C 00000028               .RES.L      10
    00000084              _astralStorageX1:                ; static: astralStorageX1
    00000084 00000168               .RES.L      90
    000001EC              _astralStorageY1:                ; static: astralStorageY1
    000001EC 00000168               .RES.L      90
    00000354              _astralStorageZ1:                ; static: astralStorageZ1
    00000354 00000168               .RES.L      90
    000004BC              _i:                              ; static: i
    000004BC 00000001               .RES.B      1
    000004BD              _o:                              ; static: o
    000004BD 00000001               .RES.B      1
    000004BE              _p:                              ; static: p
    000004BE 00000001               .RES.B      1
    000004BF              _x:                              ; static: x
    000004BF 00000001               .RES.B      1
    000004C0              _y:                              ; static: y
    000004C0 00000001               .RES.B      1
    000004C1              _z:                              ; static: z
    000004C1 00000001               .RES.B      1
    000004C2 00000002               .RES.W      1
    000004C4              _planetX:                        ; static: planetX
    000004C4 00000004               .RES.L      1
    000004C8              _planetY:                        ; static: planetY
    000004C8 00000004               .RES.L      1
    000004CC              _planetZ:                        ; static: planetZ
    000004CC 00000004               .RES.L      1
    000004D0              _sunX:                           ; static: sunX
    000004D0 00000004               .RES.L      1
    000004D4              _sunY:                           ; static: sunY
    000004D4 00000004               .RES.L      1
    000004D8              _sunZ:                           ; static: sunZ
    000004D8 00000004               .RES.L      1
    000004DC              _planetCount:                    ; static: planetCount
    000004DC 00000004               .RES.L      1
B_B 00000000              _BR_Size:                        ; static: BR_Size




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000000 00000004               .RES.L      1




























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 06-Jun-2015 22:54:01  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      360



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000750 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000000C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000014 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               000004E0 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000C60 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           13
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          38
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            94






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\Az\AppData\Local\Temp\hmkAC29.tmp 

