SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Casio Projets\Etoile\MonochromeLib.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome     1    /*************************************************************/
      Monochrome     2    /** MonochromeLib - monochrome graphic library for fx-9860G **/
      Monochrome     3    /** MonochromeLib is free software                          **/
      Monochrome     4    /**                                                         **/
      Monochrome     5    /** @author Pierre "PierrotLL" Le Gall                      **/
      Monochrome     6    /** @contact legallpierre89@gmail.com                       **/
      Monochrome     7    /**                                                         **/
      Monochrome     8    /** @file MonochromeLib.c                                   **/
      Monochrome     9    /** Code file of MonochromeLib                              **/
      Monochrome    10    /**                                                         **/
      Monochrome    11    /** @date 11-22-2011                                        **/
      Monochrome    12    /*************************************************************/
      Monochrome    13    
      Monochrome    14    #include "MonochromeLib.h"
      Monochrome    15    #include <stdlib.h>
      Monochrome    16    #include "fxlib.h"
      Monochrome    17    #include "mathf.h"
      Monochrome    18    
      Monochrome    19    
      Monochrome    20    /******************************/
      Monochrome    21    /** Dependencies management  **/
      Monochrome    22    /******************************/
      Monochrome    23    
      Monochrome    24    #ifdef ML_ALL
      Monochrome    25            #define ML_CLEAR_VRAM
      Monochrome    26            #define ML_CLEAR_SCREEN
      Monochrome    27            #define ML_DISPLAY_VRAM
      Monochrome    28            #define ML_SET_CONTRAST
      Monochrome    29            #define ML_GET_CONTRAST
      Monochrome    30            #define ML_PIXEL
      Monochrome    31            #define ML_POINT
      Monochrome    32            #define ML_PIXEL_TEST
      Monochrome    33            #define ML_LINE
      Monochrome    34            #define ML_HORIZONTAL_LINE
      Monochrome    35            #define ML_VERTICAL_LINE
      Monochrome    36            #define ML_RECTANGLE
      Monochrome    37            #define ML_POLYGON
      Monochrome    38            #define ML_FILLED_POLYGON
      Monochrome    39            #define ML_CIRCLE
      Monochrome    40            #define ML_FILLED_CIRCLE
      Monochrome    41            #define ML_ELLIPSE
      Monochrome    42            #define ML_ELLIPSE_IN_RECT
      Monochrome    43            #define ML_FILLED_ELLIPSE
      Monochrome    44            #define ML_FILLED_ELLIPSE_IN_RECT
      Monochrome    45            #define ML_HORIZONTAL_SCROLL
      Monochrome    46            #define ML_VERTICAL_SCROLL
      Monochrome    47            #define ML_BMP_OR
      Monochrome    48            #define ML_BMP_AND
      Monochrome    49            #define ML_BMP_XOR
      Monochrome    50            #define ML_BMP_OR_CL
      Monochrome    51            #define ML_BMP_AND_CL
      Monochrome    52            #define ML_BMP_XOR_CL
      Monochrome    53            #define ML_BMP_8_OR
      Monochrome    54            #define ML_BMP_8_AND




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome    55            #define ML_BMP_8_XOR
      Monochrome    56            #define ML_BMP_8_OR_CL
      Monochrome    57            #define ML_BMP_8_AND_CL
      Monochrome    58            #define ML_BMP_8_XOR_CL
      Monochrome    59            #define ML_BMP_16_OR
      Monochrome    60            #define ML_BMP_16_AND
      Monochrome    61            #define ML_BMP_16_XOR
      Monochrome    62            #define ML_BMP_16_OR_CL
      Monochrome    63            #define ML_BMP_16_AND_CL
      Monochrome    64            #define ML_BMP_16_XOR_CL
      Monochrome    65            #define ML_BMP_OR_ZOOM
      Monochrome    66            #define ML_BMP_AND_ZOOM
      Monochrome    67            #define ML_BMP_XOR_ZOOM
      Monochrome    68            #define ML_BMP_OR_ROTATE
      Monochrome    69            #define ML_BMP_AND_ROTATE
      Monochrome    70            #define ML_BMP_XOR_ROTATE
      Monochrome    71    #endif
      Monochrome    72    
      Monochrome    73    #ifdef ML_POLYGON
      Monochrome    74            #define ML_LINE
      Monochrome    75    #endif
      Monochrome    76    
      Monochrome    77    #ifdef ML_LINE
      Monochrome    78            #define ML_PIXEL
      Monochrome    79    #endif
      Monochrome    80    
      Monochrome    81    #ifdef ML_POINT
      Monochrome    82            #define ML_PIXEL
      Monochrome    83            #define ML_RECTANGLE
      Monochrome    84    #endif
      Monochrome    85    
      Monochrome    86    #ifdef ML_RECTANGLE
      Monochrome    87            #define ML_HORIZONTAL_LINE
      Monochrome    88    #endif
      Monochrome    89    
      Monochrome    90    #ifdef ML_FILLED_POLYGON
      Monochrome    91            #define ML_HORIZONTAL_LINE
      Monochrome    92    #endif
      Monochrome    93    
      Monochrome    94    #ifdef ML_CIRCLE
      Monochrome    95            #define ML_PIXEL
      Monochrome    96    #endif
      Monochrome    97    
      Monochrome    98    #ifdef ML_FILLED_CIRCLE
      Monochrome    99            #define ML_HORIZONTAL_LINE
      Monochrome   100    #endif
      Monochrome   101    
      Monochrome   102    #ifdef ML_ELLIPSE_IN_RECT
      Monochrome   103            #define ML_ELLIPSE
      Monochrome   104    #endif
      Monochrome   105    
      Monochrome   106    #ifdef ML_ELLIPSE
      Monochrome   107            #define ML_PIXEL
      Monochrome   108    #endif
      Monochrome   109    
      Monochrome   110    #ifdef ML_FILLED_ELLIPSE_IN_RECT
      Monochrome   111            #define ML_FILLED_ELLIPSE




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   112    #endif
      Monochrome   113    
      Monochrome   114    #ifdef ML_FILLED_ELLIPSE
      Monochrome   115            #define ML_HORIZONTAL_LINE
      Monochrome   116    #endif
      Monochrome   117    
      Monochrome   118    
      Monochrome   119    /***************/
      Monochrome   120    /** Functions **/
      Monochrome   121    /***************/
      Monochrome   122    
      Monochrome   123    #define sgn(x)  (x<0?-1:1)
      Monochrome   124    #define rnd(x)  ((int)(x+0.5))
      Monochrome   125    
      Monochrome   126    //Thanks to Simon Lothar for this function
      Monochrome   127    static int SysCallCode[] = {0xD201422B,0x60F20000,0x80010070};
      Monochrome   128    static int (*SysCall)( int R4, int R5, int R6, int R7, int FNo ) = (void*)&SysCallCode;
      Monochrome   129    char* ML_vram_adress()
P   00000000              _ML_vram_adress:                 ; function: ML_vram_adress
                                                           ; frame size=8
    00000000 4F22                   STS.L       PR,@-R15
      Monochrome   130    {
      Monochrome   131            return (char*)((*SysCall)(0, 0, 0, 0, 309));
    00000002 E700                   MOV         #0,R7
    00000004 D344                   MOV.L       L1652+4,R3 ; __$SysCall
    00000006 6673                   MOV         R7,R6
    00000008 9284                   MOV.W       L1652,R2   ; H'0135
    0000000A 6573                   MOV         R7,R5
    0000000C 6032                   MOV.L       @R3,R0
    0000000E 2F26                   MOV.L       R2,@-R15
    00000010 400B                   JSR         @R0
    00000012 6473                   MOV         R7,R4
      Monochrome   132    }
    00000014 7F04                   ADD         #4,R15
    00000016 4F26                   LDS.L       @R15+,PR
    00000018 000B                   RTS
    0000001A 0009                   NOP
      Monochrome   133    
      Monochrome   134    #ifdef ML_CLEAR_VRAM
      Monochrome   135    void ML_clear_vram()
    0000001C              _ML_clear_vram:                  ; function: ML_clear_vram
                                                           ; frame size=8
    0000001C 2FD6                   MOV.L       R13,@-R15
    0000001E 4F22                   STS.L       PR,@-R15
      Monochrome   136    {
      Monochrome   137            int i, end, *pointer_long, vram;
      Monochrome   138            char *pointer_byte;
      Monochrome   139            vram = (int)ML_vram_adress();
    00000020 BFEE                   BSR         _ML_vram_adress
    00000022 0009                   NOP
    00000024 6703                   MOV         R0,R7
      Monochrome   140            end = 4-vram&3;
    00000026 E004                   MOV         #4,R0
    00000028 3078                   SUB         R7,R0
    0000002A E603                   MOV         #3,R6
    0000002C 2609                   AND         R0,R6
      Monochrome   141            pointer_byte = (char*)vram;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002E 6D73                   MOV         R7,R13
      Monochrome   142            for(i=0 ; i<end ; i++) pointer_byte[i] = 0;
    00000030 E400                   MOV         #0,R4
    00000032 6143                   MOV         R4,R1
    00000034 4615                   CMP/PL      R6
    00000036 8F05                   BF/S        L1120
    00000038 6573                   MOV         R7,R5
    0000003A              L1121:                            
    0000003A 7101                   ADD         #1,R1
    0000003C 2540                   MOV.B       R4,@R5
    0000003E 3163                   CMP/GE      R6,R1
    00000040 8FFB                   BF/S        L1121
    00000042 7501                   ADD         #1,R5
    00000044              L1120:                            
    00000044 9067                   MOV.W       L1652+2,R0 ; H'03FC
      Monochrome   143            pointer_long = (int*) (vram+end);
    00000046 6163                   MOV         R6,R1
    00000048 317C                   ADD         R7,R1
    0000004A 6513                   MOV         R1,R5
    0000004C 301C                   ADD         R1,R0
      Monochrome   144            for(i=0 ; i<255 ; i++) pointer_long[i] = 0;
    0000004E              L1122:                            
    0000004E 2542                   MOV.L       R4,@R5
    00000050 7504                   ADD         #4,R5
    00000052 3502                   CMP/HS      R0,R5
    00000054 8BFB                   BF          L1122
      Monochrome   145            pointer_byte += 1020+end;
    00000056 925E                   MOV.W       L1652+2,R2 ; H'03FC
    00000058 362C                   ADD         R2,R6
    0000005A 3D6C                   ADD         R6,R13
      Monochrome   146            end = vram&3;
    0000005C E603                   MOV         #3,R6
    0000005E 2679                   AND         R7,R6
      Monochrome   147            for(i=0 ; i<end ; i++) pointer_byte[i] = 0;
    00000060 6743                   MOV         R4,R7
    00000062 4615                   CMP/PL      R6
    00000064 8F05                   BF/S        L1123
    00000066 65D3                   MOV         R13,R5
    00000068              L1124:                            
    00000068 2540                   MOV.B       R4,@R5
    0000006A 7701                   ADD         #1,R7
    0000006C 3763                   CMP/GE      R6,R7
    0000006E 8FFB                   BF/S        L1124
    00000070 7501                   ADD         #1,R5
    00000072              L1123:                            
      Monochrome   148    }
    00000072 4F26                   LDS.L       @R15+,PR
    00000074 000B                   RTS
    00000076 6DF6                   MOV.L       @R15+,R13
      Monochrome   149    #endif
      Monochrome   150    
      Monochrome   151    #ifdef ML_CLEAR_SCREEN
      Monochrome   152    void ML_clear_screen()
    00000078              _ML_clear_screen:                ; function: ML_clear_screen
                                                           ; frame size=12
    00000078 2FC6                   MOV.L       R12,@-R15
      Monochrome   153    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   154            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000;
      Monochrome   155            int i, j;
      Monochrome   156            for(i=0 ; i<64 ; i++)
    0000007A E704                   MOV         #4,R7
    0000007C D527                   MOV.L       L1652+8,R5 ; H'B4000000
    0000007E E600                   MOV         #0,R6
    00000080 D427                   MOV.L       L1652+12,R4; H'B4010000
    00000082 EC07                   MOV         #7,R12
    00000084 2FB6                   MOV.L       R11,@-R15
    00000086 6163                   MOV         R6,R1
    00000088 2FA6                   MOV.L       R10,@-R15
    0000008A EB10                   MOV         #16,R11
    0000008C EA40                   MOV         #64,R10
    0000008E              L1125:                            
      Monochrome   157            {
      Monochrome   158                    *LCD_register_selector = 4;
      Monochrome   159                    *LCD_data_register = i|192;
    0000008E E3C0                   MOV         #-64,R3
    00000090 2570                   MOV.B       R7,@R5
      Monochrome   160                    *LCD_register_selector = 4;
      Monochrome   161                    *LCD_data_register = 0;
      Monochrome   162                    *LCD_register_selector = 7;
      Monochrome   163                    for(j=0 ; j<16 ; j++) *LCD_data_register = 0;
    00000092 60B3                   MOV         R11,R0
    00000094 231B                   OR          R1,R3
    00000096 2430                   MOV.B       R3,@R4
    00000098 2570                   MOV.B       R7,@R5
    0000009A 2460                   MOV.B       R6,@R4
    0000009C 25C0                   MOV.B       R12,@R5
    0000009E              L1126:                            
    0000009E 4010                   DT          R0
    000000A0 8FFD                   BF/S        L1126
    000000A2 2460                   MOV.B       R6,@R4
    000000A4 7101                   ADD         #1,R1
    000000A6 31A3                   CMP/GE      R10,R1
    000000A8 8BF1                   BF          L1125
      Monochrome   164            }
      Monochrome   165    }
    000000AA 6AF6                   MOV.L       @R15+,R10
    000000AC 6BF6                   MOV.L       @R15+,R11
    000000AE 000B                   RTS
    000000B0 6CF6                   MOV.L       @R15+,R12
      Monochrome   166    #endif
      Monochrome   167    
      Monochrome   168    #ifdef ML_DISPLAY_VRAM
      Monochrome   169    void ML_display_vram()
    000000B2              _ML_display_vram:                ; function: ML_display_vram
                                                           ; frame size=20
    000000B2 2FC6                   MOV.L       R12,@-R15
    000000B4 2FB6                   MOV.L       R11,@-R15
    000000B6 2FA6                   MOV.L       R10,@-R15
    000000B8 2F96                   MOV.L       R9,@-R15
    000000BA 4F22                   STS.L       PR,@-R15
      Monochrome   170    {
      Monochrome   171            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000, *vram;
      Monochrome   172            int i, j;
      Monochrome   173            vram = ML_vram_adress();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000BC BFA0                   BSR         _ML_vram_adress
    000000BE 0009                   NOP
      Monochrome   174            for(i=0 ; i<64 ; i++)
    000000C0 D516                   MOV.L       L1652+8,R5 ; H'B4000000
    000000C2 6C03                   MOV         R0,R12
    000000C4 D416                   MOV.L       L1652+12,R4; H'B4010000
    000000C6 E940                   MOV         #64,R9
    000000C8 EA10                   MOV         #16,R10
    000000CA EB07                   MOV         #7,R11
    000000CC E100                   MOV         #0,R1
    000000CE E704                   MOV         #4,R7
    000000D0 6013                   MOV         R1,R0
    000000D2              L1127:                            
      Monochrome   175            {
      Monochrome   176                    *LCD_register_selector = 4;
      Monochrome   177                    *LCD_data_register = i|192;
    000000D2 E2C0                   MOV         #-64,R2
    000000D4 2570                   MOV.B       R7,@R5
      Monochrome   178                    *LCD_register_selector = 4;
      Monochrome   179                    *LCD_data_register = 0;
      Monochrome   180                    *LCD_register_selector = 7;
      Monochrome   181                    for(j=0 ; j<16 ; j++) *LCD_data_register = *vram++;
    000000D6 66A3                   MOV         R10,R6
    000000D8 220B                   OR          R0,R2
    000000DA 2420                   MOV.B       R2,@R4
    000000DC 2570                   MOV.B       R7,@R5
    000000DE 2410                   MOV.B       R1,@R4
    000000E0 25B0                   MOV.B       R11,@R5
    000000E2              L1128:                            
    000000E2 4610                   DT          R6
    000000E4 63C4                   MOV.B       @R12+,R3
    000000E6 8FFC                   BF/S        L1128
    000000E8 2430                   MOV.B       R3,@R4
    000000EA 7001                   ADD         #1,R0
    000000EC 3093                   CMP/GE      R9,R0
    000000EE 8BF0                   BF          L1127
      Monochrome   182            }
      Monochrome   183    }
    000000F0 4F26                   LDS.L       @R15+,PR
    000000F2 69F6                   MOV.L       @R15+,R9
    000000F4 6AF6                   MOV.L       @R15+,R10
    000000F6 6BF6                   MOV.L       @R15+,R11
    000000F8 000B                   RTS
    000000FA 6CF6                   MOV.L       @R15+,R12
      Monochrome   184    #endif
      Monochrome   185    
      Monochrome   186    #ifdef ML_SET_CONTRAST
      Monochrome   187    void ML_set_contrast(unsigned char contrast)
    000000FC              _ML_set_contrast:                ; function: ML_set_contrast
                                                           ; frame size=0
      Monochrome   188    {
      Monochrome   189            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000;
      Monochrome   190            *LCD_register_selector = 6;
    000000FC D207                   MOV.L       L1652+8,R2 ; H'B4000000
    000000FE E306                   MOV         #6,R3
      Monochrome   191            *LCD_data_register = contrast;
    00000100 D107                   MOV.L       L1652+12,R1; H'B4010000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000102 2230                   MOV.B       R3,@R2
      Monochrome   192    }
    00000104 000B                   RTS
    00000106 2140                   MOV.B       R4,@R1
      Monochrome   193    #endif
      Monochrome   194    
      Monochrome   195    #ifdef ML_GET_CONTRAST
      Monochrome   196    unsigned char ML_get_contrast()
    00000108              _ML_get_contrast:                ; function: ML_get_contrast
                                                           ; frame size=0
      Monochrome   197    {
      Monochrome   198            char *LCD_register_selector = (char*)0xB4000000, *LCD_data_register = (char*)0xB4010000;
      Monochrome   199            *LCD_register_selector = 6;
    00000108 D204                   MOV.L       L1652+8,R2 ; H'B4000000
    0000010A E306                   MOV         #6,R3
      Monochrome   200            return *LCD_data_register;
    0000010C D104                   MOV.L       L1652+12,R1; H'B4010000
    0000010E 2230                   MOV.B       R3,@R2
      Monochrome   201    }
    00000110 000B                   RTS
    00000112 6010                   MOV.B       @R1,R0
    00000114              L1652:                            
    00000114 0135                   .DATA.W     H'0135
    00000116 03FC                   .DATA.W     H'03FC
    00000118 <00000000>             .DATA.L     __$SysCall
    0000011C B4000000               .DATA.L     H'B4000000
    00000120 B4010000               .DATA.L     H'B4010000
      Monochrome   202    #endif
      Monochrome   203    
      Monochrome   204    #ifdef ML_PIXEL
      Monochrome   205    void ML_pixel(int x, int y, ML_Color color)
    00000124              _ML_pixel:                       ; function: ML_pixel
                                                           ; frame size=16
    00000124 2FE6                   MOV.L       R14,@-R15
    00000126 6E43                   MOV         R4,R14
    00000128 2FD6                   MOV.L       R13,@-R15
    0000012A 6D53                   MOV         R5,R13
    0000012C 4F22                   STS.L       PR,@-R15
    0000012E 7FFC                   ADD         #-4,R15
      Monochrome   206    {
      Monochrome   207            char* vram = ML_vram_adress();
    00000130 BF66                   BSR         _ML_vram_adress
    00000132 2F62                   MOV.L       R6,@R15
      Monochrome   208            if(x&~127 || y&~63) return;
    00000134 E280                   MOV         #-128,R2
    00000136 22E8                   TST         R14,R2
    00000138 8F35                   BF/S        L1132
    0000013A 6603                   MOV         R0,R6
    0000013C E1C0                   MOV         #-64,R1
    0000013E 21D8                   TST         R13,R1
    00000140 8B31                   BF          L1132
    00000142 64D3                   MOV         R13,R4
    00000144 957C                   MOV.W       L1653,R5   ; H'0080
    00000146 63E3                   MOV         R14,R3
    00000148 60F2                   MOV.L       @R15,R0
    0000014A 4408                   SHLL2       R4
    0000014C 4408                   SHLL2       R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000014E 4321                   SHAR        R3
    00000150 4321                   SHAR        R3
    00000152 4321                   SHAR        R3
    00000154 343C                   ADD         R3,R4
    00000156 346C                   ADD         R6,R4
    00000158 E307                   MOV         #7,R3
    0000015A 23E9                   AND         R14,R3
    0000015C 633B                   NEG         R3,R3
    0000015E 8801                   CMP/EQ      #1,R0
    00000160 8D08                   BT/S        L1102
    00000162 453C                   SHAD        R3,R5
    00000164 8800                   CMP/EQ      #0,R0
    00000166 8908                   BT          L1103
    00000168 8802                   CMP/EQ      #2,R0
    0000016A 890A                   BT          L1104
    0000016C 8803                   CMP/EQ      #3,R0
    0000016E 890C                   BT          L1105
    00000170 A019                   BRA         L1132
    00000172 0009                   NOP
    00000174              L1102:                           ; case label 
      Monochrome   209            switch(color)
      Monochrome   210            {
      Monochrome   211                    case ML_BLACK:
      Monochrome   212                            vram[(y<<4)+(x>>3)] |= 128>>(x&7);
    00000174 6340                   MOV.B       @R4,R3
      Monochrome   213                            break;
    00000176 A011                   BRA         L1650
    00000178 235B                   OR          R5,R3
    0000017A              L1103:                           ; case label 
      Monochrome   214                    case ML_WHITE:
      Monochrome   215                            vram[(y<<4)+(x>>3)] &= ~(128>>(x&7));
    0000017A 6557                   NOT         R5,R5
    0000017C 6340                   MOV.B       @R4,R3
      Monochrome   216                            break;
    0000017E A00D                   BRA         L1650
    00000180 2359                   AND         R5,R3
    00000182              L1104:                           ; case label 
      Monochrome   217                    case ML_XOR:
      Monochrome   218                            vram[(y<<4)+(x>>3)] ^= 128>>(x&7);
    00000182 6140                   MOV.B       @R4,R1
    00000184 215A                   XOR         R5,R1
      Monochrome   219                            break;
    00000186 A00E                   BRA         L1132
    00000188 2410                   MOV.B       R1,@R4
    0000018A              L1105:                           ; case label 
      Monochrome   220                    case ML_CHECKER:
      Monochrome   221                            if(y&1^x&1) vram[(y<<4)+(x>>3)] &= ~(128>>(x&7));
    0000018A E601                   MOV         #1,R6
    0000018C 2D69                   AND         R6,R13
    0000018E 2E69                   AND         R6,R14
    00000190 2DEA                   XOR         R14,R13
    00000192 2DD8                   TST         R13,R13
    00000194 8904                   BT          L1134
    00000196 6557                   NOT         R5,R5
    00000198 6340                   MOV.B       @R4,R3
    0000019A 2359                   AND         R5,R3
    0000019C              L1650:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000019C A003                   BRA         L1132
    0000019E 2430                   MOV.B       R3,@R4
    000001A0              L1134:                            
      Monochrome   222                            else vram[(y<<4)+(x>>3)] |= 128>>(x&7);
    000001A0 6140                   MOV.B       @R4,R1
    000001A2 215B                   OR          R5,R1
    000001A4 2410                   MOV.B       R1,@R4
      Monochrome   223                            break;
      Monochrome   224            }
      Monochrome   225    }
    000001A6              L1132:                            
    000001A6 7F04                   ADD         #4,R15
    000001A8 4F26                   LDS.L       @R15+,PR
    000001AA 6DF6                   MOV.L       @R15+,R13
    000001AC 000B                   RTS
    000001AE 6EF6                   MOV.L       @R15+,R14
      Monochrome   226    #endif
      Monochrome   227    
      Monochrome   228    #ifdef ML_POINT
      Monochrome   229    void ML_point(int x, int y, int width, ML_Color color)
    000001B0              _ML_point:                       ; function: ML_point
                                                           ; frame size=36
    000001B0 2FE6                   MOV.L       R14,@-R15
      Monochrome   230    {
      Monochrome   231            if(width < 1) return;
    000001B2 E301                   MOV         #1,R3
    000001B4 2FD6                   MOV.L       R13,@-R15
    000001B6 3633                   CMP/GE      R3,R6
    000001B8 2FC6                   MOV.L       R12,@-R15
    000001BA 6D53                   MOV         R5,R13
    000001BC 2FB6                   MOV.L       R11,@-R15
    000001BE 6C43                   MOV         R4,R12
    000001C0 4F22                   STS.L       PR,@-R15
    000001C2 7FFC                   ADD         #-4,R15
    000001C4 8F24                   BF/S        L1137
    000001C6 2F72                   MOV.L       R7,@R15
      Monochrome   232            if(width == 1) ML_pixel(x, y, color);
    000001C8 6063                   MOV         R6,R0
    000001CA 8801                   CMP/EQ      #1,R0
    000001CC 8B09                   BF          L1138
    000001CE 65D3                   MOV         R13,R5
    000001D0 66F2                   MOV.L       @R15,R6
    000001D2 64C3                   MOV         R12,R4
    000001D4 7F04                   ADD         #4,R15
    000001D6 4F26                   LDS.L       @R15+,PR
    000001D8 6BF6                   MOV.L       @R15+,R11
    000001DA 6CF6                   MOV.L       @R15+,R12
    000001DC 6DF6                   MOV.L       @R15+,R13
    000001DE AFA1                   BRA         _ML_pixel
    000001E0 6EF6                   MOV.L       @R15+,R14
    000001E2              L1138:                            
      Monochrome   233            else
      Monochrome   234            {
      Monochrome   235                    int padding, pair;
      Monochrome   236                    padding = width>>1;
    000001E2 6E63                   MOV         R6,R14
      Monochrome   237                    pair = !(width&1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   238                    ML_rectangle(x-padding+pair, y-padding+pair, x+padding, y+padding, 0, 0, color);
    000001E4 63F2                   MOV.L       @R15,R3
    000001E6 E200                   MOV         #0,R2
    000001E8 2F36                   MOV.L       R3,@-R15
    000001EA 67D3                   MOV         R13,R7
    000001EC 2F26                   MOV.L       R2,@-R15
    000001EE 65D3                   MOV         R13,R5
    000001F0 2F26                   MOV.L       R2,@-R15
    000001F2 64C3                   MOV         R12,R4
    000001F4 4E21                   SHAR        R14
    000001F6 EB01                   MOV         #1,R11
    000001F8 2B69                   AND         R6,R11
    000001FA 2BB8                   TST         R11,R11
    000001FC 0B29                   MOVT        R11
    000001FE 37EC                   ADD         R14,R7
    00000200 66C3                   MOV         R12,R6
    00000202 36EC                   ADD         R14,R6
    00000204 35E8                   SUB         R14,R5
    00000206 35BC                   ADD         R11,R5
    00000208 34E8                   SUB         R14,R4
    0000020A B293                   BSR         _ML_rectangle
    0000020C 34BC                   ADD         R11,R4
    0000020E 7F0C                   ADD         #12,R15
      Monochrome   239            }
      Monochrome   240    }
    00000210              L1137:                            
    00000210 7F04                   ADD         #4,R15
    00000212 4F26                   LDS.L       @R15+,PR
    00000214 6BF6                   MOV.L       @R15+,R11
    00000216 6CF6                   MOV.L       @R15+,R12
    00000218 6DF6                   MOV.L       @R15+,R13
    0000021A 000B                   RTS
    0000021C 6EF6                   MOV.L       @R15+,R14
      Monochrome   241    #endif
      Monochrome   242    
      Monochrome   243    #ifdef ML_PIXEL_TEST
      Monochrome   244    ML_Color ML_pixel_test(int x, int y)
    0000021E              _ML_pixel_test:                  ; function: ML_pixel_test
                                                           ; frame size=12
      Monochrome   245    {
      Monochrome   246            char *vram, byte;
      Monochrome   247            if(x&~127 || y&~63) return ML_TRANSPARENT;
    0000021E E380                   MOV         #-128,R3
    00000220 2FE6                   MOV.L       R14,@-R15
    00000222 6E43                   MOV         R4,R14
    00000224 4F22                   STS.L       PR,@-R15
    00000226 23E8                   TST         R14,R3
    00000228 7FFC                   ADD         #-4,R15
    0000022A 8F04                   BF/S        L1142
    0000022C 2F52                   MOV.L       R5,@R15
    0000022E E3C0                   MOV         #-64,R3
    00000230 62F2                   MOV.L       @R15,R2
    00000232 2238                   TST         R3,R2
    00000234 8905                   BT          L1141
    00000236              L1142:                            
    00000236 E0FF                   MOV         #-1,R0
    00000238 7F04                   ADD         #4,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000023A 4F26                   LDS.L       @R15+,PR
    0000023C 000B                   RTS
    0000023E 6EF6                   MOV.L       @R15+,R14
    00000240              L1653:                            
    00000240 0080                   .DATA.W     H'0080
    00000242              L1141:                            
      Monochrome   248            vram = ML_vram_adress();
    00000242 BEDD                   BSR         _ML_vram_adress
    00000244 0009                   NOP
    00000246 6403                   MOV         R0,R4
      Monochrome   249            byte = 1<<(7-(x&7));
      Monochrome   250            return (vram[(y<<4)+(x>>3)] & byte ? ML_BLACK : ML_WHITE);
    00000248 60F2                   MOV.L       @R15,R0
    0000024A E507                   MOV         #7,R5
    0000024C E601                   MOV         #1,R6
    0000024E 62E3                   MOV         R14,R2
    00000250 2259                   AND         R5,R2
    00000252 6353                   MOV         R5,R3
    00000254 3328                   SUB         R2,R3
    00000256 6563                   MOV         R6,R5
    00000258 453C                   SHAD        R3,R5
    0000025A 4008                   SHLL2       R0
    0000025C 4008                   SHLL2       R0
    0000025E 4E21                   SHAR        R14
    00000260 4E21                   SHAR        R14
    00000262 4E21                   SHAR        R14
    00000264 30EC                   ADD         R14,R0
    00000266 655E                   EXTS.B      R5,R5
    00000268 004C                   MOV.B       @(R0,R4),R0
    0000026A 2058                   TST         R5,R0
    0000026C 8904                   BT          L1144
    0000026E 6063                   MOV         R6,R0
    00000270 7F04                   ADD         #4,R15
    00000272 4F26                   LDS.L       @R15+,PR
    00000274 000B                   RTS
    00000276 6EF6                   MOV.L       @R15+,R14
    00000278              L1144:                            
    00000278 E000                   MOV         #0,R0
      Monochrome   251    
      Monochrome   252    }
    0000027A              L1143:                            
    0000027A 7F04                   ADD         #4,R15
    0000027C 4F26                   LDS.L       @R15+,PR
    0000027E 000B                   RTS
    00000280 6EF6                   MOV.L       @R15+,R14
      Monochrome   253    #endif
      Monochrome   254    
      Monochrome   255    #ifdef ML_LINE
      Monochrome   256    void ML_line(int x1, int y1, int x2, int y2, ML_Color color)
    00000282              _ML_line:                        ; function: ML_line
                                                           ; frame size=40
    00000282 2FE6                   MOV.L       R14,@-R15
    00000284 2FD6                   MOV.L       R13,@-R15
      Monochrome   257    {
      Monochrome   258            int i, x, y, dx, dy, sx, sy, cumul;
      Monochrome   259            x = x1;
      Monochrome   260            y = y1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   261            dx = x2 - x1;
    00000286 6E63                   MOV         R6,R14
    00000288 2FC6                   MOV.L       R12,@-R15
    0000028A 3E48                   SUB         R4,R14
    0000028C 2FB6                   MOV.L       R11,@-R15
    0000028E 6C53                   MOV         R5,R12
    00000290 2FA6                   MOV.L       R10,@-R15
    00000292 6B43                   MOV         R4,R11
    00000294 2F96                   MOV.L       R9,@-R15
      Monochrome   262            dy = y2 - y1;
    00000296 6A73                   MOV         R7,R10
    00000298 2F86                   MOV.L       R8,@-R15
      Monochrome   263            sx = sgn(dx);
    0000029A 4E11                   CMP/PZ      R14
    0000029C 4F22                   STS.L       PR,@-R15
    0000029E 7FF8                   ADD         #-8,R15
    000002A0 59FA                   MOV.L       @(40,R15),R9
    000002A2 8D02                   BT/S        L1146
    000002A4 3A58                   SUB         R5,R10
    000002A6 A001                   BRA         L1147
    000002A8 E8FF                   MOV         #-1,R8
    000002AA              L1146:                            
    000002AA E801                   MOV         #1,R8
    000002AC              L1147:                            
      Monochrome   264            sy = sgn(dy);
    000002AC 4A11                   CMP/PZ      R10
    000002AE 8901                   BT          L1148
    000002B0 A001                   BRA         L1149
    000002B2 E2FF                   MOV         #-1,R2
    000002B4              L1148:                            
    000002B4 E201                   MOV         #1,R2
    000002B6              L1149:                            
    000002B6 1F21                   MOV.L       R2,@(4,R15)
      Monochrome   265            dx = abs(dx);
    000002B8 D326                   MOV.L       L1654+2,R3 ; _abs
    000002BA 430B                   JSR         @R3
    000002BC 64E3                   MOV         R14,R4
    000002BE 6D03                   MOV         R0,R13
      Monochrome   266            dy = abs(dy);
    000002C0 D224                   MOV.L       L1654+2,R2 ; _abs
    000002C2 420B                   JSR         @R2
    000002C4 64A3                   MOV         R10,R4
    000002C6 6E03                   MOV         R0,R14
      Monochrome   267            ML_pixel(x, y, color);
    000002C8 6693                   MOV         R9,R6
    000002CA 65C3                   MOV         R12,R5
    000002CC BF2A                   BSR         _ML_pixel
    000002CE 64B3                   MOV         R11,R4
      Monochrome   268            if(dx > dy)
    000002D0 3DE7                   CMP/GT      R14,R13
    000002D2 8F1B                   BF/S        L1150
    000002D4 E401                   MOV         #1,R4
      Monochrome   269            {
      Monochrome   270                    cumul = dx / 2;
    000002D6 6AD3                   MOV         R13,R10
    000002D8 E300                   MOV         #0,R3
    000002DA 33A7                   CMP/GT      R10,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002DC 3A3E                   ADDC        R3,R10
    000002DE 4A21                   SHAR        R10
      Monochrome   271                    for(i=1 ; i<dx ; i++)
    000002E0 6343                   MOV         R4,R3
    000002E2 33D3                   CMP/GE      R13,R3
    000002E4 8D2B                   BT/S        L1154
    000002E6 2F42                   MOV.L       R4,@R15
    000002E8              L1152:                            
      Monochrome   272                    {
      Monochrome   273                            x += sx;
      Monochrome   274                            cumul += dy;
    000002E8 3AEC                   ADD         R14,R10
      Monochrome   275                            if(cumul > dx)
    000002EA 3AD7                   CMP/GT      R13,R10
    000002EC 8F03                   BF/S        L1153
    000002EE 3B8C                   ADD         R8,R11
      Monochrome   276                            {
      Monochrome   277                                    cumul -= dx;
      Monochrome   278                                    y += sy;
    000002F0 52F1                   MOV.L       @(4,R15),R2
    000002F2 3AD8                   SUB         R13,R10
    000002F4 3C2C                   ADD         R2,R12
    000002F6              L1153:                            
      Monochrome   279                            }
      Monochrome   280                            ML_pixel(x, y, color);
    000002F6 6693                   MOV         R9,R6
    000002F8 65C3                   MOV         R12,R5
    000002FA BF13                   BSR         _ML_pixel
    000002FC 64B3                   MOV         R11,R4
    000002FE 62F2                   MOV.L       @R15,R2
    00000300 7201                   ADD         #1,R2
    00000302 32D3                   CMP/GE      R13,R2
    00000304 8FF0                   BF/S        L1152
    00000306 2F22                   MOV.L       R2,@R15
    00000308 A019                   BRA         L1154
    0000030A 0009                   NOP
    0000030C              L1150:                            
      Monochrome   281                    }
      Monochrome   282            }
      Monochrome   283            else
      Monochrome   284            {
      Monochrome   285                    cumul = dy / 2;
    0000030C 6AE3                   MOV         R14,R10
    0000030E E300                   MOV         #0,R3
    00000310 33A7                   CMP/GT      R10,R3
    00000312 3A3E                   ADDC        R3,R10
    00000314 4A21                   SHAR        R10
      Monochrome   286                    for(i=1 ; i<dy ; i++)
    00000316 6343                   MOV         R4,R3
    00000318 33E3                   CMP/GE      R14,R3
    0000031A 8D10                   BT/S        L1154
    0000031C 2F42                   MOV.L       R4,@R15
    0000031E              L1156:                            
      Monochrome   287                    {
      Monochrome   288                            y += sy;
      Monochrome   289                            cumul += dx;
    0000031E 3ADC                   ADD         R13,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000320 51F1                   MOV.L       @(4,R15),R1
      Monochrome   290                            if(cumul > dy)
    00000322 3AE7                   CMP/GT      R14,R10
    00000324 8F02                   BF/S        L1157
    00000326 3C1C                   ADD         R1,R12
      Monochrome   291                            {
      Monochrome   292                                    cumul -= dy;
    00000328 3AE8                   SUB         R14,R10
      Monochrome   293                                    x += sx;
    0000032A 3B8C                   ADD         R8,R11
    0000032C              L1157:                            
      Monochrome   294                            }
      Monochrome   295                            ML_pixel(x, y, color);
    0000032C 6693                   MOV         R9,R6
    0000032E 65C3                   MOV         R12,R5
    00000330 BEF8                   BSR         _ML_pixel
    00000332 64B3                   MOV         R11,R4
    00000334 63F2                   MOV.L       @R15,R3
    00000336 7301                   ADD         #1,R3
    00000338 33E3                   CMP/GE      R14,R3
    0000033A 8FF0                   BF/S        L1156
    0000033C 2F32                   MOV.L       R3,@R15
    0000033E              L1154:                            
      Monochrome   296                    }
      Monochrome   297            }
      Monochrome   298    }
    0000033E 7F08                   ADD         #8,R15
    00000340 4F26                   LDS.L       @R15+,PR
    00000342 68F6                   MOV.L       @R15+,R8
    00000344 69F6                   MOV.L       @R15+,R9
    00000346 6AF6                   MOV.L       @R15+,R10
    00000348 6BF6                   MOV.L       @R15+,R11
    0000034A 6CF6                   MOV.L       @R15+,R12
    0000034C 6DF6                   MOV.L       @R15+,R13
    0000034E 000B                   RTS
    00000350 6EF6                   MOV.L       @R15+,R14
    00000352              L1654:                            
    00000352 0000                   .DATA.W     0
    00000354 <00000000>             .DATA.L     _abs
      Monochrome   299    #endif
      Monochrome   300    
      Monochrome   301    #ifdef ML_HORIZONTAL_LINE
      Monochrome   302    void ML_horizontal_line(int y, int x1, int x2, ML_Color color)
    00000358              _ML_horizontal_line:             ; function: ML_horizontal_line
                                                           ; frame size=44
    00000358 2FE6                   MOV.L       R14,@-R15
    0000035A 2FD6                   MOV.L       R13,@-R15
    0000035C 2FC6                   MOV.L       R12,@-R15
    0000035E 6C53                   MOV         R5,R12
    00000360 2FB6                   MOV.L       R11,@-R15
    00000362 6B63                   MOV         R6,R11
    00000364 2FA6                   MOV.L       R10,@-R15
    00000366 2F96                   MOV.L       R9,@-R15
    00000368 2F86                   MOV.L       R8,@-R15
    0000036A 4F22                   STS.L       PR,@-R15
    0000036C 7FF4                   ADD         #-12,R15
    0000036E 2F42                   MOV.L       R4,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   303    {
      Monochrome   304        int i;
      Monochrome   305        char checker;
      Monochrome   306        char* vram = ML_vram_adress();
    00000370 BE46                   BSR         _ML_vram_adress
    00000372 1F72                   MOV.L       R7,@(8,R15)
      Monochrome   307        if(y&~63 || (x1<0 && x2<0) || (x1>127 && x2>127)) return;
    00000374 62F2                   MOV.L       @R15,R2
    00000376 6603                   MOV         R0,R6
    00000378 E3C0                   MOV         #-64,R3
    0000037A 2238                   TST         R3,R2
    0000037C 8901                   BT          L1655
    0000037E A134                   BRA         L1161
    00000380 0009                   NOP
    00000382              L1655:                            
    00000382 4C11                   CMP/PZ      R12
    00000384 8903                   BT          L1160
    00000386 4B11                   CMP/PZ      R11
    00000388 8901                   BT          L1656
    0000038A A12E                   BRA         L1161
    0000038C 0009                   NOP
    0000038E              L1656:                            
    0000038E              L1160:                            
    0000038E E37F                   MOV         #127,R3
    00000390 3C37                   CMP/GT      R3,R12
    00000392 8B03                   BF          L1158
    00000394 3B37                   CMP/GT      R3,R11
    00000396 8B01                   BF          L1657
    00000398 A127                   BRA         L1161
    0000039A 0009                   NOP
    0000039C              L1657:                            
    0000039C              L1158:                            
      Monochrome   308        if(x1 > x2)
    0000039C 3CB7                   CMP/GT      R11,R12
    0000039E 8F03                   BF/S        L1162
      Monochrome   309        {
      Monochrome   310            i = x1;
      Monochrome   311            x1 = x2;
      Monochrome   312            x2 = i;
      Monochrome   313        }
      Monochrome   314        if(x1 < 0) x1 = 0;
    000003A0 E800                   MOV         #0,R8
    000003A2 64C3                   MOV         R12,R4
    000003A4 6CB3                   MOV         R11,R12
    000003A6 6B43                   MOV         R4,R11
    000003A8              L1162:                            
    000003A8 4C11                   CMP/PZ      R12
    000003AA 8D01                   BT/S        L1163
      Monochrome   315        if(x2 > 127) x2 = 127;
    000003AC E47F                   MOV         #127,R4
    000003AE 6C83                   MOV         R8,R12
    000003B0              L1163:                            
    000003B0 3B47                   CMP/GT      R4,R11
    000003B2 8F01                   BF/S        L1164
    000003B4 E707                   MOV         #7,R7
    000003B6 6B43                   MOV         R4,R11
    000003B8              L1164:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003B8 9436                   MOV.W       L1658,R4   ; H'00FF
    000003BA 65C3                   MOV         R12,R5
    000003BC 6DF2                   MOV.L       @R15,R13
    000003BE 69C3                   MOV         R12,R9
    000003C0 4521                   SHAR        R5
    000003C2 4521                   SHAR        R5
    000003C4 4521                   SHAR        R5
    000003C6 6EB3                   MOV         R11,R14
    000003C8 4E21                   SHAR        R14
    000003CA 4E21                   SHAR        R14
    000003CC 4E21                   SHAR        R14
    000003CE 4D08                   SHLL2       R13
    000003D0 4D08                   SHLL2       R13
    000003D2 2979                   AND         R7,R9
    000003D4 6AB3                   MOV         R11,R10
    000003D6 60C3                   MOV         R12,R0
    000003D8 4011                   CMP/PZ      R0
    000003DA 8F02                   BF/S        L1165
    000003DC 2A79                   AND         R7,R10
    000003DE A005                   BRA         L1166
    000003E0 C907                   AND         #7,R0
    000003E2              L1165:                            
    000003E2 6007                   NOT         R0,R0
    000003E4 7001                   ADD         #1,R0
    000003E6 C907                   AND         #7,R0
    000003E8 6007                   NOT         R0,R0
    000003EA 7001                   ADD         #1,R0
    000003EC              L1166:                            
    000003EC 6303                   MOV         R0,R3
    000003EE 60B3                   MOV         R11,R0
    000003F0 4011                   CMP/PZ      R0
    000003F2 8B01                   BF          L1167
    000003F4 A005                   BRA         L1168
    000003F6 C907                   AND         #7,R0
    000003F8              L1167:                            
    000003F8 6007                   NOT         R0,R0
    000003FA 7001                   ADD         #1,R0
    000003FC C907                   AND         #7,R0
    000003FE 6007                   NOT         R0,R0
    00000400 7001                   ADD         #1,R0
    00000402              L1168:                            
    00000402 3308                   SUB         R0,R3
    00000404 7307                   ADD         #7,R3
    00000406 633B                   NEG         R3,R3
    00000408 6043                   MOV         R4,R0
    0000040A 403C                   SHAD        R3,R0
    0000040C 1F01                   MOV.L       R0,@(4,R15)
    0000040E 50F2                   MOV.L       @(8,R15),R0
    00000410 8801                   CMP/EQ      #1,R0
    00000412 890A                   BT          L1106
    00000414 8800                   CMP/EQ      #0,R0
    00000416 8932                   BT          L1107
    00000418 8802                   CMP/EQ      #2,R0
    0000041A 8963                   BT          L1108
    0000041C 8803                   CMP/EQ      #3,R0
    0000041E 8B01                   BF          L1659
    00000420 A08F                   BRA         L1109




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000422 0009                   NOP
    00000424              L1659:                            
    00000424 A0E1                   BRA         L1161
    00000426 0009                   NOP
    00000428              L1658:                            
    00000428 00FF                   .DATA.W     H'00FF
    0000042A              L1106:                           ; case label 
      Monochrome   316        switch(color)
      Monochrome   317        {
      Monochrome   318            case ML_BLACK:
      Monochrome   319                            if(x1>>3 != x2>>3)
    0000042A 35E0                   CMP/EQ      R14,R5
    0000042C 891E                   BT          L1170
      Monochrome   320                            {
      Monochrome   321                                    vram[(y<<4)+(x1>>3)] |= 255 >> (x1&7);
    0000042E 60D3                   MOV         R13,R0
    00000430 305C                   ADD         R5,R0
    00000432 639B                   NEG         R9,R3
    00000434 016C                   MOV.B       @(R0,R6),R1
      Monochrome   322                                    vram[(y<<4)+(x2>>3)] |= 255 << 7-(x2&7);
    00000436 37A8                   SUB         R10,R7
    00000438 6243                   MOV         R4,R2
    0000043A 423C                   SHAD        R3,R2
    0000043C 212B                   OR          R2,R1
    0000043E 447C                   SHAD        R7,R4
    00000440 0614                   MOV.B       R1,@(R0,R6)
      Monochrome   323                                    for(i=(x1>>3)+1 ; i<x2>>3 ; i++)
    00000442 7501                   ADD         #1,R5
    00000444 60E3                   MOV         R14,R0
    00000446 30DC                   ADD         R13,R0
    00000448 036C                   MOV.B       @(R0,R6),R3
    0000044A 35E3                   CMP/GE      R14,R5
    0000044C 234B                   OR          R4,R3
    0000044E 64D3                   MOV         R13,R4
    00000450 0634                   MOV.B       R3,@(R0,R6)
    00000452 345C                   ADD         R5,R4
    00000454 346C                   ADD         R6,R4
    00000456 8F02                   BF/S        L1660
    00000458 E6FF                   MOV         #-1,R6
    0000045A A0C6                   BRA         L1161
    0000045C 0009                   NOP
    0000045E              L1660:                            
    0000045E              L1172:                            
    0000045E 7501                   ADD         #1,R5
      Monochrome   324                                            vram[(y<<4) + i] = 255;
    00000460 2460                   MOV.B       R6,@R4
    00000462 35E3                   CMP/GE      R14,R5
    00000464 8FFB                   BF/S        L1172
    00000466 7401                   ADD         #1,R4
    00000468 A0BF                   BRA         L1161
    0000046A 0009                   NOP
    0000046C              L1170:                            
      Monochrome   325                            }
      Monochrome   326                            else vram[(y<<4)+(x1>>3)] |= (255>>(x1%8 + 7-x2%8))<<(7-(x2&7));
    0000046C 53F1                   MOV.L       @(4,R15),R3
    0000046E 60D3                   MOV         R13,R0
    00000470 305C                   ADD         R5,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000472 37A8                   SUB         R10,R7
    00000474 026C                   MOV.B       @(R0,R6),R2
    00000476 437C                   SHAD        R7,R3
    00000478 223B                   OR          R3,R2
      Monochrome   327                            break;
    0000047A A0B6                   BRA         L1161
    0000047C 0624                   MOV.B       R2,@(R0,R6)
    0000047E              L1107:                           ; case label 
      Monochrome   328                    case ML_WHITE:
      Monochrome   329                            if(x1>>3 != x2>>3)
    0000047E 35E0                   CMP/EQ      R14,R5
    00000480 8920                   BT          L1174
      Monochrome   330                            {
      Monochrome   331                                    vram[(y<<4)+(x1>>3)] &= 255 << 8-(x1&7);
    00000482 60D3                   MOV         R13,R0
    00000484 305C                   ADD         R5,R0
    00000486 E308                   MOV         #8,R3
    00000488 3398                   SUB         R9,R3
    0000048A 6243                   MOV         R4,R2
    0000048C 423C                   SHAD        R3,R2
      Monochrome   332                                    vram[(y<<4)+(x2>>3)] &= 255 >> 1+(x2&7);
      Monochrome   333                                    for(i=(x1>>3)+1 ; i<x2>>3 ; i++)
    0000048E 7501                   ADD         #1,R5
    00000490 036C                   MOV.B       @(R0,R6),R3
    00000492 35E3                   CMP/GE      R14,R5
    00000494 2329                   AND         R2,R3
    00000496 0634                   MOV.B       R3,@(R0,R6)
    00000498 60E3                   MOV         R14,R0
    0000049A 30DC                   ADD         R13,R0
    0000049C 026C                   MOV.B       @(R0,R6),R2
    0000049E 63A3                   MOV         R10,R3
    000004A0 7301                   ADD         #1,R3
    000004A2 633B                   NEG         R3,R3
    000004A4 443C                   SHAD        R3,R4
    000004A6 2249                   AND         R4,R2
    000004A8 0624                   MOV.B       R2,@(R0,R6)
    000004AA 64D3                   MOV         R13,R4
    000004AC 345C                   ADD         R5,R4
    000004AE 8F02                   BF/S        L1661
    000004B0 346C                   ADD         R6,R4
    000004B2 A09A                   BRA         L1161
    000004B4 0009                   NOP
    000004B6              L1661:                            
    000004B6              L1176:                            
    000004B6 7501                   ADD         #1,R5
      Monochrome   334                                            vram[(y<<4) + i] = 0;
    000004B8 2480                   MOV.B       R8,@R4
    000004BA 35E3                   CMP/GE      R14,R5
    000004BC 8FFB                   BF/S        L1176
    000004BE 7401                   ADD         #1,R4
    000004C0 A093                   BRA         L1161
    000004C2 0009                   NOP
    000004C4              L1174:                            
      Monochrome   335                            }
      Monochrome   336                            else vram[(y<<4)+(x1>>3)] &= (255<<8-(x1&7)) | (255>>1+(x2&7));
    000004C4 60D3                   MOV         R13,R0
    000004C6 305C                   ADD         R5,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C8 E308                   MOV         #8,R3
    000004CA 3398                   SUB         R9,R3
    000004CC 6243                   MOV         R4,R2
    000004CE 423C                   SHAD        R3,R2
    000004D0 63A3                   MOV         R10,R3
    000004D2 7301                   ADD         #1,R3
    000004D4 633B                   NEG         R3,R3
    000004D6 6143                   MOV         R4,R1
    000004D8 413C                   SHAD        R3,R1
    000004DA 221B                   OR          R1,R2
    000004DC 036C                   MOV.B       @(R0,R6),R3
    000004DE 2329                   AND         R2,R3
      Monochrome   337                            break;
    000004E0 A083                   BRA         L1161
    000004E2 0634                   MOV.B       R3,@(R0,R6)
    000004E4              L1108:                           ; case label 
      Monochrome   338                    case ML_XOR:
      Monochrome   339                            if(x1>>3 != x2>>3)
    000004E4 35E0                   CMP/EQ      R14,R5
    000004E6 891E                   BT          L1178
      Monochrome   340                            {
      Monochrome   341                                    vram[(y<<4)+(x1>>3)] ^= 255 >> (x1&7);
    000004E8 60D3                   MOV         R13,R0
    000004EA 305C                   ADD         R5,R0
    000004EC 016C                   MOV.B       @(R0,R6),R1
      Monochrome   342                                    vram[(y<<4)+(x2>>3)] ^= 255 << 7-(x2&7);
    000004EE 37A8                   SUB         R10,R7
    000004F0 639B                   NEG         R9,R3
    000004F2 6243                   MOV         R4,R2
    000004F4 423C                   SHAD        R3,R2
    000004F6 212A                   XOR         R2,R1
    000004F8 0614                   MOV.B       R1,@(R0,R6)
    000004FA 6343                   MOV         R4,R3
    000004FC 60E3                   MOV         R14,R0
    000004FE 30DC                   ADD         R13,R0
    00000500 026C                   MOV.B       @(R0,R6),R2
      Monochrome   343                                    for(i=(x1>>3)+1 ; i<(x2>>3) ; i++)
    00000502 7501                   ADD         #1,R5
    00000504 437C                   SHAD        R7,R3
    00000506 223A                   XOR         R3,R2
    00000508 0624                   MOV.B       R2,@(R0,R6)
    0000050A 63D3                   MOV         R13,R3
    0000050C 335C                   ADD         R5,R3
    0000050E 35E3                   CMP/GE      R14,R5
    00000510 8D6B                   BT/S        L1161
    00000512 363C                   ADD         R3,R6
    00000514              L1180:                            
      Monochrome   344                                            vram[(y<<4) + i] ^= 255;
    00000514 6360                   MOV.B       @R6,R3
    00000516 7501                   ADD         #1,R5
    00000518 234A                   XOR         R4,R3
    0000051A 35E3                   CMP/GE      R14,R5
    0000051C 2630                   MOV.B       R3,@R6
    0000051E 8FF9                   BF/S        L1180
    00000520 7601                   ADD         #1,R6
    00000522 A062                   BRA         L1161
    00000524 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000526              L1178:                            
      Monochrome   345                            }
      Monochrome   346                            else vram[(y<<4)+(x1>>3)] ^= (255>>((x1&7) + 7-(x2&7)))<<(7-(x2&7));
    00000526 60D3                   MOV         R13,R0
    00000528 305C                   ADD         R5,R0
    0000052A 6393                   MOV         R9,R3
    0000052C 33A8                   SUB         R10,R3
    0000052E 7307                   ADD         #7,R3
    00000530 633B                   NEG         R3,R3
    00000532 443C                   SHAD        R3,R4
    00000534 036C                   MOV.B       @(R0,R6),R3
    00000536 E207                   MOV         #7,R2
    00000538 32A8                   SUB         R10,R2
    0000053A 442C                   SHAD        R2,R4
    0000053C 234A                   XOR         R4,R3
      Monochrome   347                            break;
    0000053E A054                   BRA         L1161
    00000540 0634                   MOV.B       R3,@(R0,R6)
    00000542              L1109:                           ; case label 
      Monochrome   348                    case ML_CHECKER:
      Monochrome   349                            checker = (y&1 ? 85 : 170);
    00000542 60F2                   MOV.L       @R15,R0
    00000544 C801                   TST         #1,R0
    00000546 8901                   BT          L1182
    00000548 A001                   BRA         L1183
    0000054A EC55                   MOV         #85,R12
    0000054C              L1182:                            
    0000054C 9C57                   MOV.W       L1662,R12  ; H'00AA
    0000054E              L1183:                            
      Monochrome   350                            if(x1>>3 != x2>>3)
    0000054E 35E0                   CMP/EQ      R14,R5
    00000550 8932                   BT          L1184
      Monochrome   351                            {
      Monochrome   352                                    vram[(y<<4)+(x1>>3)] &= 255 << 8-(x1&7);
    00000552 63D3                   MOV         R13,R3
    00000554 335C                   ADD         R5,R3
    00000556 336C                   ADD         R6,R3
    00000558 1F31                   MOV.L       R3,@(4,R15)
    0000055A 629B                   NEG         R9,R2
    0000055C 7208                   ADD         #8,R2
    0000055E 6143                   MOV         R4,R1
    00000560 412C                   SHAD        R2,R1
    00000562 6230                   MOV.B       @R3,R2
    00000564 2219                   AND         R1,R2
      Monochrome   353                                    vram[(y<<4)+(x2>>3)] &= 255 >> 1+(x2&7);
    00000566 6143                   MOV         R4,R1
    00000568 2320                   MOV.B       R2,@R3
    0000056A 63E3                   MOV         R14,R3
    0000056C 33DC                   ADD         R13,R3
    0000056E 336C                   ADD         R6,R3
    00000570 2F32                   MOV.L       R3,@R15
    00000572 62A3                   MOV         R10,R2
    00000574 6030                   MOV.B       @R3,R0
    00000576 7201                   ADD         #1,R2
    00000578 622B                   NEG         R2,R2
    0000057A 412C                   SHAD        R2,R1
    0000057C 2019                   AND         R1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   354                                    vram[(y<<4)+(x1>>3)] |= checker & 255>>(x1&7);
    0000057E 629B                   NEG         R9,R2
    00000580 2300                   MOV.B       R0,@R3
    00000582 6143                   MOV         R4,R1
    00000584 53F1                   MOV.L       @(4,R15),R3
    00000586 412C                   SHAD        R2,R1
    00000588 6230                   MOV.B       @R3,R2
    0000058A 21C9                   AND         R12,R1
    0000058C 221B                   OR          R1,R2
    0000058E 2320                   MOV.B       R2,@R3
      Monochrome   355                                    vram[(y<<4)+(x2>>3)] |= checker & 255<<7-(x2&7);
    00000590 63F2                   MOV.L       @R15,R3
    00000592 37A8                   SUB         R10,R7
    00000594 6230                   MOV.B       @R3,R2
      Monochrome   356                                    for(i=(x1>>3)+1 ; i<x2>>3 ; i++)
    00000596 7501                   ADD         #1,R5
    00000598 447C                   SHAD        R7,R4
    0000059A 24C9                   AND         R12,R4
    0000059C 224B                   OR          R4,R2
    0000059E 64D3                   MOV         R13,R4
    000005A0 2320                   MOV.B       R2,@R3
    000005A2 35E3                   CMP/GE      R14,R5
    000005A4 345C                   ADD         R5,R4
    000005A6 8D20                   BT/S        L1161
    000005A8 346C                   ADD         R6,R4
    000005AA              L1186:                            
    000005AA 7501                   ADD         #1,R5
      Monochrome   357                                            vram[(y<<4) + i] = checker;
    000005AC 24C0                   MOV.B       R12,@R4
    000005AE 35E3                   CMP/GE      R14,R5
    000005B0 8FFB                   BF/S        L1186
    000005B2 7401                   ADD         #1,R4
    000005B4 A019                   BRA         L1161
    000005B6 0009                   NOP
    000005B8              L1184:                            
      Monochrome   358                            }
      Monochrome   359                            else
      Monochrome   360                            {
      Monochrome   361                                    vram[(y<<4)+(x1>>3)] &= (255<<8-(x1&7)) | (255>>1+(x2&7));
    000005B8 63D3                   MOV         R13,R3
    000005BA 335C                   ADD         R5,R3
    000005BC 336C                   ADD         R6,R3
    000005BE E208                   MOV         #8,R2
    000005C0 2F32                   MOV.L       R3,@R15
    000005C2 6143                   MOV         R4,R1
    000005C4 3298                   SUB         R9,R2
    000005C6 412C                   SHAD        R2,R1
    000005C8 62A3                   MOV         R10,R2
    000005CA 7201                   ADD         #1,R2
    000005CC 622B                   NEG         R2,R2
    000005CE 6043                   MOV         R4,R0
    000005D0 402C                   SHAD        R2,R0
    000005D2 210B                   OR          R0,R1
    000005D4 6230                   MOV.B       @R3,R2
      Monochrome   362                                    vram[(y<<4)+(x1>>3)] |= checker & (255>>(x1%8 + 7-x2%8))<<(7-(x2&7));
    000005D6 37A8                   SUB         R10,R7
    000005D8 2219                   AND         R1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005DA 2320                   MOV.B       R2,@R3
    000005DC 63F2                   MOV.L       @R15,R3
    000005DE 52F1                   MOV.L       @(4,R15),R2
    000005E0 6130                   MOV.B       @R3,R1
    000005E2 427C                   SHAD        R7,R2
    000005E4 22C9                   AND         R12,R2
    000005E6 212B                   OR          R2,R1
    000005E8 2310                   MOV.B       R1,@R3
      Monochrome   363                            }
      Monochrome   364                            break;
      Monochrome   365        }
      Monochrome   366    }
    000005EA              L1161:                            
    000005EA 7F0C                   ADD         #12,R15
    000005EC 4F26                   LDS.L       @R15+,PR
    000005EE 68F6                   MOV.L       @R15+,R8
    000005F0 69F6                   MOV.L       @R15+,R9
    000005F2 6AF6                   MOV.L       @R15+,R10
    000005F4 6BF6                   MOV.L       @R15+,R11
    000005F6 6CF6                   MOV.L       @R15+,R12
    000005F8 6DF6                   MOV.L       @R15+,R13
    000005FA 000B                   RTS
    000005FC 6EF6                   MOV.L       @R15+,R14
    000005FE              L1662:                            
    000005FE 00AA                   .DATA.W     H'00AA
      Monochrome   367    
      Monochrome   368    #endif
      Monochrome   369    
      Monochrome   370    #ifdef ML_VERTICAL_LINE
      Monochrome   371    void ML_vertical_line(int x, int y1, int y2, ML_Color color)
    00000600              _ML_vertical_line:               ; function: ML_vertical_line
                                                           ; frame size=24
    00000600 2FE6                   MOV.L       R14,@-R15
    00000602 6E53                   MOV         R5,R14
    00000604 2FD6                   MOV.L       R13,@-R15
    00000606 6D63                   MOV         R6,R13
    00000608 2FC6                   MOV.L       R12,@-R15
    0000060A 6C43                   MOV         R4,R12
    0000060C 4F22                   STS.L       PR,@-R15
    0000060E 7FF8                   ADD         #-8,R15
      Monochrome   372    {
      Monochrome   373        int i, j;
      Monochrome   374        char checker, byte, *vram = ML_vram_adress();
    00000610 BCF6                   BSR         _ML_vram_adress
    00000612 2F72                   MOV.L       R7,@R15
      Monochrome   375            if(x&~127 || (y1<0 && y2<0) || (y1>63 && y2>63)) return;
    00000614 E380                   MOV         #-128,R3
    00000616 23C8                   TST         R12,R3
    00000618 8D02                   BT/S        L1663
    0000061A 1F01                   MOV.L       R0,@(4,R15)
    0000061C A084                   BRA         L1191
    0000061E 0009                   NOP
    00000620              L1663:                            
    00000620 4E11                   CMP/PZ      R14
    00000622 8903                   BT          L1190
    00000624 4D11                   CMP/PZ      R13
    00000626 8901                   BT          L1664




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000628 A07E                   BRA         L1191
    0000062A 0009                   NOP
    0000062C              L1664:                            
    0000062C              L1190:                            
    0000062C E33F                   MOV         #63,R3
    0000062E 3E37                   CMP/GT      R3,R14
    00000630 8B03                   BF          L1188
    00000632 3D37                   CMP/GT      R3,R13
    00000634 8B01                   BF          L1665
    00000636 A077                   BRA         L1191
    00000638 0009                   NOP
    0000063A              L1665:                            
    0000063A              L1188:                            
      Monochrome   376            if(y1 > y2)
    0000063A 3ED7                   CMP/GT      R13,R14
    0000063C 8B02                   BF          L1192
      Monochrome   377            {
      Monochrome   378                    int tmp = y1;
    0000063E 64E3                   MOV         R14,R4
      Monochrome   379                    y1 = y2;
    00000640 6ED3                   MOV         R13,R14
      Monochrome   380                    y2 = tmp;
    00000642 6D43                   MOV         R4,R13
    00000644              L1192:                            
      Monochrome   381            }
      Monochrome   382            if(y1 < 0) y1 = 0;
    00000644 4E11                   CMP/PZ      R14
    00000646 8D01                   BT/S        L1193
      Monochrome   383            if(y2 > 63) y2 = 63;
    00000648 E43F                   MOV         #63,R4
    0000064A EE00                   MOV         #0,R14
    0000064C              L1193:                            
    0000064C 3D47                   CMP/GT      R4,R13
    0000064E 8B00                   BF          L1194
    00000650 6D43                   MOV         R4,R13
    00000652              L1194:                            
      Monochrome   384    
      Monochrome   385            i = (y1<<4)+(x>>3);
    00000652 64E3                   MOV         R14,R4
    00000654 9747                   MOV.W       L1666,R7   ; H'0080
    00000656 E607                   MOV         #7,R6
    00000658 60F2                   MOV.L       @R15,R0
    0000065A 65C3                   MOV         R12,R5
    0000065C 4408                   SHLL2       R4
    0000065E 4408                   SHLL2       R4
    00000660 4521                   SHAR        R5
    00000662 4521                   SHAR        R5
    00000664 4521                   SHAR        R5
    00000666 345C                   ADD         R5,R4
      Monochrome   386            j = (y2<<4)+(x>>3);
    00000668 4D08                   SHLL2       R13
    0000066A 4D08                   SHLL2       R13
    0000066C 35DC                   ADD         R13,R5
    0000066E 8801                   CMP/EQ      #1,R0
    00000670 5DF1                   MOV.L       @(4,R15),R13
    00000672 8D08                   BT/S        L1110
    00000674 3D4C                   ADD         R4,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000676 8800                   CMP/EQ      #0,R0
    00000678 8915                   BT          L1111
    0000067A 8802                   CMP/EQ      #2,R0
    0000067C 8923                   BT          L1112
    0000067E 8803                   CMP/EQ      #3,R0
    00000680 8932                   BT          L1113
    00000682 A051                   BRA         L1191
    00000684 0009                   NOP
    00000686              L1110:                           ; case label 
      Monochrome   387            switch(color)
      Monochrome   388            {
      Monochrome   389                    case ML_BLACK:
      Monochrome   390                            byte = 128>>(x&7);
    00000686 2C69                   AND         R6,R12
    00000688 6CCB                   NEG         R12,R12
    0000068A 6E73                   MOV         R7,R14
    0000068C 4ECC                   SHAD        R12,R14
      Monochrome   391                            for( ; i<=j ; i+=16)
    0000068E 3457                   CMP/GT      R5,R4
    00000690 8D4A                   BT/S        L1191
    00000692 66D3                   MOV         R13,R6
    00000694              L1197:                            
      Monochrome   392                                    vram[i] |= byte;
    00000694 6260                   MOV.B       @R6,R2
    00000696 7410                   ADD         #16,R4
    00000698 22EB                   OR          R14,R2
    0000069A 3457                   CMP/GT      R5,R4
    0000069C 2620                   MOV.B       R2,@R6
    0000069E 8FF9                   BF/S        L1197
    000006A0 7610                   ADD         #16,R6
      Monochrome   393                            break;
    000006A2 A041                   BRA         L1191
    000006A4 0009                   NOP
    000006A6              L1111:                           ; case label 
      Monochrome   394                    case ML_WHITE:
      Monochrome   395                            byte = ~(128>>(x&7));
    000006A6 2C69                   AND         R6,R12
    000006A8 6CCB                   NEG         R12,R12
    000006AA 47CC                   SHAD        R12,R7
    000006AC 6E77                   NOT         R7,R14
      Monochrome   396                            for( ; i<=j ; i+=16)
    000006AE 3457                   CMP/GT      R5,R4
    000006B0 8D3A                   BT/S        L1191
    000006B2 66D3                   MOV         R13,R6
    000006B4              L1199:                            
      Monochrome   397                                    vram[i] &= byte;
    000006B4 6260                   MOV.B       @R6,R2
    000006B6 7410                   ADD         #16,R4
    000006B8 22E9                   AND         R14,R2
    000006BA 3457                   CMP/GT      R5,R4
    000006BC 2620                   MOV.B       R2,@R6
    000006BE 8FF9                   BF/S        L1199
    000006C0 7610                   ADD         #16,R6
      Monochrome   398                            break;
    000006C2 A031                   BRA         L1191
    000006C4 0009                   NOP
    000006C6              L1112:                           ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   399                    case ML_XOR:
      Monochrome   400                            byte = 128>>(x&7);
    000006C6 2C69                   AND         R6,R12
    000006C8 6CCB                   NEG         R12,R12
    000006CA 6E73                   MOV         R7,R14
    000006CC 4ECC                   SHAD        R12,R14
      Monochrome   401                            for( ; i<=j ; i+=16)
    000006CE 3457                   CMP/GT      R5,R4
    000006D0 8D2A                   BT/S        L1191
    000006D2 66D3                   MOV         R13,R6
    000006D4              L1201:                            
      Monochrome   402                                    vram[i] ^= byte;
    000006D4 6260                   MOV.B       @R6,R2
    000006D6 7410                   ADD         #16,R4
    000006D8 22EA                   XOR         R14,R2
    000006DA 3457                   CMP/GT      R5,R4
    000006DC 2620                   MOV.B       R2,@R6
    000006DE 8FF9                   BF/S        L1201
    000006E0 7610                   ADD         #16,R6
      Monochrome   403                            break;
    000006E2 A021                   BRA         L1191
    000006E4 0009                   NOP
    000006E6              L1666:                            
    000006E6 0080                   .DATA.W     H'0080
    000006E8              L1113:                           ; case label 
      Monochrome   404                    case ML_CHECKER:
      Monochrome   405                            byte = 128>>(x&7);
    000006E8 26C9                   AND         R12,R6
    000006EA 666B                   NEG         R6,R6
    000006EC 6073                   MOV         R7,R0
    000006EE 406C                   SHAD        R6,R0
      Monochrome   406                            checker = y1&1^x&1;
    000006F0 E701                   MOV         #1,R7
    000006F2 27E9                   AND         R14,R7
    000006F4 E301                   MOV         #1,R3
    000006F6 2C39                   AND         R3,R12
    000006F8 27CA                   XOR         R12,R7
    000006FA 66D3                   MOV         R13,R6
    000006FC 6ED3                   MOV         R13,R14
      Monochrome   407                            for( ; i<=j ; i+=16)
    000006FE 3457                   CMP/GT      R5,R4
    00000700 8D12                   BT/S        L1191
    00000702 6D07                   NOT         R0,R13
    00000704              L1203:                            
      Monochrome   408                            {
      Monochrome   409                                    if(checker) vram[i] &= ~byte;
    00000704 637E                   EXTS.B      R7,R3
    00000706 2338                   TST         R3,R3
    00000708 8D04                   BT/S        L1204
      Monochrome   410                                    else vram[i] |= byte;
      Monochrome   411                                    checker = !checker;
    0000070A 677E                   EXTS.B      R7,R7
    0000070C 62E0                   MOV.B       @R14,R2
    0000070E 22D9                   AND         R13,R2
    00000710 A003                   BRA         L1205
    00000712 2E20                   MOV.B       R2,@R14
    00000714              L1204:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000714 6160                   MOV.B       @R6,R1
    00000716 210B                   OR          R0,R1
    00000718 2610                   MOV.B       R1,@R6
    0000071A              L1205:                            
    0000071A 2778                   TST         R7,R7
    0000071C 0729                   MOVT        R7
    0000071E 7410                   ADD         #16,R4
    00000720 7610                   ADD         #16,R6
    00000722 3457                   CMP/GT      R5,R4
    00000724 8FEE                   BF/S        L1203
    00000726 7E10                   ADD         #16,R14
    00000728              L1191:                            
      Monochrome   412                            }
      Monochrome   413                            break;
      Monochrome   414            }
      Monochrome   415    }
    00000728 7F08                   ADD         #8,R15
    0000072A 4F26                   LDS.L       @R15+,PR
    0000072C 6CF6                   MOV.L       @R15+,R12
    0000072E 6DF6                   MOV.L       @R15+,R13
    00000730 000B                   RTS
    00000732 6EF6                   MOV.L       @R15+,R14
      Monochrome   416    #endif
      Monochrome   417    
      Monochrome   418    #ifdef ML_RECTANGLE
      Monochrome   419    void ML_rectangle(int x1, int y1, int x2, int y2, int border_width, ML_Color border_color, ML_Color fill_c
                         +olor)
    00000734              _ML_rectangle:                   ; function: ML_rectangle
                                                           ; frame size=48
    00000734 2FE6                   MOV.L       R14,@-R15
    00000736 2FD6                   MOV.L       R13,@-R15
    00000738 2FC6                   MOV.L       R12,@-R15
    0000073A 6D43                   MOV         R4,R13
    0000073C 2FB6                   MOV.L       R11,@-R15
    0000073E 6C63                   MOV         R6,R12
    00000740 2FA6                   MOV.L       R10,@-R15
      Monochrome   420    {
      Monochrome   421            int i;
      Monochrome   422            if(x1 > x2)
    00000742 3DC7                   CMP/GT      R12,R13
    00000744 2F96                   MOV.L       R9,@-R15
    00000746 2F86                   MOV.L       R8,@-R15
    00000748 4F22                   STS.L       PR,@-R15
    0000074A 7FF0                   ADD         #-16,R15
    0000074C 5EFC                   MOV.L       @(48,R15),R14
    0000074E 8F03                   BF/S        L1207
    00000750 5BFD                   MOV.L       @(52,R15),R11
      Monochrome   423            {
      Monochrome   424                    i = x1;
    00000752 64D3                   MOV         R13,R4
      Monochrome   425                    x1 = x2;
    00000754 6DC3                   MOV         R12,R13
      Monochrome   426                    x2 = i;
    00000756 6C43                   MOV         R4,R12
    00000758              L1207:                            
      Monochrome   427            }
      Monochrome   428            if(y1 > y2)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000758 3577                   CMP/GT      R7,R5
    0000075A 8B02                   BF          L1208
      Monochrome   429            {
      Monochrome   430                    i = y1;
    0000075C 6453                   MOV         R5,R4
      Monochrome   431                    y1 = y2;
    0000075E 6573                   MOV         R7,R5
      Monochrome   432                    y2 = i;
    00000760 6743                   MOV         R4,R7
    00000762              L1208:                            
    00000762 64C3                   MOV         R12,R4
    00000764 34D8                   SUB         R13,R4
    00000766 E300                   MOV         #0,R3
    00000768 3347                   CMP/GT      R4,R3
    0000076A 343E                   ADDC        R3,R4
    0000076C 4421                   SHAR        R4
    0000076E 7401                   ADD         #1,R4
    00000770 3E47                   CMP/GT      R4,R14
    00000772 8B00                   BF          L1209
      Monochrome   433            }
      Monochrome   434            if(border_width > (x2-x1)/2+1) border_width = (x2-x1)/2+1;
    00000774 6E43                   MOV         R4,R14
    00000776              L1209:                            
    00000776 6473                   MOV         R7,R4
    00000778 3458                   SUB         R5,R4
    0000077A E300                   MOV         #0,R3
    0000077C 3347                   CMP/GT      R4,R3
    0000077E 343E                   ADDC        R3,R4
    00000780 4421                   SHAR        R4
    00000782 7401                   ADD         #1,R4
    00000784 3E47                   CMP/GT      R4,R14
    00000786 8F01                   BF/S        L1210
    00000788 6353                   MOV         R5,R3
      Monochrome   435            if(border_width > (y2-y1)/2+1) border_width = (y2-y1)/2+1;
    0000078A 6E43                   MOV         R4,R14
    0000078C              L1210:                            
    0000078C 33EC                   ADD         R14,R3
    0000078E 6873                   MOV         R7,R8
    00000790 1F33                   MOV.L       R3,@(12,R15)
    00000792 62D3                   MOV         R13,R2
    00000794 32EC                   ADD         R14,R2
    00000796 61C3                   MOV         R12,R1
    00000798 1F22                   MOV.L       R2,@(8,R15)
    0000079A 60B3                   MOV         R11,R0
    0000079C 31E8                   SUB         R14,R1
    0000079E 88FF                   CMP/EQ      #-1,R0
    000007A0 2F12                   MOV.L       R1,@R15
    000007A2 8D2D                   BT/S        L1211
    000007A4 38E8                   SUB         R14,R8
    000007A6 4E15                   CMP/PL      R14
    000007A8 8B2A                   BF          L1211
      Monochrome   436            if(border_color != ML_TRANSPARENT && border_width > 0)
      Monochrome   437            {
      Monochrome   438                    for(i=0 ; i<border_width ; i++)
    000007AA E300                   MOV         #0,R3
    000007AC 1F31                   MOV.L       R3,@(4,R15)
    000007AE 6973                   MOV         R7,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007B0 4E15                   CMP/PL      R14
    000007B2 8F11                   BF/S        L1212
    000007B4 6A53                   MOV         R5,R10
    000007B6              L1213:                            
      Monochrome   439                    {
      Monochrome   440                            ML_horizontal_line(y1+i, x1, x2, border_color);
    000007B6 67B3                   MOV         R11,R7
    000007B8 66C3                   MOV         R12,R6
    000007BA 65D3                   MOV         R13,R5
    000007BC BDCC                   BSR         _ML_horizontal_line
    000007BE 64A3                   MOV         R10,R4
      Monochrome   441                            ML_horizontal_line(y2-i, x1, x2, border_color);
    000007C0 67B3                   MOV         R11,R7
    000007C2 66C3                   MOV         R12,R6
    000007C4 65D3                   MOV         R13,R5
    000007C6 BDC7                   BSR         _ML_horizontal_line
    000007C8 6493                   MOV         R9,R4
    000007CA 79FF                   ADD         #-1,R9
    000007CC 52F1                   MOV.L       @(4,R15),R2
    000007CE 7201                   ADD         #1,R2
    000007D0 1F21                   MOV.L       R2,@(4,R15)
    000007D2 32E3                   CMP/GE      R14,R2
    000007D4 8FEF                   BF/S        L1213
    000007D6 7A01                   ADD         #1,R10
    000007D8              L1212:                            
      Monochrome   442                    }
      Monochrome   443                    for(i=y1+border_width ; i<=y2-border_width ; i++)
    000007D8 5EF3                   MOV.L       @(12,R15),R14
    000007DA 5AF2                   MOV.L       @(8,R15),R10
    000007DC 69F2                   MOV.L       @R15,R9
    000007DE 3E87                   CMP/GT      R8,R14
    000007E0 7AFF                   ADD         #-1,R10
    000007E2 8D0D                   BT/S        L1211
    000007E4 7901                   ADD         #1,R9
    000007E6              L1215:                            
      Monochrome   444                    {
      Monochrome   445                            ML_horizontal_line(i, x1, x1+border_width-1, border_color);
    000007E6 67B3                   MOV         R11,R7
    000007E8 66A3                   MOV         R10,R6
    000007EA 65D3                   MOV         R13,R5
    000007EC BDB4                   BSR         _ML_horizontal_line
    000007EE 64E3                   MOV         R14,R4
      Monochrome   446                            ML_horizontal_line(i, x2-border_width+1, x2, border_color);
    000007F0 67B3                   MOV         R11,R7
    000007F2 66C3                   MOV         R12,R6
    000007F4 6593                   MOV         R9,R5
    000007F6 BDAF                   BSR         _ML_horizontal_line
    000007F8 64E3                   MOV         R14,R4
    000007FA 7E01                   ADD         #1,R14
    000007FC 3E87                   CMP/GT      R8,R14
    000007FE 8BF2                   BF          L1215
    00000800              L1211:                            
      Monochrome   447                    }
      Monochrome   448            }
      Monochrome   449            if(fill_color != ML_TRANSPARENT)
    00000800 50FE                   MOV.L       @(56,R15),R0
    00000802 88FF                   CMP/EQ      #-1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000804 890A                   BT          L1216
      Monochrome   450            {
      Monochrome   451                    for(i=y1+border_width ; i<=y2-border_width ; i++)
    00000806 5EF3                   MOV.L       @(12,R15),R14
    00000808 3E87                   CMP/GT      R8,R14
    0000080A 8907                   BT          L1216
    0000080C              L1218:                            
      Monochrome   452                            ML_horizontal_line(i, x1+border_width, x2-border_width, fill_color);
    0000080C 57FE                   MOV.L       @(56,R15),R7
    0000080E 66F2                   MOV.L       @R15,R6
    00000810 55F2                   MOV.L       @(8,R15),R5
    00000812 BDA1                   BSR         _ML_horizontal_line
    00000814 64E3                   MOV         R14,R4
    00000816 7E01                   ADD         #1,R14
    00000818 3E87                   CMP/GT      R8,R14
    0000081A 8BF7                   BF          L1218
    0000081C              L1216:                            
      Monochrome   453            }
      Monochrome   454    }
    0000081C 7F10                   ADD         #16,R15
    0000081E 4F26                   LDS.L       @R15+,PR
    00000820 68F6                   MOV.L       @R15+,R8
    00000822 69F6                   MOV.L       @R15+,R9
    00000824 6AF6                   MOV.L       @R15+,R10
    00000826 6BF6                   MOV.L       @R15+,R11
    00000828 6CF6                   MOV.L       @R15+,R12
    0000082A 6DF6                   MOV.L       @R15+,R13
    0000082C 000B                   RTS
    0000082E 6EF6                   MOV.L       @R15+,R14
      Monochrome   455    #endif
      Monochrome   456    
      Monochrome   457    #ifdef ML_POLYGON
      Monochrome   458    void ML_polygon(const int *x, const int *y, int nb_vertices, ML_Color color)
    00000830              _ML_polygon:                     ; function: ML_polygon
                                                           ; frame size=44
    00000830 2FE6                   MOV.L       R14,@-R15
      Monochrome   459    {
      Monochrome   460            int i;
      Monochrome   461            if(nb_vertices < 1) return;
    00000832 E301                   MOV         #1,R3
    00000834 2FD6                   MOV.L       R13,@-R15
    00000836 3633                   CMP/GE      R3,R6
    00000838 2FC6                   MOV.L       R12,@-R15
    0000083A 6D43                   MOV         R4,R13
    0000083C 2FB6                   MOV.L       R11,@-R15
    0000083E 6C53                   MOV         R5,R12
    00000840 2FA6                   MOV.L       R10,@-R15
    00000842 2F96                   MOV.L       R9,@-R15
    00000844 2F86                   MOV.L       R8,@-R15
    00000846 4F22                   STS.L       PR,@-R15
    00000848 7FF8                   ADD         #-8,R15
    0000084A 8F21                   BF/S        L1220
    0000084C 2F72                   MOV.L       R7,@R15
    0000084E 6863                   MOV         R6,R8
    00000850 78FF                   ADD         #-1,R8
      Monochrome   462            for(i=0 ; i<nb_vertices-1 ; i++)
    00000852 4815                   CMP/PL      R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000854 8F11                   BF/S        L1221
    00000856 EE00                   MOV         #0,R14
    00000858              L1222:                            
      Monochrome   463                    ML_line(x[i], y[i], x[i+1], y[i+1], color);
    00000858 62F2                   MOV.L       @R15,R2
    0000085A 69E3                   MOV         R14,R9
    0000085C 2F26                   MOV.L       R2,@-R15
    0000085E 4908                   SHLL2       R9
    00000860 6A93                   MOV         R9,R10
    00000862 3ACC                   ADD         R12,R10
    00000864 57A1                   MOV.L       @(4,R10),R7
    00000866 6B93                   MOV         R9,R11
    00000868 65A2                   MOV.L       @R10,R5
    0000086A 3BDC                   ADD         R13,R11
    0000086C 56B1                   MOV.L       @(4,R11),R6
    0000086E BD08                   BSR         _ML_line
    00000870 64B2                   MOV.L       @R11,R4
    00000872 7E01                   ADD         #1,R14
    00000874 3E83                   CMP/GE      R8,R14
    00000876 8FEF                   BF/S        L1222
    00000878 7F04                   ADD         #4,R15
    0000087A              L1221:                            
      Monochrome   464            ML_line(x[i], y[i], x[0], y[0], color);
    0000087A 60E3                   MOV         R14,R0
    0000087C 63F2                   MOV.L       @R15,R3
    0000087E 4008                   SHLL2       R0
    00000880 2F36                   MOV.L       R3,@-R15
    00000882 67C2                   MOV.L       @R12,R7
    00000884 66D2                   MOV.L       @R13,R6
    00000886 1F02                   MOV.L       R0,@(8,R15)
    00000888 05CE                   MOV.L       @(R0,R12),R5
    0000088A BCFA                   BSR         _ML_line
    0000088C 04DE                   MOV.L       @(R0,R13),R4
    0000088E 7F04                   ADD         #4,R15
      Monochrome   465    }
    00000890              L1220:                            
    00000890 7F08                   ADD         #8,R15
    00000892 4F26                   LDS.L       @R15+,PR
    00000894 68F6                   MOV.L       @R15+,R8
    00000896 69F6                   MOV.L       @R15+,R9
    00000898 6AF6                   MOV.L       @R15+,R10
    0000089A 6BF6                   MOV.L       @R15+,R11
    0000089C 6CF6                   MOV.L       @R15+,R12
    0000089E 6DF6                   MOV.L       @R15+,R13
    000008A0 000B                   RTS
    000008A2 6EF6                   MOV.L       @R15+,R14
      Monochrome   466    #endif
      Monochrome   467    
      Monochrome   468    #ifdef ML_FILLED_POLYGON
      Monochrome   469    static int ML_filled_polygon_quicksord_partition(int *t, int p, int r)
    000008A4              __$ML_filled_polygon_quicksord_partition:
                                                           ; function: ML_filled_polygon_quicksord_partition
                                                           ; frame size=20
    000008A4 2FE6                   MOV.L       R14,@-R15
      Monochrome   470    {
      Monochrome   471            int i, j, x, tmp;
      Monochrome   472            j = p - 1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   473            x = t[r];
      Monochrome   474            for(i=p ; i<r ; i++)
    000008A6 6753                   MOV         R5,R7
    000008A8 2FD6                   MOV.L       R13,@-R15
    000008AA 6E53                   MOV         R5,R14
    000008AC 2FC6                   MOV.L       R12,@-R15
    000008AE 3763                   CMP/GE      R6,R7
    000008B0 7FF8                   ADD         #-8,R15
    000008B2 7EFF                   ADD         #-1,R14
    000008B4 6C63                   MOV         R6,R12
    000008B6 4C08                   SHLL2       R12
    000008B8 3C4C                   ADD         R4,R12
    000008BA 4508                   SHLL2       R5
    000008BC 1FC1                   MOV.L       R12,@(4,R15)
    000008BE 354C                   ADD         R4,R5
    000008C0 6CC2                   MOV.L       @R12,R12
    000008C2 2F52                   MOV.L       R5,@R15
    000008C4 8D10                   BT/S        L1223
    000008C6 6D53                   MOV         R5,R13
    000008C8              L1224:                            
      Monochrome   475            {
      Monochrome   476                    if(x > t[i])
    000008C8 62D2                   MOV.L       @R13,R2
    000008CA 3C27                   CMP/GT      R2,R12
    000008CC 8F08                   BF/S        L1225
    000008CE 7701                   ADD         #1,R7
      Monochrome   477                    {
      Monochrome   478                            j++;
      Monochrome   479                            tmp = t[j];
      Monochrome   480                            t[j] = t[i];
    000008D0 6352                   MOV.L       @R5,R3
    000008D2 7E01                   ADD         #1,R14
    000008D4 60E3                   MOV         R14,R0
    000008D6 4008                   SHLL2       R0
    000008D8 304C                   ADD         R4,R0
    000008DA 6102                   MOV.L       @R0,R1
    000008DC 2032                   MOV.L       R3,@R0
      Monochrome   481                            t[i] = tmp;
    000008DE 2512                   MOV.L       R1,@R5
    000008E0              L1225:                            
    000008E0 7504                   ADD         #4,R5
    000008E2 3763                   CMP/GE      R6,R7
    000008E4 8FF0                   BF/S        L1224
    000008E6 7D04                   ADD         #4,R13
    000008E8              L1223:                            
      Monochrome   482                    }
      Monochrome   483            }
      Monochrome   484            t[r] = t[j+1];
    000008E8 53F1                   MOV.L       @(4,R15),R3
    000008EA 65E3                   MOV         R14,R5
    000008EC 4508                   SHLL2       R5
    000008EE 354C                   ADD         R4,R5
    000008F0 7504                   ADD         #4,R5
      Monochrome   485            t[j+1] = x;
      Monochrome   486            return j + 1;
    000008F2 60E3                   MOV         R14,R0
    000008F4 6252                   MOV.L       @R5,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008F6 7001                   ADD         #1,R0
    000008F8 2322                   MOV.L       R2,@R3
    000008FA 25C2                   MOV.L       R12,@R5
      Monochrome   487    }
    000008FC 7F08                   ADD         #8,R15
    000008FE 6CF6                   MOV.L       @R15+,R12
    00000900 6DF6                   MOV.L       @R15+,R13
    00000902 000B                   RTS
    00000904 6EF6                   MOV.L       @R15+,R14
      Monochrome   488    
      Monochrome   489    static void ML_filled_polygon_quicksord(int* t, int p, int r)
    00000906              __$ML_filled_polygon_quicksord:  ; function: ML_filled_polygon_quicksord
                                                           ; frame size=20
    00000906 2FE6                   MOV.L       R14,@-R15
    00000908 2FD6                   MOV.L       R13,@-R15
    0000090A 6E53                   MOV         R5,R14
    0000090C 2FC6                   MOV.L       R12,@-R15
    0000090E 6D63                   MOV         R6,R13
    00000910 4F22                   STS.L       PR,@-R15
    00000912 7FFC                   ADD         #-4,R15
    00000914 2F42                   MOV.L       R4,@R15
    00000916              L1227:                            
      Monochrome   490    {
      Monochrome   491            int q;
      Monochrome   492            if(p < r)
    00000916 3ED3                   CMP/GE      R13,R14
    00000918 890E                   BT          L1228
      Monochrome   493            {
      Monochrome   494                    q = ML_filled_polygon_quicksord_partition(t, p, r);
    0000091A 66D3                   MOV         R13,R6
    0000091C 65E3                   MOV         R14,R5
    0000091E BFC1                   BSR         __$ML_filled_polygon_quicksord_partition
    00000920 64F2                   MOV.L       @R15,R4
    00000922 6C03                   MOV         R0,R12
      Monochrome   495                    ML_filled_polygon_quicksord(t, p, q-1);
    00000924 6603                   MOV         R0,R6
    00000926 76FF                   ADD         #-1,R6
    00000928 65E3                   MOV         R14,R5
    0000092A BFEC                   BSR         __$ML_filled_polygon_quicksord
    0000092C 64F2                   MOV.L       @R15,R4
      Monochrome   496                    ML_filled_polygon_quicksord(t, q+1, r);
    0000092E 65D3                   MOV         R13,R5
    00000930 64C3                   MOV         R12,R4
    00000932 7401                   ADD         #1,R4
    00000934 AFEF                   BRA         L1227
    00000936 6E43                   MOV         R4,R14
    00000938              L1228:                            
      Monochrome   497            }
      Monochrome   498    }
    00000938 7F04                   ADD         #4,R15
    0000093A 4F26                   LDS.L       @R15+,PR
    0000093C 6CF6                   MOV.L       @R15+,R12
    0000093E 6DF6                   MOV.L       @R15+,R13
    00000940 000B                   RTS
    00000942 6EF6                   MOV.L       @R15+,R14
      Monochrome   499    
      Monochrome   500    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   501    void ML_filled_polygon(const int *x, const int *y, int nb_vertices, ML_Color color)
    00000944              _ML_filled_polygon:              ; function: ML_filled_polygon
                                                           ; frame size=108
                                                           ; used runtime library name:
                                                           ; __divls, __modls, __addd, __dtoi, __itod
    00000944 2FE6                   MOV.L       R14,@-R15
      Monochrome   502    {
      Monochrome   503            int i, j, dx, dy, ymin, ymax;
      Monochrome   504            int *cut_in_line, nb_cut;
      Monochrome   505            if(nb_vertices < 3) return;
    00000946 E303                   MOV         #3,R3
    00000948 2FD6                   MOV.L       R13,@-R15
    0000094A 2FC6                   MOV.L       R12,@-R15
    0000094C 2FB6                   MOV.L       R11,@-R15
    0000094E 6B63                   MOV         R6,R11
    00000950 2FA6                   MOV.L       R10,@-R15
    00000952 3B33                   CMP/GE      R3,R11
    00000954 2F96                   MOV.L       R9,@-R15
    00000956 6A53                   MOV         R5,R10
    00000958 2F86                   MOV.L       R8,@-R15
    0000095A 4F22                   STS.L       PR,@-R15
    0000095C 4F12                   STS.L       MACL,@-R15
    0000095E 7FD8                   ADD         #-40,R15
    00000960 1F44                   MOV.L       R4,@(16,R15)
    00000962 8D02                   BT/S        L1667
    00000964 1F73                   MOV.L       R7,@(12,R15)
    00000966 A100                   BRA         L1230
    00000968 0009                   NOP
    0000096A              L1667:                            
      Monochrome   506            cut_in_line = malloc(nb_vertices*sizeof(int));
    0000096A 64B3                   MOV         R11,R4
    0000096C D384                   MOV.L       L1668,R3   ; _malloc
    0000096E 430B                   JSR         @R3
    00000970 4408                   SHLL2       R4
    00000972 6D03                   MOV         R0,R13
      Monochrome   507            if(!cut_in_line) return;
    00000974 2DD8                   TST         R13,R13
    00000976 8B01                   BF          L1669
    00000978 A0F7                   BRA         L1230
    0000097A 0009                   NOP
    0000097C              L1669:                            
      Monochrome   508            ymin = ymax = y[0];
    0000097C 6EA2                   MOV.L       @R10,R14
      Monochrome   509            for(i=1 ; i<nb_vertices ; i++)
    0000097E E801                   MOV         #1,R8
    00000980 1FE6                   MOV.L       R14,@(24,R15)
    00000982 E704                   MOV         #4,R7
    00000984 6483                   MOV         R8,R4
    00000986 37AC                   ADD         R10,R7
    00000988 6573                   MOV         R7,R5
    0000098A 34B3                   CMP/GE      R11,R4
    0000098C 8D12                   BT/S        L1232
    0000098E 6673                   MOV         R7,R6
    00000990              L1233:                            
      Monochrome   510            {
      Monochrome   511                    if(y[i] < ymin) ymin = y[i];
    00000990 6043                   MOV         R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000992 4008                   SHLL2       R0
    00000994 03AE                   MOV.L       @(R0,R10),R3
    00000996 33E3                   CMP/GE      R14,R3
    00000998 8900                   BT          L1234
    0000099A 6E72                   MOV.L       @R7,R14
    0000099C              L1234:                            
      Monochrome   512                    if(y[i] > ymax) ymax = y[i];
    0000099C 53F6                   MOV.L       @(24,R15),R3
    0000099E 6262                   MOV.L       @R6,R2
    000009A0 3237                   CMP/GT      R3,R2
    000009A2 8F02                   BF/S        L1235
    000009A4 7401                   ADD         #1,R4
    000009A6 6252                   MOV.L       @R5,R2
    000009A8 1F26                   MOV.L       R2,@(24,R15)
    000009AA              L1235:                            
    000009AA 7504                   ADD         #4,R5
    000009AC 7604                   ADD         #4,R6
    000009AE 34B3                   CMP/GE      R11,R4
    000009B0 8FEE                   BF/S        L1233
    000009B2 7704                   ADD         #4,R7
    000009B4              L1232:                            
      Monochrome   513            }
      Monochrome   514            for(i=ymin ; i<=ymax ; i++)
    000009B4 A0C7                   BRA         L1236
    000009B6 6CE3                   MOV         R14,R12
    000009B8              L1237:                            
      Monochrome   515            {
      Monochrome   516                    nb_cut = 0;
    000009B8 E900                   MOV         #0,R9
      Monochrome   517                    for(j=0 ; j<nb_vertices ; j++)
    000009BA 6E93                   MOV         R9,R14
    000009BC 6393                   MOV         R9,R3
    000009BE 4B15                   CMP/PL      R11
    000009C0 2F32                   MOV.L       R3,@R15
    000009C2 1F81                   MOV.L       R8,@(4,R15)
    000009C4 8F73                   BF/S        L1238
    000009C6 1F82                   MOV.L       R8,@(8,R15)
    000009C8              L1239:                            
      Monochrome   518                    {
      Monochrome   519                            if((y[j]<=i && y[(j+1)%nb_vertices]>=i) || (y[j]>=i && y[(j+1)%nb_vertices]<=i))
    000009C8 60E3                   MOV         R14,R0
    000009CA 4008                   SHLL2       R0
    000009CC 04AE                   MOV.L       @(R0,R10),R4
    000009CE 34C7                   CMP/GT      R12,R4
    000009D0 8908                   BT          L1242
    000009D2 61E3                   MOV         R14,R1
    000009D4 D36B                   MOV.L       L1668+4,R3 ; __modls
    000009D6 7101                   ADD         #1,R1
    000009D8 430B                   JSR         @R3
    000009DA 60B3                   MOV         R11,R0
    000009DC 4008                   SHLL2       R0
    000009DE 02AE                   MOV.L       @(R0,R10),R2
    000009E0 32C3                   CMP/GE      R12,R2
    000009E2 890A                   BT          L1241
    000009E4              L1242:                            
    000009E4 34C3                   CMP/GE      R12,R4
    000009E6 8B56                   BF          L1240




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009E8 D366                   MOV.L       L1668+4,R3 ; __modls
    000009EA 61E3                   MOV         R14,R1
    000009EC 7101                   ADD         #1,R1
    000009EE 430B                   JSR         @R3
    000009F0 60B3                   MOV         R11,R0
    000009F2 4008                   SHLL2       R0
    000009F4 02AE                   MOV.L       @(R0,R10),R2
    000009F6 32C7                   CMP/GT      R12,R2
    000009F8 894D                   BT          L1240
    000009FA              L1241:                            
      Monochrome   520                            {
      Monochrome   521                                    dy = abs(y[j]-y[(j+1)%nb_vertices]);
    000009FA 60E3                   MOV         R14,R0
    000009FC 51F2                   MOV.L       @(8,R15),R1
    000009FE 4008                   SHLL2       R0
    00000A00 D360                   MOV.L       L1668+4,R3 ; __modls
    00000A02 04AE                   MOV.L       @(R0,R10),R4
    00000A04 430B                   JSR         @R3
    00000A06 60B3                   MOV         R11,R0
    00000A08 D25F                   MOV.L       L1668+8,R2 ; _abs
    00000A0A 4008                   SHLL2       R0
    00000A0C 03AE                   MOV.L       @(R0,R10),R3
    00000A0E 420B                   JSR         @R2
    00000A10 3438                   SUB         R3,R4
      Monochrome   522                                    if(dy)
    00000A12 2008                   TST         R0,R0
    00000A14 8D3F                   BT/S        L1240
    00000A16 1F05                   MOV.L       R0,@(20,R15)
      Monochrome   523                                    {
      Monochrome   524                                            dx = x[(j+1)%nb_vertices]-x[j];
    00000A18 51F1                   MOV.L       @(4,R15),R1
    00000A1A D25A                   MOV.L       L1668+4,R2 ; __modls
    00000A1C 420B                   JSR         @R2
    00000A1E 60B3                   MOV         R11,R0
    00000A20 53F4                   MOV.L       @(16,R15),R3
      Monochrome   525                                            cut_in_line[nb_cut] = x[j] + rnd(abs(i-y[j]+sgn(i-y[j])/2)*dx/dy);
    00000A22 64C3                   MOV         R12,R4
    00000A24 4008                   SHLL2       R0
    00000A26 023E                   MOV.L       @(R0,R3),R2
    00000A28 60F2                   MOV.L       @R15,R0
    00000A2A 013E                   MOV.L       @(R0,R3),R1
    00000A2C 1F18                   MOV.L       R1,@(32,R15)
    00000A2E 3218                   SUB         R1,R2
    00000A30 1F27                   MOV.L       R2,@(28,R15)
    00000A32 6193                   MOV         R9,R1
    00000A34 4108                   SHLL2       R1
    00000A36 31DC                   ADD         R13,R1
    00000A38 2F16                   MOV.L       R1,@-R15
    00000A3A 7FF8                   ADD         #-8,R15
    00000A3C 50F3                   MOV.L       @(12,R15),R0
    00000A3E 02AE                   MOV.L       @(R0,R10),R2
    00000A40 3428                   SUB         R2,R4
    00000A42 4411                   CMP/PZ      R4
    00000A44 8D02                   BT/S        L1244
    00000A46 1F2C                   MOV.L       R2,@(48,R15)
    00000A48 A001                   BRA         L1245
    00000A4A E4FF                   MOV         #-1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A4C              L1244:                            
    00000A4C E401                   MOV         #1,R4
    00000A4E              L1245:                            
    00000A4E E300                   MOV         #0,R3
    00000A50 52FC                   MOV.L       @(48,R15),R2
    00000A52 3347                   CMP/GT      R4,R3
    00000A54 343E                   ADDC        R3,R4
    00000A56 4421                   SHAR        R4
    00000A58 D34B                   MOV.L       L1668+8,R3 ; _abs
    00000A5A 3428                   SUB         R2,R4
    00000A5C 430B                   JSR         @R3
    00000A5E 34CC                   ADD         R12,R4
    00000A60 51FA                   MOV.L       @(40,R15),R1
    00000A62 0017                   MUL.L       R1,R0
    00000A64 D349                   MOV.L       L1668+12,R3; __divls
    00000A66 011A                   STS         MACL,R1
    00000A68 430B                   JSR         @R3
    00000A6A 50F8                   MOV.L       @(32,R15),R0
    00000A6C D248                   MOV.L       L1668+16,R2; __itod
    00000A6E 7FF8                   ADD         #-8,R15
    00000A70 420B                   JSR         @R2
    00000A72 2FF6                   MOV.L       R15,@-R15
    00000A74 D148                   MOV.L       L1668+24,R1; __addd
    00000A76 E300                   MOV         #0,R3
    00000A78 2F36                   MOV.L       R3,@-R15
    00000A7A D346                   MOV.L       L1668+20,R3; H'3FE00000
    00000A7C 2F36                   MOV.L       R3,@-R15
    00000A7E 62F3                   MOV         R15,R2
    00000A80 7210                   ADD         #16,R2
    00000A82 410B                   JSR         @R1
    00000A84 2F26                   MOV.L       R2,@-R15
    00000A86 D345                   MOV.L       L1668+28,R3; __dtoi
    00000A88 430B                   JSR         @R3
    00000A8A 0009                   NOP
    00000A8C 52F9                   MOV.L       @(36,R15),R2
      Monochrome   526                                            nb_cut++;
    00000A8E 7901                   ADD         #1,R9
    00000A90 63F6                   MOV.L       @R15+,R3
    00000A92 302C                   ADD         R2,R0
    00000A94 2302                   MOV.L       R0,@R3
    00000A96              L1240:                            
    00000A96 7E01                   ADD         #1,R14
    00000A98 62F2                   MOV.L       @R15,R2
    00000A9A 3EB3                   CMP/GE      R11,R14
    00000A9C 7204                   ADD         #4,R2
    00000A9E 2F22                   MOV.L       R2,@R15
    00000AA0 53F1                   MOV.L       @(4,R15),R3
    00000AA2 7301                   ADD         #1,R3
    00000AA4 1F31                   MOV.L       R3,@(4,R15)
    00000AA6 51F2                   MOV.L       @(8,R15),R1
    00000AA8 7101                   ADD         #1,R1
    00000AAA 8F8D                   BF/S        L1239
    00000AAC 1F12                   MOV.L       R1,@(8,R15)
    00000AAE              L1238:                            
      Monochrome   527                                    }
      Monochrome   528                            }
      Monochrome   529                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   530                    ML_filled_polygon_quicksord(cut_in_line, 0, nb_cut-1);
    00000AAE 6693                   MOV         R9,R6
    00000AB0 76FF                   ADD         #-1,R6
    00000AB2 E500                   MOV         #0,R5
    00000AB4 1F61                   MOV.L       R6,@(4,R15)
    00000AB6 BF26                   BSR         __$ML_filled_polygon_quicksord
    00000AB8 64D3                   MOV         R13,R4
      Monochrome   531                    j = 0;
    00000ABA EE00                   MOV         #0,R14
    00000ABC 6493                   MOV         R9,R4
      Monochrome   532                    while(j<nb_cut-2 && cut_in_line[j]==cut_in_line[j+1]) j++;
    00000ABE A001                   BRA         L1246
    00000AC0 74FE                   ADD         #-2,R4
    00000AC2              L1247:                            
    00000AC2 7E01                   ADD         #1,R14
    00000AC4              L1246:                            
    00000AC4 3E43                   CMP/GE      R4,R14
    00000AC6 893B                   BT          L1249
    00000AC8 60E3                   MOV         R14,R0
    00000ACA 4008                   SHLL2       R0
    00000ACC 03DE                   MOV.L       @(R0,R13),R3
    00000ACE 62E3                   MOV         R14,R2
    00000AD0 4208                   SHLL2       R2
    00000AD2 32DC                   ADD         R13,R2
    00000AD4 5121                   MOV.L       @(4,R2),R1
    00000AD6 3310                   CMP/EQ      R1,R3
    00000AD8 89F3                   BT          L1247
      Monochrome   533                    while(j < nb_cut)
    00000ADA A031                   BRA         L1249
    00000ADC 0009                   NOP
    00000ADE              L1250:                            
    00000ADE 63E3                   MOV         R14,R3
    00000AE0 4308                   SHLL2       R3
    00000AE2 33DC                   ADD         R13,R3
    00000AE4 1F32                   MOV.L       R3,@(8,R15)
    00000AE6 52F1                   MOV.L       @(4,R15),R2
    00000AE8 3E20                   CMP/EQ      R2,R14
    00000AEA 8B0A                   BF          L1251
      Monochrome   534                    {
      Monochrome   535                            if(j == nb_cut-1) ML_horizontal_line(i, cut_in_line[j-1]+1, cut_in_line[j], color)
                         +;
    00000AEC 57F3                   MOV.L       @(12,R15),R7
    00000AEE 60E3                   MOV         R14,R0
    00000AF0 6632                   MOV.L       @R3,R6
    00000AF2 70FF                   ADD         #-1,R0
    00000AF4 4008                   SHLL2       R0
    00000AF6 05DE                   MOV.L       @(R0,R13),R5
    00000AF8 7501                   ADD         #1,R5
    00000AFA BC2D                   BSR         _ML_horizontal_line
    00000AFC 64C3                   MOV         R12,R4
    00000AFE A01E                   BRA         L1252
    00000B00 0009                   NOP
    00000B02              L1251:                            
      Monochrome   536                            else
      Monochrome   537                            {
      Monochrome   538                                    dx = 1;
      Monochrome   539                                    while(j+dx<nb_cut-1 && cut_in_line[j+dx]==cut_in_line[j+dx+1]) dx++;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B02 A003                   BRA         L1253
    00000B04 2F82                   MOV.L       R8,@R15
    00000B06              L1254:                            
    00000B06 63F2                   MOV.L       @R15,R3
    00000B08 7301                   ADD         #1,R3
    00000B0A 2F32                   MOV.L       R3,@R15
    00000B0C              L1253:                            
    00000B0C 64F2                   MOV.L       @R15,R4
    00000B0E 34EC                   ADD         R14,R4
    00000B10 53F1                   MOV.L       @(4,R15),R3
    00000B12 3433                   CMP/GE      R3,R4
    00000B14 8908                   BT          L1255
    00000B16 6043                   MOV         R4,R0
    00000B18 4008                   SHLL2       R0
    00000B1A 6243                   MOV         R4,R2
    00000B1C 03DE                   MOV.L       @(R0,R13),R3
    00000B1E 4208                   SHLL2       R2
    00000B20 32DC                   ADD         R13,R2
    00000B22 5121                   MOV.L       @(4,R2),R1
    00000B24 3310                   CMP/EQ      R1,R3
    00000B26 89EE                   BT          L1254
    00000B28              L1255:                            
      Monochrome   540                                    ML_horizontal_line(i, cut_in_line[j], cut_in_line[j+dx], color);
    00000B28 57F3                   MOV.L       @(12,R15),R7
    00000B2A 60F2                   MOV.L       @R15,R0
    00000B2C 55F2                   MOV.L       @(8,R15),R5
    00000B2E 30EC                   ADD         R14,R0
    00000B30 6552                   MOV.L       @R5,R5
    00000B32 4008                   SHLL2       R0
    00000B34 06DE                   MOV.L       @(R0,R13),R6
    00000B36 BC0F                   BSR         _ML_horizontal_line
    00000B38 64C3                   MOV         R12,R4
      Monochrome   541                                    j += dx;
    00000B3A 62F2                   MOV.L       @R15,R2
    00000B3C 3E2C                   ADD         R2,R14
    00000B3E              L1252:                            
      Monochrome   542                            }
      Monochrome   543                            j++;
    00000B3E 7E01                   ADD         #1,R14
    00000B40              L1249:                            
    00000B40 3E93                   CMP/GE      R9,R14
    00000B42 8BCC                   BF          L1250
    00000B44 7C01                   ADD         #1,R12
    00000B46              L1236:                            
    00000B46 52F6                   MOV.L       @(24,R15),R2
    00000B48 3C27                   CMP/GT      R2,R12
    00000B4A 8901                   BT          L1670
    00000B4C AF34                   BRA         L1237
    00000B4E 0009                   NOP
    00000B50              L1670:                            
      Monochrome   544                    }
      Monochrome   545            }
      Monochrome   546            free(cut_in_line);
    00000B50 D213                   MOV.L       L1668+32,R2; _free
    00000B52 64D3                   MOV         R13,R4
    00000B54 7F28                   ADD         #40,R15
    00000B56 4F16                   LDS.L       @R15+,MACL




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B58 4F26                   LDS.L       @R15+,PR
    00000B5A 68F6                   MOV.L       @R15+,R8
    00000B5C 69F6                   MOV.L       @R15+,R9
    00000B5E 6AF6                   MOV.L       @R15+,R10
    00000B60 6BF6                   MOV.L       @R15+,R11
    00000B62 6CF6                   MOV.L       @R15+,R12
    00000B64 6DF6                   MOV.L       @R15+,R13
    00000B66 422B                   JMP         @R2
    00000B68 6EF6                   MOV.L       @R15+,R14
    00000B6A              L1230:                            
      Monochrome   547    }
    00000B6A 7F28                   ADD         #40,R15
    00000B6C 4F16                   LDS.L       @R15+,MACL
    00000B6E 4F26                   LDS.L       @R15+,PR
    00000B70 68F6                   MOV.L       @R15+,R8
    00000B72 69F6                   MOV.L       @R15+,R9
    00000B74 6AF6                   MOV.L       @R15+,R10
    00000B76 6BF6                   MOV.L       @R15+,R11
    00000B78 6CF6                   MOV.L       @R15+,R12
    00000B7A 6DF6                   MOV.L       @R15+,R13
    00000B7C 000B                   RTS
    00000B7E 6EF6                   MOV.L       @R15+,R14
    00000B80              L1668:                            
    00000B80 <00000000>             .DATA.L     _malloc
    00000B84 <00000000>             .DATA.L     __modls
    00000B88 <00000000>             .DATA.L     _abs
    00000B8C <00000000>             .DATA.L     __divls
    00000B90 <00000000>             .DATA.L     __itod
    00000B94 3FE00000               .DATA.L     H'3FE00000
    00000B98 <00000000>             .DATA.L     __addd
    00000B9C <00000000>             .DATA.L     __dtoi
    00000BA0 <00000000>             .DATA.L     _free
      Monochrome   548    #endif
      Monochrome   549    
      Monochrome   550    #ifdef ML_CIRCLE
      Monochrome   551    void ML_circle(int x, int y, int radius, ML_Color color)
    00000BA4              _ML_circle:                      ; function: ML_circle
                                                           ; frame size=40
    00000BA4 2FE6                   MOV.L       R14,@-R15
    00000BA6 2FD6                   MOV.L       R13,@-R15
    00000BA8 2FC6                   MOV.L       R12,@-R15
    00000BAA 2FB6                   MOV.L       R11,@-R15
    00000BAC 2FA6                   MOV.L       R10,@-R15
    00000BAE 6B53                   MOV         R5,R11
    00000BB0 2F96                   MOV.L       R9,@-R15
    00000BB2 6A43                   MOV         R4,R10
    00000BB4 2F86                   MOV.L       R8,@-R15
    00000BB6 6863                   MOV         R6,R8
    00000BB8 4F22                   STS.L       PR,@-R15
      Monochrome   552    {
      Monochrome   553            int plot_x, plot_y, d;
      Monochrome   554    
      Monochrome   555            if(radius < 0) return;
    00000BBA 4811                   CMP/PZ      R8
    00000BBC 7FF8                   ADD         #-8,R15
    00000BBE 8F60                   BF/S        L1257
    00000BC0 6C73                   MOV         R7,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   556            plot_x = 0;
    00000BC2 ED00                   MOV         #0,R13
      Monochrome   557            plot_y = radius;
    00000BC4 6E83                   MOV         R8,R14
      Monochrome   558            d = 1 - radius;
    00000BC6 E901                   MOV         #1,R9
    00000BC8 3988                   SUB         R8,R9
      Monochrome   559    
      Monochrome   560            ML_pixel(x, y+plot_y, color);
    00000BCA 66C3                   MOV         R12,R6
    00000BCC 65B3                   MOV         R11,R5
    00000BCE 35EC                   ADD         R14,R5
    00000BD0 BAA8                   BSR         _ML_pixel
    00000BD2 64A3                   MOV         R10,R4
      Monochrome   561            if(radius)
    00000BD4 2888                   TST         R8,R8
    00000BD6 890E                   BT          L1258
      Monochrome   562            {
      Monochrome   563                    ML_pixel(x, y-plot_y, color);
    00000BD8 66C3                   MOV         R12,R6
    00000BDA 65B3                   MOV         R11,R5
    00000BDC 35E8                   SUB         R14,R5
    00000BDE BAA1                   BSR         _ML_pixel
    00000BE0 64A3                   MOV         R10,R4
      Monochrome   564                    ML_pixel(x+plot_y, y, color);
    00000BE2 66C3                   MOV         R12,R6
    00000BE4 65B3                   MOV         R11,R5
    00000BE6 64A3                   MOV         R10,R4
    00000BE8 BA9C                   BSR         _ML_pixel
    00000BEA 34EC                   ADD         R14,R4
      Monochrome   565                    ML_pixel(x-plot_y, y, color);
    00000BEC 66C3                   MOV         R12,R6
    00000BEE 65B3                   MOV         R11,R5
    00000BF0 64A3                   MOV         R10,R4
    00000BF2 BA97                   BSR         _ML_pixel
    00000BF4 34E8                   SUB         R14,R4
    00000BF6              L1258:                            
      Monochrome   566            }
      Monochrome   567            while(plot_y > plot_x)
    00000BF6 4E15                   CMP/PL      R14
    00000BF8 8B43                   BF          L1257
    00000BFA              L1260:                            
      Monochrome   568            {
      Monochrome   569                    if(d < 0)
    00000BFA 4911                   CMP/PZ      R9
    00000BFC 8904                   BT          L1261
      Monochrome   570                            d += 2*plot_x+3;
    00000BFE 63D3                   MOV         R13,R3
    00000C00 4300                   SHLL        R3
    00000C02 7303                   ADD         #3,R3
    00000C04 A006                   BRA         L1262
    00000C06 393C                   ADD         R3,R9
    00000C08              L1261:                            
      Monochrome   571                    else
      Monochrome   572                    {
      Monochrome   573                            d += 2*(plot_x-plot_y)+5;
    00000C08 63D3                   MOV         R13,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C0A 33E8                   SUB         R14,R3
    00000C0C 4300                   SHLL        R3
    00000C0E 7305                   ADD         #5,R3
    00000C10 393C                   ADD         R3,R9
      Monochrome   574                            plot_y--;
    00000C12 7EFF                   ADD         #-1,R14
    00000C14              L1262:                            
      Monochrome   575                    }
      Monochrome   576                    plot_x++;
    00000C14 7D01                   ADD         #1,R13
      Monochrome   577                    if(plot_y >= plot_x)
    00000C16 3ED3                   CMP/GE      R13,R14
    00000C18 8B17                   BF          L1263
      Monochrome   578                    {
      Monochrome   579                            ML_pixel(x+plot_x, y+plot_y, color);
    00000C1A 66C3                   MOV         R12,R6
    00000C1C 65B3                   MOV         R11,R5
    00000C1E 35EC                   ADD         R14,R5
    00000C20 2F52                   MOV.L       R5,@R15
    00000C22 64A3                   MOV         R10,R4
    00000C24 34DC                   ADD         R13,R4
    00000C26 BA7D                   BSR         _ML_pixel
    00000C28 1F41                   MOV.L       R4,@(4,R15)
      Monochrome   580                            ML_pixel(x-plot_x, y+plot_y, color);
    00000C2A 66C3                   MOV         R12,R6
    00000C2C 65F2                   MOV.L       @R15,R5
    00000C2E 68A3                   MOV         R10,R8
    00000C30 38D8                   SUB         R13,R8
    00000C32 BA77                   BSR         _ML_pixel
    00000C34 6483                   MOV         R8,R4
      Monochrome   581                            ML_pixel(x+plot_x, y-plot_y, color);
    00000C36 66C3                   MOV         R12,R6
    00000C38 65B3                   MOV         R11,R5
    00000C3A 35E8                   SUB         R14,R5
    00000C3C 2F52                   MOV.L       R5,@R15
    00000C3E BA71                   BSR         _ML_pixel
    00000C40 54F1                   MOV.L       @(4,R15),R4
      Monochrome   582                            ML_pixel(x-plot_x, y-plot_y, color);
    00000C42 66C3                   MOV         R12,R6
    00000C44 65F2                   MOV.L       @R15,R5
    00000C46 BA6D                   BSR         _ML_pixel
    00000C48 6483                   MOV         R8,R4
    00000C4A              L1263:                            
      Monochrome   583                    }
      Monochrome   584                    if(plot_y > plot_x)
    00000C4A 3ED7                   CMP/GT      R13,R14
    00000C4C 8B17                   BF          L1264
      Monochrome   585                    {
      Monochrome   586                            ML_pixel(x+plot_y, y+plot_x, color);
    00000C4E 66C3                   MOV         R12,R6
    00000C50 65B3                   MOV         R11,R5
    00000C52 35DC                   ADD         R13,R5
    00000C54 2F52                   MOV.L       R5,@R15
    00000C56 64A3                   MOV         R10,R4
    00000C58 34EC                   ADD         R14,R4
    00000C5A BA63                   BSR         _ML_pixel
    00000C5C 1F41                   MOV.L       R4,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   587                            ML_pixel(x-plot_y, y+plot_x, color);
    00000C5E 66C3                   MOV         R12,R6
    00000C60 65F2                   MOV.L       @R15,R5
    00000C62 68A3                   MOV         R10,R8
    00000C64 38E8                   SUB         R14,R8
    00000C66 BA5D                   BSR         _ML_pixel
    00000C68 6483                   MOV         R8,R4
      Monochrome   588                            ML_pixel(x+plot_y, y-plot_x, color);
    00000C6A 66C3                   MOV         R12,R6
    00000C6C 65B3                   MOV         R11,R5
    00000C6E 35D8                   SUB         R13,R5
    00000C70 2F52                   MOV.L       R5,@R15
    00000C72 BA57                   BSR         _ML_pixel
    00000C74 54F1                   MOV.L       @(4,R15),R4
      Monochrome   589                            ML_pixel(x-plot_y, y-plot_x, color);
    00000C76 66C3                   MOV         R12,R6
    00000C78 65F2                   MOV.L       @R15,R5
    00000C7A BA53                   BSR         _ML_pixel
    00000C7C 6483                   MOV         R8,R4
    00000C7E              L1264:                            
    00000C7E 3ED7                   CMP/GT      R13,R14
    00000C80 89BB                   BT          L1260
    00000C82              L1257:                            
      Monochrome   590                    }
      Monochrome   591            }
      Monochrome   592    }
    00000C82 7F08                   ADD         #8,R15
    00000C84 4F26                   LDS.L       @R15+,PR
    00000C86 68F6                   MOV.L       @R15+,R8
    00000C88 69F6                   MOV.L       @R15+,R9
    00000C8A 6AF6                   MOV.L       @R15+,R10
    00000C8C 6BF6                   MOV.L       @R15+,R11
    00000C8E 6CF6                   MOV.L       @R15+,R12
    00000C90 6DF6                   MOV.L       @R15+,R13
    00000C92 000B                   RTS
    00000C94 6EF6                   MOV.L       @R15+,R14
      Monochrome   593    #endif
      Monochrome   594    
      Monochrome   595    #ifdef ML_FILLED_CIRCLE
      Monochrome   596    void ML_filled_circle(int x, int y, int radius, ML_Color color)
    00000C96              _ML_filled_circle:               ; function: ML_filled_circle
                                                           ; frame size=36
      Monochrome   597    {
      Monochrome   598            int plot_x, plot_y, d;
      Monochrome   599    
      Monochrome   600            if(radius < 0) return;
    00000C96 4611                   CMP/PZ      R6
    00000C98 2FE6                   MOV.L       R14,@-R15
    00000C9A 2FD6                   MOV.L       R13,@-R15
    00000C9C 2FC6                   MOV.L       R12,@-R15
    00000C9E 6C43                   MOV         R4,R12
    00000CA0 2FB6                   MOV.L       R11,@-R15
    00000CA2 6B53                   MOV         R5,R11
    00000CA4 2FA6                   MOV.L       R10,@-R15
    00000CA6 2F96                   MOV.L       R9,@-R15
    00000CA8 2F86                   MOV.L       R8,@-R15
    00000CAA 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CAC 7FFC                   ADD         #-4,R15
    00000CAE 8F50                   BF/S        L1266
    00000CB0 6A73                   MOV         R7,R10
      Monochrome   601            if(radius == 0)
    00000CB2 2668                   TST         R6,R6
    00000CB4 8B0C                   BF          L1267
      Monochrome   602        {
      Monochrome   603            ML_pixel(x, y, color);
    00000CB6 66A3                   MOV         R10,R6
    00000CB8 65B3                   MOV         R11,R5
    00000CBA 64C3                   MOV         R12,R4
    00000CBC 7F04                   ADD         #4,R15
    00000CBE 4F26                   LDS.L       @R15+,PR
    00000CC0 68F6                   MOV.L       @R15+,R8
    00000CC2 69F6                   MOV.L       @R15+,R9
    00000CC4 6AF6                   MOV.L       @R15+,R10
    00000CC6 6BF6                   MOV.L       @R15+,R11
    00000CC8 6CF6                   MOV.L       @R15+,R12
    00000CCA 6DF6                   MOV.L       @R15+,R13
    00000CCC AA2A                   BRA         _ML_pixel
    00000CCE 6EF6                   MOV.L       @R15+,R14
    00000CD0              L1267:                            
      Monochrome   604            return;
      Monochrome   605        }
      Monochrome   606            plot_x = 0;
    00000CD0 ED00                   MOV         #0,R13
      Monochrome   607            plot_y = radius;
    00000CD2 6E63                   MOV         R6,R14
      Monochrome   608            d = 1 - radius;
    00000CD4 E901                   MOV         #1,R9
    00000CD6 3968                   SUB         R6,R9
      Monochrome   609    
      Monochrome   610            ML_horizontal_line(y, x-plot_y, x+plot_y, color);
    00000CD8 67A3                   MOV         R10,R7
    00000CDA 66C3                   MOV         R12,R6
    00000CDC 36EC                   ADD         R14,R6
    00000CDE 65C3                   MOV         R12,R5
    00000CE0 35E8                   SUB         R14,R5
    00000CE2 BB39                   BSR         _ML_horizontal_line
    00000CE4 64B3                   MOV         R11,R4
      Monochrome   611            while(plot_y > plot_x)
    00000CE6 4E15                   CMP/PL      R14
    00000CE8 8B33                   BF          L1266
    00000CEA              L1269:                            
      Monochrome   612            {
      Monochrome   613                    if(d < 0)
    00000CEA 4911                   CMP/PZ      R9
    00000CEC 8904                   BT          L1270
      Monochrome   614                            d += 2*plot_x+3;
    00000CEE 63D3                   MOV         R13,R3
    00000CF0 4300                   SHLL        R3
    00000CF2 7303                   ADD         #3,R3
    00000CF4 A018                   BRA         L1271
    00000CF6 393C                   ADD         R3,R9
    00000CF8              L1270:                            
      Monochrome   615                    else {
      Monochrome   616                            d += 2*(plot_x-plot_y)+5;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CF8 63D3                   MOV         R13,R3
    00000CFA 33E8                   SUB         R14,R3
    00000CFC 4300                   SHLL        R3
    00000CFE 7305                   ADD         #5,R3
    00000D00 393C                   ADD         R3,R9
      Monochrome   617                            plot_y--;
    00000D02 7EFF                   ADD         #-1,R14
      Monochrome   618                            ML_horizontal_line(y+plot_y+1, x-plot_x, x+plot_x, color);
    00000D04 67A3                   MOV         R10,R7
    00000D06 68C3                   MOV         R12,R8
    00000D08 38DC                   ADD         R13,R8
    00000D0A 6683                   MOV         R8,R6
    00000D0C 65C3                   MOV         R12,R5
    00000D0E 35D8                   SUB         R13,R5
    00000D10 2F52                   MOV.L       R5,@R15
    00000D12 64B3                   MOV         R11,R4
    00000D14 34EC                   ADD         R14,R4
    00000D16 BB1F                   BSR         _ML_horizontal_line
    00000D18 7401                   ADD         #1,R4
      Monochrome   619                            ML_horizontal_line(y-plot_y-1, x-plot_x, x+plot_x, color);
    00000D1A 67A3                   MOV         R10,R7
    00000D1C 65F2                   MOV.L       @R15,R5
    00000D1E 64B3                   MOV         R11,R4
    00000D20 6683                   MOV         R8,R6
    00000D22 34E8                   SUB         R14,R4
    00000D24 BB18                   BSR         _ML_horizontal_line
    00000D26 74FF                   ADD         #-1,R4
    00000D28              L1271:                            
      Monochrome   620                    }
      Monochrome   621                    plot_x++;
    00000D28 7D01                   ADD         #1,R13
      Monochrome   622                    if(plot_y >= plot_x)
    00000D2A 3ED3                   CMP/GE      R13,R14
    00000D2C 8B0F                   BF          L1272
      Monochrome   623                    {
      Monochrome   624                            ML_horizontal_line(y+plot_x, x-plot_y, x+plot_y, color);
    00000D2E 67A3                   MOV         R10,R7
    00000D30 66C3                   MOV         R12,R6
    00000D32 36EC                   ADD         R14,R6
    00000D34 2F62                   MOV.L       R6,@R15
    00000D36 68C3                   MOV         R12,R8
    00000D38 38E8                   SUB         R14,R8
    00000D3A 6583                   MOV         R8,R5
    00000D3C 64B3                   MOV         R11,R4
    00000D3E BB0B                   BSR         _ML_horizontal_line
    00000D40 34DC                   ADD         R13,R4
      Monochrome   625                            ML_horizontal_line(y-plot_x, x-plot_y, x+plot_y, color);
    00000D42 67A3                   MOV         R10,R7
    00000D44 66F2                   MOV.L       @R15,R6
    00000D46 6583                   MOV         R8,R5
    00000D48 64B3                   MOV         R11,R4
    00000D4A BB05                   BSR         _ML_horizontal_line
    00000D4C 34D8                   SUB         R13,R4
    00000D4E              L1272:                            
    00000D4E 3ED7                   CMP/GT      R13,R14
    00000D50 89CB                   BT          L1269
    00000D52              L1266:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   626                    }
      Monochrome   627            }
      Monochrome   628    }
    00000D52 7F04                   ADD         #4,R15
    00000D54 4F26                   LDS.L       @R15+,PR
    00000D56 68F6                   MOV.L       @R15+,R8
    00000D58 69F6                   MOV.L       @R15+,R9
    00000D5A 6AF6                   MOV.L       @R15+,R10
    00000D5C 6BF6                   MOV.L       @R15+,R11
    00000D5E 6CF6                   MOV.L       @R15+,R12
    00000D60 6DF6                   MOV.L       @R15+,R13
    00000D62 000B                   RTS
    00000D64 6EF6                   MOV.L       @R15+,R14
      Monochrome   629    #endif
      Monochrome   630    
      Monochrome   631    #ifdef ML_ELLIPSE
      Monochrome   632    void ML_ellipse(int x, int y, int radius1, int radius2, ML_Color color)
    00000D66              _ML_ellipse:                     ; function: ML_ellipse
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __adds, __addd, __subdr, __muld, __dtos, __itos, __itod, __gtd, __lts
    00000D66 2FE6                   MOV.L       R14,@-R15
    00000D68 2FD6                   MOV.L       R13,@-R15
    00000D6A 2FC6                   MOV.L       R12,@-R15
    00000D6C 2FB6                   MOV.L       R11,@-R15
    00000D6E 6C73                   MOV         R7,R12
    00000D70 2FA6                   MOV.L       R10,@-R15
    00000D72 6A63                   MOV         R6,R10
    00000D74 2F96                   MOV.L       R9,@-R15
    00000D76 6953                   MOV         R5,R9
    00000D78 2F86                   MOV.L       R8,@-R15
    00000D7A 6843                   MOV         R4,R8
    00000D7C 4F22                   STS.L       PR,@-R15
      Monochrome   633    {
      Monochrome   634            int plot_x, plot_y;
      Monochrome   635            float d1, d2;
      Monochrome   636            if(radius1 < 1 || radius2 < 1) return;
    00000D7E E401                   MOV         #1,R4
    00000D80 4F12                   STS.L       MACL,@-R15
    00000D82 3A43                   CMP/GE      R4,R10
    00000D84 7FE8                   ADD         #-24,R15
    00000D86 8D02                   BT/S        L1671
    00000D88 5BFF                   MOV.L       @(60,R15),R11
    00000D8A A139                   BRA         L1275
    00000D8C 0009                   NOP
    00000D8E              L1671:                            
    00000D8E 3C43                   CMP/GE      R4,R12
    00000D90 8901                   BT          L1672
    00000D92 A135                   BRA         L1275
    00000D94 0009                   NOP
    00000D96              L1672:                            
      Monochrome   637            plot_x = 0;
    00000D96 ED00                   MOV         #0,R13
      Monochrome   638            plot_y = radius2;
      Monochrome   639            d1 = radius2*radius2 - radius1*radius1*radius2 + radius1*radius1/4;
    00000D98 0AA7                   MUL.L       R10,R10
    00000D9A 6EC3                   MOV         R12,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D9C 001A                   STS         MACL,R0
    00000D9E 4011                   CMP/PZ      R0
    00000DA0 8D01                   BT/S        L1276
    00000DA2 1F02                   MOV.L       R0,@(8,R15)
    00000DA4 7003                   ADD         #3,R0
    00000DA6              L1276:                            
    00000DA6 4021                   SHAR        R0
    00000DA8 52F2                   MOV.L       @(8,R15),R2
    00000DAA 4021                   SHAR        R0
    00000DAC 02C7                   MUL.L       R12,R2
    00000DAE 021A                   STS         MACL,R2
    00000DB0 0CC7                   MUL.L       R12,R12
    00000DB2 3028                   SUB         R2,R0
    00000DB4 D212                   MOV.L       L1673,R2   ; __itos
    00000DB6 031A                   STS         MACL,R3
    00000DB8 1F35                   MOV.L       R3,@(20,R15)
    00000DBA 420B                   JSR         @R2
    00000DBC 303C                   ADD         R3,R0
      Monochrome   640            ML_pixel(x, y+plot_y, color);
    00000DBE 66B3                   MOV         R11,R6
    00000DC0 2F02                   MOV.L       R0,@R15
    00000DC2 6593                   MOV         R9,R5
    00000DC4 35EC                   ADD         R14,R5
    00000DC6 B9AD                   BSR         _ML_pixel
    00000DC8 6483                   MOV         R8,R4
      Monochrome   641            ML_pixel(x, y-plot_y, color);
    00000DCA 66B3                   MOV         R11,R6
    00000DCC 6593                   MOV         R9,R5
    00000DCE 35E8                   SUB         R14,R5
      Monochrome   642            while(radius1*radius1*(plot_y-.5) > radius2*radius2*(plot_x+1))
    00000DD0 A044                   BRA         L1651
    00000DD2 6483                   MOV         R8,R4
    00000DD4              L1278:                            
    00000DD4 61F2                   MOV.L       @R15,R1
    00000DD6 64D3                   MOV         R13,R4
    00000DD8 D30A                   MOV.L       L1673+4,R3 ; __lts
    00000DDA 4400                   SHLL        R4
    00000DDC 7403                   ADD         #3,R4
    00000DDE 04C7                   MUL.L       R12,R4
    00000DE0 041A                   STS         MACL,R4
    00000DE2 04C7                   MUL.L       R12,R4
    00000DE4 041A                   STS         MACL,R4
    00000DE6 430B                   JSR         @R3
    00000DE8 E000                   MOV         #0,R0
    00000DEA 8800                   CMP/EQ      #0,R0
    00000DEC 890E                   BT          L1279
      Monochrome   643            {
      Monochrome   644                    if(d1 < 0)
      Monochrome   645                    {
      Monochrome   646                            d1 += radius2*radius2*(2*plot_x+3);
    00000DEE D204                   MOV.L       L1673,R2   ; __itos
    00000DF0 420B                   JSR         @R2
    00000DF2 6043                   MOV         R4,R0
    00000DF4 D304                   MOV.L       L1673+8,R3 ; __adds
    00000DF6 430B                   JSR         @R3
    00000DF8 61F2                   MOV.L       @R15,R1
    00000DFA 2F02                   MOV.L       R0,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   647                            plot_x++;
    00000DFC A017                   BRA         L1280
    00000DFE 7D01                   ADD         #1,R13
    00000E00              L1673:                            
    00000E00 <00000000>             .DATA.L     __itos
    00000E04 <00000000>             .DATA.L     __lts
    00000E08 <00000000>             .DATA.L     __adds
    00000E0C              L1279:                            
      Monochrome   648                    } else {
      Monochrome   649                            d1 += radius2*radius2*(2*plot_x+3) + radius1*radius1*(-2*plot_y+2);
    00000E0C D3BA                   MOV.L       L1674+2,R3 ; __itos
    00000E0E 62E3                   MOV         R14,R2
    00000E10 4200                   SHLL        R2
    00000E12 E002                   MOV         #2,R0
    00000E14 3028                   SUB         R2,R0
    00000E16 00A7                   MUL.L       R10,R0
    00000E18 001A                   STS         MACL,R0
    00000E1A 00A7                   MUL.L       R10,R0
    00000E1C 001A                   STS         MACL,R0
    00000E1E 430B                   JSR         @R3
    00000E20 304C                   ADD         R4,R0
    00000E22 D2B6                   MOV.L       L1674+6,R2 ; __adds
    00000E24 420B                   JSR         @R2
    00000E26 61F2                   MOV.L       @R15,R1
    00000E28 2F02                   MOV.L       R0,@R15
      Monochrome   650                            plot_x++;
    00000E2A 7D01                   ADD         #1,R13
      Monochrome   651                            plot_y--;
    00000E2C 7EFF                   ADD         #-1,R14
    00000E2E              L1280:                            
      Monochrome   652                    }
      Monochrome   653                    ML_pixel(x+plot_x, y+plot_y, color);
    00000E2E 66B3                   MOV         R11,R6
    00000E30 6593                   MOV         R9,R5
    00000E32 35EC                   ADD         R14,R5
    00000E34 1F51                   MOV.L       R5,@(4,R15)
    00000E36 6483                   MOV         R8,R4
    00000E38 34DC                   ADD         R13,R4
    00000E3A B973                   BSR         _ML_pixel
    00000E3C 1F43                   MOV.L       R4,@(12,R15)
      Monochrome   654                    ML_pixel(x-plot_x, y+plot_y, color);
    00000E3E 66B3                   MOV         R11,R6
    00000E40 55F1                   MOV.L       @(4,R15),R5
    00000E42 6483                   MOV         R8,R4
    00000E44 34D8                   SUB         R13,R4
    00000E46 B96D                   BSR         _ML_pixel
    00000E48 1F44                   MOV.L       R4,@(16,R15)
      Monochrome   655                    ML_pixel(x+plot_x, y-plot_y, color);
    00000E4A 66B3                   MOV         R11,R6
    00000E4C 6593                   MOV         R9,R5
    00000E4E 35E8                   SUB         R14,R5
    00000E50 1F51                   MOV.L       R5,@(4,R15)
    00000E52 B967                   BSR         _ML_pixel
    00000E54 54F3                   MOV.L       @(12,R15),R4
      Monochrome   656                    ML_pixel(x-plot_x, y-plot_y, color);
    00000E56 66B3                   MOV         R11,R6
    00000E58 55F1                   MOV.L       @(4,R15),R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E5A 54F4                   MOV.L       @(16,R15),R4
    00000E5C              L1651:                            
    00000E5C B962                   BSR         _ML_pixel
    00000E5E 0009                   NOP
    00000E60 D2A7                   MOV.L       L1674+10,R2; __itod
    00000E62 7FF8                   ADD         #-8,R15
    00000E64 50F4                   MOV.L       @(16,R15),R0
    00000E66 7FF8                   ADD         #-8,R15
    00000E68 420B                   JSR         @R2
    00000E6A 2FF6                   MOV.L       R15,@-R15
    00000E6C D3A4                   MOV.L       L1674+10,R3; __itod
    00000E6E 60E3                   MOV         R14,R0
    00000E70 7FF0                   ADD         #-16,R15
    00000E72 430B                   JSR         @R3
    00000E74 2FF6                   MOV.L       R15,@-R15
    00000E76 E200                   MOV         #0,R2
    00000E78 D1A3                   MOV.L       L1674+18,R1; __addd
    00000E7A 2F26                   MOV.L       R2,@-R15
    00000E7C D2A1                   MOV.L       L1674+14,R2; H'BFE00000
    00000E7E 2F26                   MOV.L       R2,@-R15
    00000E80 63F3                   MOV         R15,R3
    00000E82 7310                   ADD         #16,R3
    00000E84 410B                   JSR         @R1
    00000E86 2F36                   MOV.L       R3,@-R15
    00000E88 D0A0                   MOV.L       L1674+22,R0; __muld
    00000E8A 62F3                   MOV         R15,R2
    00000E8C 7210                   ADD         #16,R2
    00000E8E 400B                   JSR         @R0
    00000E90 2F26                   MOV.L       R2,@-R15
    00000E92 60D3                   MOV         R13,R0
    00000E94 D39A                   MOV.L       L1674+10,R3; __itod
    00000E96 7FF8                   ADD         #-8,R15
    00000E98 7001                   ADD         #1,R0
    00000E9A 00C7                   MUL.L       R12,R0
    00000E9C 001A                   STS         MACL,R0
    00000E9E 00C7                   MUL.L       R12,R0
    00000EA0 001A                   STS         MACL,R0
    00000EA2 430B                   JSR         @R3
    00000EA4 2FF6                   MOV.L       R15,@-R15
    00000EA6 D29A                   MOV.L       L1674+26,R2; __gtd
    00000EA8 420B                   JSR         @R2
    00000EAA 0009                   NOP
    00000EAC 8800                   CMP/EQ      #0,R0
    00000EAE 8B91                   BF          L1278
      Monochrome   657            }
      Monochrome   658            d2 = radius2*radius2*(plot_x+.5)*(plot_x+.5) + radius1*radius1*(plot_y-1)*(plot_y-1) - radius1*rad
                         +ius1*radius2*radius2;
    00000EB0 D393                   MOV.L       L1674+10,R3; __itod
    00000EB2 7FE0                   ADD         #-32,R15
    00000EB4 50FD                   MOV.L       @(52,R15),R0
    00000EB6 7FF8                   ADD         #-8,R15
    00000EB8 430B                   JSR         @R3
    00000EBA 2FF6                   MOV.L       R15,@-R15
    00000EBC D290                   MOV.L       L1674+10,R2; __itod
    00000EBE 60D3                   MOV         R13,R0
    00000EC0 7FF0                   ADD         #-16,R15
    00000EC2 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EC4 2FF6                   MOV.L       R15,@-R15
    00000EC6 E300                   MOV         #0,R3
    00000EC8 D18F                   MOV.L       L1674+18,R1; __addd
    00000ECA 2F36                   MOV.L       R3,@-R15
    00000ECC D391                   MOV.L       L1674+30,R3; H'3FE00000
    00000ECE 2F36                   MOV.L       R3,@-R15
    00000ED0 62F3                   MOV         R15,R2
    00000ED2 7210                   ADD         #16,R2
    00000ED4 410B                   JSR         @R1
    00000ED6 2F26                   MOV.L       R2,@-R15
    00000ED8 D08C                   MOV.L       L1674+22,R0; __muld
    00000EDA 63F3                   MOV         R15,R3
    00000EDC 7310                   ADD         #16,R3
    00000EDE 400B                   JSR         @R0
    00000EE0 2F36                   MOV.L       R3,@-R15
    00000EE2 60D3                   MOV         R13,R0
    00000EE4 D286                   MOV.L       L1674+10,R2; __itod
    00000EE6 7FF0                   ADD         #-16,R15
    00000EE8 420B                   JSR         @R2
    00000EEA 2FF6                   MOV.L       R15,@-R15
    00000EEC D186                   MOV.L       L1674+18,R1; __addd
    00000EEE E300                   MOV         #0,R3
    00000EF0 2F36                   MOV.L       R3,@-R15
    00000EF2 D388                   MOV.L       L1674+30,R3; H'3FE00000
    00000EF4 2F36                   MOV.L       R3,@-R15
    00000EF6 62F3                   MOV         R15,R2
    00000EF8 7210                   ADD         #16,R2
    00000EFA 410B                   JSR         @R1
    00000EFC 2F26                   MOV.L       R2,@-R15
    00000EFE 63F3                   MOV         R15,R3
    00000F00 D082                   MOV.L       L1674+22,R0; __muld
    00000F02 7310                   ADD         #16,R3
    00000F04 400B                   JSR         @R0
    00000F06 2F36                   MOV.L       R3,@-R15
    00000F08 D37D                   MOV.L       L1674+10,R3; __itod
    00000F0A 64E3                   MOV         R14,R4
    00000F0C 74FF                   ADD         #-1,R4
    00000F0E 7FF8                   ADD         #-8,R15
    00000F10 0447                   MUL.L       R4,R4
    00000F12 001A                   STS         MACL,R0
    00000F14 00A7                   MUL.L       R10,R0
    00000F16 001A                   STS         MACL,R0
    00000F18 00A7                   MUL.L       R10,R0
    00000F1A 001A                   STS         MACL,R0
    00000F1C 430B                   JSR         @R3
    00000F1E 2FF6                   MOV.L       R15,@-R15
    00000F20 D179                   MOV.L       L1674+18,R1; __addd
    00000F22 62F3                   MOV         R15,R2
    00000F24 7210                   ADD         #16,R2
    00000F26 410B                   JSR         @R1
    00000F28 2F26                   MOV.L       R2,@-R15
    00000F2A 50F6                   MOV.L       @(24,R15),R0
    00000F2C D374                   MOV.L       L1674+10,R3; __itod
    00000F2E 7FF8                   ADD         #-8,R15
    00000F30 00C7                   MUL.L       R12,R0
    00000F32 001A                   STS         MACL,R0
    00000F34 00C7                   MUL.L       R12,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F36 001A                   STS         MACL,R0
    00000F38 430B                   JSR         @R3
    00000F3A 2FF6                   MOV.L       R15,@-R15
    00000F3C D176                   MOV.L       L1674+34,R1; __subdr
    00000F3E 62F3                   MOV         R15,R2
    00000F40 7210                   ADD         #16,R2
    00000F42 410B                   JSR         @R1
    00000F44 2F26                   MOV.L       R2,@-R15
    00000F46 D375                   MOV.L       L1674+38,R3; __dtos
    00000F48 430B                   JSR         @R3
    00000F4A 0009                   NOP
    00000F4C 2F02                   MOV.L       R0,@R15
    00000F4E 6483                   MOV         R8,R4
    00000F50 34D8                   SUB         R13,R4
    00000F52 6383                   MOV         R8,R3
    00000F54 1F42                   MOV.L       R4,@(8,R15)
      Monochrome   659            while(plot_y > 0)
    00000F56 4E15                   CMP/PL      R14
    00000F58 33DC                   ADD         R13,R3
    00000F5A 1F31                   MOV.L       R3,@(4,R15)
    00000F5C 8F50                   BF/S        L1275
    00000F5E 1F44                   MOV.L       R4,@(16,R15)
    00000F60              L1282:                            
      Monochrome   660            {
      Monochrome   661                    if(d2 < 0)
    00000F60 61F2                   MOV.L       @R15,R1
    00000F62 D36F                   MOV.L       L1674+42,R3; __lts
    00000F64 430B                   JSR         @R3
    00000F66 E000                   MOV         #0,R0
    00000F68 8800                   CMP/EQ      #0,R0
    00000F6A 8921                   BT          L1283
      Monochrome   662                    {
      Monochrome   663                            d2 += radius2*radius2*(2*plot_x+2) + radius1*radius1*(-2*plot_y+3);
    00000F6C 60D3                   MOV         R13,R0
    00000F6E 4000                   SHLL        R0
    00000F70 7002                   ADD         #2,R0
    00000F72 63E3                   MOV         R14,R3
    00000F74 00C7                   MUL.L       R12,R0
    00000F76 E203                   MOV         #3,R2
    00000F78 001A                   STS         MACL,R0
    00000F7A 4300                   SHLL        R3
    00000F7C 00C7                   MUL.L       R12,R0
    00000F7E 3238                   SUB         R3,R2
    00000F80 D35D                   MOV.L       L1674+2,R3 ; __itos
    00000F82 001A                   STS         MACL,R0
    00000F84 02A7                   MUL.L       R10,R2
    00000F86 021A                   STS         MACL,R2
    00000F88 02A7                   MUL.L       R10,R2
    00000F8A 021A                   STS         MACL,R2
    00000F8C 430B                   JSR         @R3
    00000F8E 302C                   ADD         R2,R0
    00000F90 D25A                   MOV.L       L1674+6,R2 ; __adds
    00000F92 420B                   JSR         @R2
    00000F94 61F2                   MOV.L       @R15,R1
      Monochrome   664                            plot_y--;
    00000F96 7EFF                   ADD         #-1,R14
    00000F98 2F02                   MOV.L       R0,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   665                            plot_x++;
    00000F9A 7D01                   ADD         #1,R13
    00000F9C 53F2                   MOV.L       @(8,R15),R3
    00000F9E 73FF                   ADD         #-1,R3
    00000FA0 1F32                   MOV.L       R3,@(8,R15)
    00000FA2 52F1                   MOV.L       @(4,R15),R2
    00000FA4 7201                   ADD         #1,R2
    00000FA6 1F21                   MOV.L       R2,@(4,R15)
    00000FA8 51F4                   MOV.L       @(16,R15),R1
    00000FAA 71FF                   ADD         #-1,R1
    00000FAC A00F                   BRA         L1284
    00000FAE 1F14                   MOV.L       R1,@(16,R15)
    00000FB0              L1283:                            
      Monochrome   666                    } else {
      Monochrome   667                            d2 += radius1*radius1*(-2*plot_y+3);
    00000FB0 D351                   MOV.L       L1674+2,R3 ; __itos
    00000FB2 62E3                   MOV         R14,R2
    00000FB4 4200                   SHLL        R2
    00000FB6 E003                   MOV         #3,R0
    00000FB8 3028                   SUB         R2,R0
    00000FBA 00A7                   MUL.L       R10,R0
    00000FBC 001A                   STS         MACL,R0
    00000FBE 00A7                   MUL.L       R10,R0
    00000FC0 430B                   JSR         @R3
    00000FC2 001A                   STS         MACL,R0
    00000FC4 D24D                   MOV.L       L1674+6,R2 ; __adds
    00000FC6 420B                   JSR         @R2
    00000FC8 61F2                   MOV.L       @R15,R1
      Monochrome   668                            plot_y--;
    00000FCA 7EFF                   ADD         #-1,R14
    00000FCC 2F02                   MOV.L       R0,@R15
    00000FCE              L1284:                            
      Monochrome   669                    }
      Monochrome   670                    ML_pixel(x+plot_x, y+plot_y, color);
    00000FCE 66B3                   MOV         R11,R6
    00000FD0 6593                   MOV         R9,R5
    00000FD2 35EC                   ADD         R14,R5
    00000FD4 1F53                   MOV.L       R5,@(12,R15)
    00000FD6 6483                   MOV         R8,R4
    00000FD8 B8A4                   BSR         _ML_pixel
    00000FDA 34DC                   ADD         R13,R4
      Monochrome   671                    ML_pixel(x-plot_x, y+plot_y, color);
    00000FDC 55F3                   MOV.L       @(12,R15),R5
    00000FDE 66B3                   MOV         R11,R6
    00000FE0 B8A0                   BSR         _ML_pixel
    00000FE2 54F4                   MOV.L       @(16,R15),R4
      Monochrome   672                    if(plot_y > 0)
    00000FE4 4E15                   CMP/PL      R14
    00000FE6 8B09                   BF          L1285
      Monochrome   673                    {
      Monochrome   674                            ML_pixel(x+plot_x, y-plot_y, color);
    00000FE8 66B3                   MOV         R11,R6
    00000FEA 6593                   MOV         R9,R5
    00000FEC 35E8                   SUB         R14,R5
    00000FEE 1F53                   MOV.L       R5,@(12,R15)
    00000FF0 B898                   BSR         _ML_pixel
    00000FF2 54F1                   MOV.L       @(4,R15),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   675                            ML_pixel(x-plot_x, y-plot_y, color);
    00000FF4 55F3                   MOV.L       @(12,R15),R5
    00000FF6 66B3                   MOV         R11,R6
    00000FF8 B894                   BSR         _ML_pixel
    00000FFA 54F2                   MOV.L       @(8,R15),R4
    00000FFC              L1285:                            
    00000FFC 4E15                   CMP/PL      R14
    00000FFE 89AF                   BT          L1282
    00001000              L1275:                            
      Monochrome   676                    }
      Monochrome   677            }
      Monochrome   678    }
    00001000 7F18                   ADD         #24,R15
    00001002 4F16                   LDS.L       @R15+,MACL
    00001004 4F26                   LDS.L       @R15+,PR
    00001006 68F6                   MOV.L       @R15+,R8
    00001008 69F6                   MOV.L       @R15+,R9
    0000100A 6AF6                   MOV.L       @R15+,R10
    0000100C 6BF6                   MOV.L       @R15+,R11
    0000100E 6CF6                   MOV.L       @R15+,R12
    00001010 6DF6                   MOV.L       @R15+,R13
    00001012 000B                   RTS
    00001014 6EF6                   MOV.L       @R15+,R14
      Monochrome   679    #endif
      Monochrome   680    
      Monochrome   681    #ifdef ML_ELLIPSE_IN_RECT
      Monochrome   682    void ML_ellipse_in_rect(int x1, int y1, int x2, int y2, ML_Color color)
    00001016              _ML_ellipse_in_rect:             ; function: ML_ellipse_in_rect
                                                           ; frame size=24
    00001016 2FE6                   MOV.L       R14,@-R15
    00001018 2FD6                   MOV.L       R13,@-R15
    0000101A 6E43                   MOV         R4,R14
    0000101C 2FC6                   MOV.L       R12,@-R15
      Monochrome   683    {
      Monochrome   684            int radius1, radius2;
      Monochrome   685            if(x1 > x2)
    0000101E 3E67                   CMP/GT      R6,R14
    00001020 2FB6                   MOV.L       R11,@-R15
    00001022 4F22                   STS.L       PR,@-R15
    00001024 8F03                   BF/S        L1286
    00001026 6D53                   MOV         R5,R13
      Monochrome   686            {
      Monochrome   687                    int tmp = x1;
    00001028 64E3                   MOV         R14,R4
      Monochrome   688                    x1 = x2;
    0000102A 6E63                   MOV         R6,R14
      Monochrome   689                    x2 = tmp;
    0000102C 6643                   MOV         R4,R6
    0000102E              L1286:                            
      Monochrome   690            }
      Monochrome   691            if(y1 > y2)
    0000102E 3D77                   CMP/GT      R7,R13
    00001030 8F03                   BF/S        L1287
      Monochrome   692            {
      Monochrome   693                    int tmp = y1;
      Monochrome   694                    y1 = y2;
      Monochrome   695                    y2 = tmp;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   696            }
      Monochrome   697            radius1 = (x2-x1)/2;
    00001032 36E8                   SUB         R14,R6
    00001034 64D3                   MOV         R13,R4
    00001036 6D73                   MOV         R7,R13
    00001038 6743                   MOV         R4,R7
    0000103A              L1287:                            
    0000103A 6B63                   MOV         R6,R11
      Monochrome   698            radius2 = (y2-y1)/2;
      Monochrome   699            ML_ellipse(x1+radius1, y1+radius2, radius1, radius2, color);
    0000103C 52F5                   MOV.L       @(20,R15),R2
    0000103E 65D3                   MOV         R13,R5
    00001040 2F26                   MOV.L       R2,@-R15
    00001042 64E3                   MOV         R14,R4
    00001044 E300                   MOV         #0,R3
    00001046 33B7                   CMP/GT      R11,R3
    00001048 3B3E                   ADDC        R3,R11
    0000104A 4B21                   SHAR        R11
    0000104C 37D8                   SUB         R13,R7
    0000104E 6C73                   MOV         R7,R12
    00001050 33C7                   CMP/GT      R12,R3
    00001052 3C3E                   ADDC        R3,R12
    00001054 4C21                   SHAR        R12
    00001056 67C3                   MOV         R12,R7
    00001058 66B3                   MOV         R11,R6
    0000105A 35CC                   ADD         R12,R5
    0000105C BE83                   BSR         _ML_ellipse
    0000105E 34BC                   ADD         R11,R4
      Monochrome   700    }
    00001060 7F04                   ADD         #4,R15
    00001062 4F26                   LDS.L       @R15+,PR
    00001064 6BF6                   MOV.L       @R15+,R11
    00001066 6CF6                   MOV.L       @R15+,R12
    00001068 6DF6                   MOV.L       @R15+,R13
    0000106A 000B                   RTS
    0000106C 6EF6                   MOV.L       @R15+,R14
      Monochrome   701    #endif
      Monochrome   702    
      Monochrome   703    #ifdef ML_FILLED_ELLIPSE
      Monochrome   704    void ML_filled_ellipse(int x, int y, int radius1, int radius2, ML_Color color)
    0000106E              _ML_filled_ellipse:              ; function: ML_filled_ellipse
                                                           ; frame size=124
                                                           ; used runtime library name:
                                                           ; __adds, __addd, __subdr, __muld, __dtos, __itos, __itod, __gtd, __lts
    0000106E 2FE6                   MOV.L       R14,@-R15
    00001070 2FD6                   MOV.L       R13,@-R15
    00001072 2FC6                   MOV.L       R12,@-R15
    00001074 2FB6                   MOV.L       R11,@-R15
    00001076 6C73                   MOV         R7,R12
    00001078 2FA6                   MOV.L       R10,@-R15
    0000107A 6B63                   MOV         R6,R11
    0000107C 2F96                   MOV.L       R9,@-R15
    0000107E 6953                   MOV         R5,R9
    00001080 2F86                   MOV.L       R8,@-R15
    00001082 6843                   MOV         R4,R8
    00001084 4F22                   STS.L       PR,@-R15
      Monochrome   705    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   706            int plot_x, plot_y;
      Monochrome   707            float d1, d2;
      Monochrome   708            if(radius1 < 1 || radius2 < 1) return;
    00001086 E401                   MOV         #1,R4
    00001088 4F12                   STS.L       MACL,@-R15
    0000108A 3B43                   CMP/GE      R4,R11
    0000108C 7FEC                   ADD         #-20,R15
    0000108E 8D02                   BT/S        L1675
    00001090 5AFE                   MOV.L       @(56,R15),R10
    00001092 A13F                   BRA         L1290
    00001094 0009                   NOP
    00001096              L1675:                            
    00001096 3C43                   CMP/GE      R4,R12
    00001098 8901                   BT          L1676
    0000109A A13B                   BRA         L1290
    0000109C 0009                   NOP
    0000109E              L1676:                            
      Monochrome   709            plot_x = 0;
    0000109E ED00                   MOV         #0,R13
      Monochrome   710            plot_y = radius2;
      Monochrome   711            d1 = radius2*radius2 - radius1*radius1*radius2 + radius1*radius1/4;
    000010A0 0BB7                   MUL.L       R11,R11
    000010A2 6EC3                   MOV         R12,R14
    000010A4 001A                   STS         MACL,R0
    000010A6 4011                   CMP/PZ      R0
    000010A8 8D01                   BT/S        L1291
    000010AA 1F02                   MOV.L       R0,@(8,R15)
    000010AC 7003                   ADD         #3,R0
    000010AE              L1291:                            
    000010AE 4021                   SHAR        R0
    000010B0 52F2                   MOV.L       @(8,R15),R2
    000010B2 4021                   SHAR        R0
    000010B4 02C7                   MUL.L       R12,R2
    000010B6 021A                   STS         MACL,R2
    000010B8 0CC7                   MUL.L       R12,R12
    000010BA 3028                   SUB         R2,R0
    000010BC D20E                   MOV.L       L1674+2,R2 ; __itos
    000010BE 031A                   STS         MACL,R3
    000010C0 1F34                   MOV.L       R3,@(16,R15)
    000010C2 420B                   JSR         @R2
    000010C4 303C                   ADD         R3,R0
      Monochrome   712            while(radius1*radius1*(plot_y-.5) > radius2*radius2*(plot_x+1))
    000010C6 A04E                   BRA         L1292
    000010C8 2F02                   MOV.L       R0,@R15
    000010CA              L1293:                            
    000010CA 64D3                   MOV         R13,R4
    000010CC 61F2                   MOV.L       @R15,R1
    000010CE 4400                   SHLL        R4
    000010D0 D313                   MOV.L       L1674+42,R3; __lts
    000010D2 7403                   ADD         #3,R4
    000010D4 04C7                   MUL.L       R12,R4
    000010D6 041A                   STS         MACL,R4
    000010D8 04C7                   MUL.L       R12,R4
    000010DA 041A                   STS         MACL,R4
    000010DC 430B                   JSR         @R3
    000010DE E000                   MOV         #0,R0
    000010E0 8800                   CMP/EQ      #0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010E2 891F                   BT          L1294
      Monochrome   713            {
      Monochrome   714                    if(d1 < 0)
      Monochrome   715                    {
      Monochrome   716                            d1 += radius2*radius2*(2*plot_x+3);
    000010E4 D204                   MOV.L       L1674+2,R2 ; __itos
    000010E6 420B                   JSR         @R2
    000010E8 6043                   MOV         R4,R0
    000010EA D304                   MOV.L       L1674+6,R3 ; __adds
    000010EC 430B                   JSR         @R3
    000010EE 61F2                   MOV.L       @R15,R1
    000010F0 2F02                   MOV.L       R0,@R15
      Monochrome   717                            plot_x++;
    000010F2 A038                   BRA         L1292
    000010F4 7D01                   ADD         #1,R13
    000010F6              L1674:                            
    000010F6 0000                   .DATA.W     0
    000010F8 <00000000>             .DATA.L     __itos
    000010FC <00000000>             .DATA.L     __adds
    00001100 <00000000>             .DATA.L     __itod
    00001104 BFE00000               .DATA.L     H'BFE00000
    00001108 <00000000>             .DATA.L     __addd
    0000110C <00000000>             .DATA.L     __muld
    00001110 <00000000>             .DATA.L     __gtd
    00001114 3FE00000               .DATA.L     H'3FE00000
    00001118 <00000000>             .DATA.L     __subdr
    0000111C <00000000>             .DATA.L     __dtos
    00001120 <00000000>             .DATA.L     __lts
    00001124              L1294:                            
      Monochrome   718                    } else {
      Monochrome   719                            d1 += radius2*radius2*(2*plot_x+3) + radius1*radius1*(-2*plot_y+2);
    00001124 D3A0                   MOV.L       L1677+2,R3 ; __itos
    00001126 62E3                   MOV         R14,R2
    00001128 4200                   SHLL        R2
    0000112A E002                   MOV         #2,R0
    0000112C 3028                   SUB         R2,R0
    0000112E 00B7                   MUL.L       R11,R0
    00001130 001A                   STS         MACL,R0
    00001132 00B7                   MUL.L       R11,R0
    00001134 001A                   STS         MACL,R0
    00001136 430B                   JSR         @R3
    00001138 304C                   ADD         R4,R0
    0000113A D29C                   MOV.L       L1677+6,R2 ; __adds
    0000113C 420B                   JSR         @R2
    0000113E 61F2                   MOV.L       @R15,R1
    00001140 2F02                   MOV.L       R0,@R15
      Monochrome   720                            ML_horizontal_line(y+plot_y, x-plot_x, x+plot_x, color);
    00001142 67A3                   MOV         R10,R7
    00001144 6683                   MOV         R8,R6
    00001146 36DC                   ADD         R13,R6
    00001148 1F61                   MOV.L       R6,@(4,R15)
    0000114A 6583                   MOV         R8,R5
    0000114C 35D8                   SUB         R13,R5
    0000114E 6493                   MOV         R9,R4
    00001150 1F53                   MOV.L       R5,@(12,R15)
    00001152 B901                   BSR         _ML_horizontal_line
    00001154 34EC                   ADD         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   721                            ML_horizontal_line(y-plot_y, x-plot_x, x+plot_x, color);
    00001156 67A3                   MOV         R10,R7
    00001158 56F1                   MOV.L       @(4,R15),R6
    0000115A 6493                   MOV         R9,R4
    0000115C 55F3                   MOV.L       @(12,R15),R5
    0000115E B8FB                   BSR         _ML_horizontal_line
    00001160 34E8                   SUB         R14,R4
      Monochrome   722                            plot_x++;
    00001162 7D01                   ADD         #1,R13
      Monochrome   723                            plot_y--;
    00001164 7EFF                   ADD         #-1,R14
    00001166              L1292:                            
    00001166 7FF8                   ADD         #-8,R15
    00001168 D291                   MOV.L       L1677+10,R2; __itod
    0000116A 50F4                   MOV.L       @(16,R15),R0
    0000116C 7FF8                   ADD         #-8,R15
    0000116E 420B                   JSR         @R2
    00001170 2FF6                   MOV.L       R15,@-R15
    00001172 60E3                   MOV         R14,R0
    00001174 D38E                   MOV.L       L1677+10,R3; __itod
    00001176 7FF0                   ADD         #-16,R15
    00001178 430B                   JSR         @R3
    0000117A 2FF6                   MOV.L       R15,@-R15
    0000117C D18E                   MOV.L       L1677+18,R1; __addd
    0000117E E200                   MOV         #0,R2
    00001180 2F26                   MOV.L       R2,@-R15
    00001182 D28C                   MOV.L       L1677+14,R2; H'BFE00000
    00001184 2F26                   MOV.L       R2,@-R15
    00001186 63F3                   MOV         R15,R3
    00001188 7310                   ADD         #16,R3
    0000118A 410B                   JSR         @R1
    0000118C 2F36                   MOV.L       R3,@-R15
    0000118E 62F3                   MOV         R15,R2
    00001190 D08A                   MOV.L       L1677+22,R0; __muld
    00001192 7210                   ADD         #16,R2
    00001194 400B                   JSR         @R0
    00001196 2F26                   MOV.L       R2,@-R15
    00001198 D385                   MOV.L       L1677+10,R3; __itod
    0000119A 60D3                   MOV         R13,R0
    0000119C 7001                   ADD         #1,R0
    0000119E 7FF8                   ADD         #-8,R15
    000011A0 00C7                   MUL.L       R12,R0
    000011A2 001A                   STS         MACL,R0
    000011A4 00C7                   MUL.L       R12,R0
    000011A6 001A                   STS         MACL,R0
    000011A8 430B                   JSR         @R3
    000011AA 2FF6                   MOV.L       R15,@-R15
    000011AC D284                   MOV.L       L1677+26,R2; __gtd
    000011AE 420B                   JSR         @R2
    000011B0 0009                   NOP
    000011B2 8800                   CMP/EQ      #0,R0
    000011B4 8B89                   BF          L1293
      Monochrome   724                    }
      Monochrome   725            }
      Monochrome   726            ML_horizontal_line(y+plot_y, x-plot_x, x+plot_x, color);
    000011B6 67A3                   MOV         R10,R7
    000011B8 6683                   MOV         R8,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011BA 36DC                   ADD         R13,R6
    000011BC 1F61                   MOV.L       R6,@(4,R15)
    000011BE 6583                   MOV         R8,R5
    000011C0 35D8                   SUB         R13,R5
    000011C2 6493                   MOV         R9,R4
    000011C4 1F53                   MOV.L       R5,@(12,R15)
    000011C6 B8C7                   BSR         _ML_horizontal_line
    000011C8 34EC                   ADD         R14,R4
      Monochrome   727            ML_horizontal_line(y-plot_y, x-plot_x, x+plot_x, color);
    000011CA 67A3                   MOV         R10,R7
    000011CC 56F1                   MOV.L       @(4,R15),R6
    000011CE 6493                   MOV         R9,R4
    000011D0 55F3                   MOV.L       @(12,R15),R5
    000011D2 B8C1                   BSR         _ML_horizontal_line
    000011D4 34E8                   SUB         R14,R4
      Monochrome   728            d2 = radius2*radius2*(plot_x+.5)*(plot_x+.5) + radius1*radius1*(plot_y-1)*(plot_y-1) - radius1*rad
                         +ius1*radius2*radius2;
    000011D6 7FE0                   ADD         #-32,R15
    000011D8 D275                   MOV.L       L1677+10,R2; __itod
    000011DA 50FC                   MOV.L       @(48,R15),R0
    000011DC 7FF8                   ADD         #-8,R15
    000011DE 420B                   JSR         @R2
    000011E0 2FF6                   MOV.L       R15,@-R15
    000011E2 60D3                   MOV         R13,R0
    000011E4 D372                   MOV.L       L1677+10,R3; __itod
    000011E6 7FF0                   ADD         #-16,R15
    000011E8 430B                   JSR         @R3
    000011EA 2FF6                   MOV.L       R15,@-R15
    000011EC D172                   MOV.L       L1677+18,R1; __addd
    000011EE E200                   MOV         #0,R2
    000011F0 2F26                   MOV.L       R2,@-R15
    000011F2 D274                   MOV.L       L1677+30,R2; H'3FE00000
    000011F4 2F26                   MOV.L       R2,@-R15
    000011F6 63F3                   MOV         R15,R3
    000011F8 7310                   ADD         #16,R3
    000011FA 410B                   JSR         @R1
    000011FC 2F36                   MOV.L       R3,@-R15
    000011FE 62F3                   MOV         R15,R2
    00001200 D06E                   MOV.L       L1677+22,R0; __muld
    00001202 7210                   ADD         #16,R2
    00001204 400B                   JSR         @R0
    00001206 2F26                   MOV.L       R2,@-R15
    00001208 D369                   MOV.L       L1677+10,R3; __itod
    0000120A 60D3                   MOV         R13,R0
    0000120C 7FF0                   ADD         #-16,R15
    0000120E 430B                   JSR         @R3
    00001210 2FF6                   MOV.L       R15,@-R15
    00001212 E200                   MOV         #0,R2
    00001214 D168                   MOV.L       L1677+18,R1; __addd
    00001216 2F26                   MOV.L       R2,@-R15
    00001218 D26A                   MOV.L       L1677+30,R2; H'3FE00000
    0000121A 2F26                   MOV.L       R2,@-R15
    0000121C 63F3                   MOV         R15,R3
    0000121E 7310                   ADD         #16,R3
    00001220 410B                   JSR         @R1
    00001222 2F36                   MOV.L       R3,@-R15
    00001224 D065                   MOV.L       L1677+22,R0; __muld




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001226 62F3                   MOV         R15,R2
    00001228 7210                   ADD         #16,R2
    0000122A 400B                   JSR         @R0
    0000122C 2F26                   MOV.L       R2,@-R15
    0000122E 64E3                   MOV         R14,R4
    00001230 D35F                   MOV.L       L1677+10,R3; __itod
    00001232 7FF8                   ADD         #-8,R15
    00001234 74FF                   ADD         #-1,R4
    00001236 0447                   MUL.L       R4,R4
    00001238 001A                   STS         MACL,R0
    0000123A 00B7                   MUL.L       R11,R0
    0000123C 001A                   STS         MACL,R0
    0000123E 00B7                   MUL.L       R11,R0
    00001240 001A                   STS         MACL,R0
    00001242 430B                   JSR         @R3
    00001244 2FF6                   MOV.L       R15,@-R15
    00001246 62F3                   MOV         R15,R2
    00001248 D15B                   MOV.L       L1677+18,R1; __addd
    0000124A 7210                   ADD         #16,R2
    0000124C 410B                   JSR         @R1
    0000124E 2F26                   MOV.L       R2,@-R15
    00001250 50F6                   MOV.L       @(24,R15),R0
    00001252 7FF8                   ADD         #-8,R15
    00001254 D356                   MOV.L       L1677+10,R3; __itod
    00001256 00C7                   MUL.L       R12,R0
    00001258 001A                   STS         MACL,R0
    0000125A 00C7                   MUL.L       R12,R0
    0000125C 001A                   STS         MACL,R0
    0000125E 430B                   JSR         @R3
    00001260 2FF6                   MOV.L       R15,@-R15
    00001262 62F3                   MOV         R15,R2
    00001264 D158                   MOV.L       L1677+34,R1; __subdr
    00001266 7210                   ADD         #16,R2
    00001268 410B                   JSR         @R1
    0000126A 2F26                   MOV.L       R2,@-R15
    0000126C D357                   MOV.L       L1677+38,R3; __dtos
    0000126E 430B                   JSR         @R3
    00001270 0009                   NOP
      Monochrome   729            while(plot_y > 0)
    00001272 4E15                   CMP/PL      R14
    00001274 2F02                   MOV.L       R0,@R15
    00001276 53F3                   MOV.L       @(12,R15),R3
    00001278 1F32                   MOV.L       R3,@(8,R15)
    0000127A 52F1                   MOV.L       @(4,R15),R2
    0000127C 1F24                   MOV.L       R2,@(16,R15)
    0000127E 53F3                   MOV.L       @(12,R15),R3
    00001280 1F31                   MOV.L       R3,@(4,R15)
    00001282 8B47                   BF          L1290
    00001284              L1297:                            
      Monochrome   730            {
      Monochrome   731                    if(d2 < 0)
    00001284 61F2                   MOV.L       @R15,R1
    00001286 D252                   MOV.L       L1677+42,R2; __lts
    00001288 420B                   JSR         @R2
    0000128A E000                   MOV         #0,R0
    0000128C 8800                   CMP/EQ      #0,R0
    0000128E 8921                   BT          L1298




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   732                    {
      Monochrome   733                            d2 += radius2*radius2*(2*plot_x+2) + radius1*radius1*(-2*plot_y+3);
    00001290 60D3                   MOV         R13,R0
    00001292 4000                   SHLL        R0
    00001294 7002                   ADD         #2,R0
    00001296 63E3                   MOV         R14,R3
    00001298 00C7                   MUL.L       R12,R0
    0000129A E203                   MOV         #3,R2
    0000129C 001A                   STS         MACL,R0
    0000129E 4300                   SHLL        R3
    000012A0 00C7                   MUL.L       R12,R0
    000012A2 3238                   SUB         R3,R2
    000012A4 D340                   MOV.L       L1677+2,R3 ; __itos
    000012A6 001A                   STS         MACL,R0
    000012A8 02B7                   MUL.L       R11,R2
    000012AA 021A                   STS         MACL,R2
    000012AC 02B7                   MUL.L       R11,R2
    000012AE 021A                   STS         MACL,R2
    000012B0 430B                   JSR         @R3
    000012B2 302C                   ADD         R2,R0
    000012B4 D23D                   MOV.L       L1677+6,R2 ; __adds
    000012B6 420B                   JSR         @R2
    000012B8 61F2                   MOV.L       @R15,R1
      Monochrome   734                            plot_y--;
    000012BA 7EFF                   ADD         #-1,R14
    000012BC 2F02                   MOV.L       R0,@R15
      Monochrome   735                            plot_x++;
    000012BE 7D01                   ADD         #1,R13
    000012C0 53F2                   MOV.L       @(8,R15),R3
    000012C2 73FF                   ADD         #-1,R3
    000012C4 1F32                   MOV.L       R3,@(8,R15)
    000012C6 52F4                   MOV.L       @(16,R15),R2
    000012C8 7201                   ADD         #1,R2
    000012CA 1F24                   MOV.L       R2,@(16,R15)
    000012CC 51F1                   MOV.L       @(4,R15),R1
    000012CE 71FF                   ADD         #-1,R1
    000012D0 A00F                   BRA         L1299
    000012D2 1F11                   MOV.L       R1,@(4,R15)
    000012D4              L1298:                            
      Monochrome   736                    } else {
      Monochrome   737                            d2 += radius1*radius1*(-2*plot_y+3);
    000012D4 D334                   MOV.L       L1677+2,R3 ; __itos
    000012D6 62E3                   MOV         R14,R2
    000012D8 4200                   SHLL        R2
    000012DA E003                   MOV         #3,R0
    000012DC 3028                   SUB         R2,R0
    000012DE 00B7                   MUL.L       R11,R0
    000012E0 001A                   STS         MACL,R0
    000012E2 00B7                   MUL.L       R11,R0
    000012E4 430B                   JSR         @R3
    000012E6 001A                   STS         MACL,R0
    000012E8 D230                   MOV.L       L1677+6,R2 ; __adds
    000012EA 420B                   JSR         @R2
    000012EC 61F2                   MOV.L       @R15,R1
      Monochrome   738                            plot_y--;
    000012EE 7EFF                   ADD         #-1,R14
    000012F0 2F02                   MOV.L       R0,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012F2              L1299:                            
      Monochrome   739                    }
      Monochrome   740                    ML_horizontal_line(y+plot_y, x-plot_x, x+plot_x, color);
    000012F2 67A3                   MOV         R10,R7
    000012F4 55F1                   MOV.L       @(4,R15),R5
    000012F6 6493                   MOV         R9,R4
    000012F8 6683                   MOV         R8,R6
    000012FA 36DC                   ADD         R13,R6
    000012FC B82C                   BSR         _ML_horizontal_line
    000012FE 34EC                   ADD         R14,R4
      Monochrome   741                    if(plot_y > 0)
    00001300 4E15                   CMP/PL      R14
    00001302 8B05                   BF          L1300
      Monochrome   742                            ML_horizontal_line(y-plot_y, x-plot_x, x+plot_x, color);
    00001304 56F4                   MOV.L       @(16,R15),R6
    00001306 6493                   MOV         R9,R4
    00001308 55F2                   MOV.L       @(8,R15),R5
    0000130A 67A3                   MOV         R10,R7
    0000130C B824                   BSR         _ML_horizontal_line
    0000130E 34E8                   SUB         R14,R4
    00001310              L1300:                            
    00001310 4E15                   CMP/PL      R14
    00001312 89B7                   BT          L1297
    00001314              L1290:                            
      Monochrome   743            }
      Monochrome   744    }
    00001314 7F14                   ADD         #20,R15
    00001316 4F16                   LDS.L       @R15+,MACL
    00001318 4F26                   LDS.L       @R15+,PR
    0000131A 68F6                   MOV.L       @R15+,R8
    0000131C 69F6                   MOV.L       @R15+,R9
    0000131E 6AF6                   MOV.L       @R15+,R10
    00001320 6BF6                   MOV.L       @R15+,R11
    00001322 6CF6                   MOV.L       @R15+,R12
    00001324 6DF6                   MOV.L       @R15+,R13
    00001326 000B                   RTS
    00001328 6EF6                   MOV.L       @R15+,R14
      Monochrome   745    #endif
      Monochrome   746    
      Monochrome   747    #ifdef ML_FILLED_ELLIPSE_IN_RECT
      Monochrome   748    void ML_filled_ellipse_in_rect(int x1, int y1, int x2, int y2, ML_Color color)
    0000132A              _ML_filled_ellipse_in_rect:      ; function: ML_filled_ellipse_in_rect
                                                           ; frame size=24
    0000132A 2FE6                   MOV.L       R14,@-R15
    0000132C 2FD6                   MOV.L       R13,@-R15
    0000132E 6E43                   MOV         R4,R14
    00001330 2FC6                   MOV.L       R12,@-R15
      Monochrome   749    {
      Monochrome   750            int radius1, radius2;
      Monochrome   751            if(x1 > x2)
    00001332 3E67                   CMP/GT      R6,R14
    00001334 2FB6                   MOV.L       R11,@-R15
    00001336 4F22                   STS.L       PR,@-R15
    00001338 8F03                   BF/S        L1301
    0000133A 6D53                   MOV         R5,R13
      Monochrome   752            {
      Monochrome   753                    int tmp = x1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000133C 64E3                   MOV         R14,R4
      Monochrome   754                    x1 = x2;
    0000133E 6E63                   MOV         R6,R14
      Monochrome   755                    x2 = tmp;
    00001340 6643                   MOV         R4,R6
    00001342              L1301:                            
      Monochrome   756            }
      Monochrome   757            if(y1 > y2)
    00001342 3D77                   CMP/GT      R7,R13
    00001344 8F03                   BF/S        L1302
      Monochrome   758            {
      Monochrome   759                    int tmp = y1;
      Monochrome   760                    y1 = y2;
      Monochrome   761                    y2 = tmp;
      Monochrome   762            }
      Monochrome   763            radius1 = (x2-x1)/2;
    00001346 36E8                   SUB         R14,R6
    00001348 64D3                   MOV         R13,R4
    0000134A 6D73                   MOV         R7,R13
    0000134C 6743                   MOV         R4,R7
    0000134E              L1302:                            
    0000134E 6B63                   MOV         R6,R11
      Monochrome   764            radius2 = (y2-y1)/2;
      Monochrome   765            ML_filled_ellipse(x1+radius1, y1+radius2, radius1, radius2, color);
    00001350 52F5                   MOV.L       @(20,R15),R2
    00001352 65D3                   MOV         R13,R5
    00001354 2F26                   MOV.L       R2,@-R15
    00001356 64E3                   MOV         R14,R4
    00001358 E300                   MOV         #0,R3
    0000135A 33B7                   CMP/GT      R11,R3
    0000135C 3B3E                   ADDC        R3,R11
    0000135E 4B21                   SHAR        R11
    00001360 37D8                   SUB         R13,R7
    00001362 6C73                   MOV         R7,R12
    00001364 33C7                   CMP/GT      R12,R3
    00001366 3C3E                   ADDC        R3,R12
    00001368 4C21                   SHAR        R12
    0000136A 67C3                   MOV         R12,R7
    0000136C 66B3                   MOV         R11,R6
    0000136E 35CC                   ADD         R12,R5
    00001370 BE7D                   BSR         _ML_filled_ellipse
    00001372 34BC                   ADD         R11,R4
      Monochrome   766    }
    00001374 7F04                   ADD         #4,R15
    00001376 4F26                   LDS.L       @R15+,PR
    00001378 6BF6                   MOV.L       @R15+,R11
    0000137A 6CF6                   MOV.L       @R15+,R12
    0000137C 6DF6                   MOV.L       @R15+,R13
    0000137E 000B                   RTS
    00001380 6EF6                   MOV.L       @R15+,R14
      Monochrome   767    #endif
      Monochrome   768    
      Monochrome   769    #ifdef ML_HORIZONTAL_SCROLL
      Monochrome   770    void ML_horizontal_scroll(int scroll)
    00001382              _ML_horizontal_scroll:           ; function: ML_horizontal_scroll
                                                           ; frame size=80
    00001382 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001384 2FD6                   MOV.L       R13,@-R15
    00001386 2FC6                   MOV.L       R12,@-R15
    00001388 2FB6                   MOV.L       R11,@-R15
    0000138A 2FA6                   MOV.L       R10,@-R15
    0000138C 2F96                   MOV.L       R9,@-R15
    0000138E 2F86                   MOV.L       R8,@-R15
    00001390 4F22                   STS.L       PR,@-R15
    00001392 7FD0                   ADD         #-48,R15
      Monochrome   771    {
      Monochrome   772            int i, j;
      Monochrome   773            char line[16], shift, *vram;
      Monochrome   774            unsigned char next;
      Monochrome   775            unsigned short word;
      Monochrome   776            vram = ML_vram_adress();
    00001394 D30F                   MOV.L       L1677+46,R3; _ML_vram_adress
    00001396 430B                   JSR         @R3
    00001398 6C43                   MOV         R4,R12
    0000139A 6E03                   MOV         R0,R14
      Monochrome   777            scroll %= 128;
    0000139C 4C11                   CMP/PZ      R12
    0000139E 8F1B                   BF/S        L1303
    000013A0 E37F                   MOV         #127,R3
    000013A2 A01E                   BRA         L1304
    000013A4 2C39                   AND         R3,R12
    000013A6              L1677:                            
    000013A6 0000                   .DATA.W     0
    000013A8 <00000000>             .DATA.L     __itos
    000013AC <00000000>             .DATA.L     __adds
    000013B0 <00000000>             .DATA.L     __itod
    000013B4 BFE00000               .DATA.L     H'BFE00000
    000013B8 <00000000>             .DATA.L     __addd
    000013BC <00000000>             .DATA.L     __muld
    000013C0 <00000000>             .DATA.L     __gtd
    000013C4 3FE00000               .DATA.L     H'3FE00000
    000013C8 <00000000>             .DATA.L     __subdr
    000013CC <00000000>             .DATA.L     __dtos
    000013D0 <00000000>             .DATA.L     __lts
    000013D4 <00000000>             .DATA.L     _ML_vram_adress
    000013D8              L1303:                            
    000013D8 6CC7                   NOT         R12,R12
    000013DA 7C01                   ADD         #1,R12
    000013DC 2C39                   AND         R3,R12
    000013DE 6CC7                   NOT         R12,R12
    000013E0 7C01                   ADD         #1,R12
    000013E2              L1304:                            
      Monochrome   778            shift = 8-(scroll&7);
    000013E2 E107                   MOV         #7,R1
    000013E4 21C9                   AND         R12,R1
    000013E6 E008                   MOV         #8,R0
    000013E8 3018                   SUB         R1,R0
      Monochrome   779            for(i=0 ; i<64 ; i++)
    000013EA E700                   MOV         #0,R7
    000013EC 80F4                   MOV.B       R0,@(4,R15)
    000013EE 6DE3                   MOV         R14,R13
    000013F0 6A73                   MOV         R7,R10
    000013F2 6873                   MOV         R7,R8
    000013F4 69E3                   MOV         R14,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013F6 790F                   ADD         #15,R9
    000013F8 64F3                   MOV         R15,R4
    000013FA 7420                   ADD         #32,R4
    000013FC 6343                   MOV         R4,R3
    000013FE 7310                   ADD         #16,R3
    00001400 1F32                   MOV.L       R3,@(8,R15)
    00001402 4C21                   SHAR        R12
    00001404 4C21                   SHAR        R12
    00001406 4C21                   SHAR        R12
    00001408 1FC4                   MOV.L       R12,@(16,R15)
    0000140A 6243                   MOV         R4,R2
    0000140C 1F25                   MOV.L       R2,@(20,R15)
    0000140E 6123                   MOV         R2,R1
    00001410 710F                   ADD         #15,R1
    00001412 EC0F                   MOV         #15,R12
    00001414 1F16                   MOV.L       R1,@(24,R15)
    00001416 740E                   ADD         #14,R4
    00001418 1F47                   MOV.L       R4,@(28,R15)
    0000141A              L1305:                            
      Monochrome   780            {
      Monochrome   781                    for(j=0 ; j<16 ; j++) line[j] = vram[(i<<4)+((j-(scroll>>3)+15)&15)];
    0000141A 6473                   MOV         R7,R4
    0000141C 53F4                   MOV.L       @(16,R15),R3
    0000141E 66A3                   MOV         R10,R6
    00001420 3438                   SUB         R3,R4
    00001422 6543                   MOV         R4,R5
    00001424 54F5                   MOV.L       @(20,R15),R4
    00001426 4608                   SHLL2       R6
    00001428 750F                   ADD         #15,R5
    0000142A 4608                   SHLL2       R6
    0000142C              L1306:                            
    0000142C 6053                   MOV         R5,R0
    0000142E 20C9                   AND         R12,R0
    00001430 306C                   ADD         R6,R0
    00001432 03EC                   MOV.B       @(R0,R14),R3
    00001434 2430                   MOV.B       R3,@R4
    00001436 7401                   ADD         #1,R4
    00001438 52F2                   MOV.L       @(8,R15),R2
    0000143A 3422                   CMP/HS      R2,R4
    0000143C 8FF6                   BF/S        L1306
    0000143E 7501                   ADD         #1,R5
      Monochrome   782                    next = line[15];
    00001440 56F6                   MOV.L       @(24,R15),R6
      Monochrome   783                    vram[(i<<4)+15] = 0;
      Monochrome   784                    for(j=15 ; j>0 ; j--)
    00001442 6BC3                   MOV         R12,R11
    00001444 6660                   MOV.B       @R6,R6
    00001446 6483                   MOV         R8,R4
    00001448 2970                   MOV.B       R7,@R9
    0000144A 740F                   ADD         #15,R4
    0000144C 55F7                   MOV.L       @(28,R15),R5
    0000144E              L1307:                            
      Monochrome   785                    {
      Monochrome   786                            word = next << shift;
    0000144E 666C                   EXTU.B      R6,R6
    00001450 84F4                   MOV.B       @(4,R15),R0
      Monochrome   787                            next = line[j-1];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   788                            vram[(i<<4)+j] |= *((char*)&word+1);
    00001452 63F3                   MOV         R15,R3
    00001454 460D                   SHLD        R0,R6
    00001456 6043                   MOV         R4,R0
    00001458 2F61                   MOV.W       R6,@R15
    0000145A E201                   MOV         #1,R2
    0000145C 6650                   MOV.B       @R5,R6
    0000145E 7BFF                   ADD         #-1,R11
    00001460 323C                   ADD         R3,R2
    00001462 4B15                   CMP/PL      R11
    00001464 6320                   MOV.B       @R2,R3
    00001466 02EC                   MOV.B       @(R0,R14),R2
    00001468 223B                   OR          R3,R2
      Monochrome   789                            vram[(i<<4)+j-1] = *((char*)&word);
    0000146A 63F3                   MOV         R15,R3
    0000146C 0E24                   MOV.B       R2,@(R0,R14)
    0000146E 70FF                   ADD         #-1,R0
    00001470 1F03                   MOV.L       R0,@(12,R15)
    00001472 6230                   MOV.B       @R3,R2
    00001474 0E24                   MOV.B       R2,@(R0,R14)
    00001476 54F3                   MOV.L       @(12,R15),R4
    00001478 8DE9                   BT/S        L1307
    0000147A 75FF                   ADD         #-1,R5
      Monochrome   790                    }
      Monochrome   791                    word = next << shift;
    0000147C 84F4                   MOV.B       @(4,R15),R0
      Monochrome   792                    vram[(i<<4)] |= *((char*)&word+1);
    0000147E 63F3                   MOV         R15,R3
    00001480 666C                   EXTU.B      R6,R6
    00001482 460D                   SHLD        R0,R6
    00001484 2F61                   MOV.W       R6,@R15
    00001486 7A01                   ADD         #1,R10
    00001488 8431                   MOV.B       @(1,R3),R0
    0000148A 7810                   ADD         #16,R8
    0000148C 62D0                   MOV.B       @R13,R2
      Monochrome   793                    vram[(i<<4)+15] |= *((char*)&word);
    0000148E 63F3                   MOV         R15,R3
    00001490 220B                   OR          R0,R2
    00001492 2D20                   MOV.B       R2,@R13
    00001494 6330                   MOV.B       @R3,R3
    00001496 84DF                   MOV.B       @(15,R13),R0
    00001498 203B                   OR          R3,R0
    0000149A E340                   MOV         #64,R3
    0000149C 80DF                   MOV.B       R0,@(15,R13)
    0000149E 3A33                   CMP/GE      R3,R10
    000014A0 7D10                   ADD         #16,R13
    000014A2 8FBA                   BF/S        L1305
    000014A4 7910                   ADD         #16,R9
      Monochrome   794            }
      Monochrome   795    }
    000014A6 7F30                   ADD         #48,R15
    000014A8 4F26                   LDS.L       @R15+,PR
    000014AA 68F6                   MOV.L       @R15+,R8
    000014AC 69F6                   MOV.L       @R15+,R9
    000014AE 6AF6                   MOV.L       @R15+,R10
    000014B0 6BF6                   MOV.L       @R15+,R11
    000014B2 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014B4 6DF6                   MOV.L       @R15+,R13
    000014B6 000B                   RTS
    000014B8 6EF6                   MOV.L       @R15+,R14
      Monochrome   796    #endif
      Monochrome   797    
      Monochrome   798    #ifdef ML_VERTICAL_SCROLL
      Monochrome   799    void ML_vertical_scroll(int scroll)
    000014BA              _ML_vertical_scroll:             ; function: ML_vertical_scroll
                                                           ; frame size=104
    000014BA 2FE6                   MOV.L       R14,@-R15
    000014BC 2FD6                   MOV.L       R13,@-R15
    000014BE 2FC6                   MOV.L       R12,@-R15
    000014C0 2FB6                   MOV.L       R11,@-R15
    000014C2 2FA6                   MOV.L       R10,@-R15
    000014C4 2F86                   MOV.L       R8,@-R15
    000014C6 4F22                   STS.L       PR,@-R15
      Monochrome   800    {
      Monochrome   801            int i, j;
      Monochrome   802            char column[64], *vram = ML_vram_adress();
    000014C8 D31F                   MOV.L       L1678,R3   ; _ML_vram_adress
    000014CA 7FB4                   ADD         #-76,R15
    000014CC 430B                   JSR         @R3
    000014CE 2F42                   MOV.L       R4,@R15
    000014D0 1F01                   MOV.L       R0,@(4,R15)
      Monochrome   803            scroll %= 64;
    000014D2 60F2                   MOV.L       @R15,R0
    000014D4 4011                   CMP/PZ      R0
    000014D6 8B01                   BF          L1308
    000014D8 A005                   BRA         L1309
    000014DA C93F                   AND         #63,R0
    000014DC              L1308:                            
    000014DC 6007                   NOT         R0,R0
    000014DE 7001                   ADD         #1,R0
    000014E0 C93F                   AND         #63,R0
    000014E2 6007                   NOT         R0,R0
    000014E4 7001                   ADD         #1,R0
    000014E6              L1309:                            
      Monochrome   804            for(i=0 ; i<16 ; i++)
    000014E6 EC00                   MOV         #0,R12
    000014E8 2F02                   MOV.L       R0,@R15
    000014EA 6EF3                   MOV         R15,R14
    000014EC 67C3                   MOV         R12,R7
    000014EE 7E0C                   ADD         #12,R14
    000014F0 68E3                   MOV         R14,R8
    000014F2 7840                   ADD         #64,R8
    000014F4 EA10                   MOV         #16,R10
    000014F6 EB3F                   MOV         #63,R11
    000014F8 ED40                   MOV         #64,R13
    000014FA 63E3                   MOV         R14,R3
    000014FC 1F32                   MOV.L       R3,@(8,R15)
    000014FE              L1310:                            
    000014FE 51F1                   MOV.L       @(4,R15),R1
    00001500 54F2                   MOV.L       @(8,R15),R4
    00001502 317C                   ADD         R7,R1
    00001504 6513                   MOV         R1,R5
      Monochrome   805            {
      Monochrome   806                    for(j=0 ; j<64 ; j++) column[j] = vram[(j<<4)+i];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001506              L1311:                            
    00001506 6250                   MOV.B       @R5,R2
    00001508 2420                   MOV.B       R2,@R4
    0000150A 7401                   ADD         #1,R4
    0000150C 3482                   CMP/HS      R8,R4
    0000150E 8FFA                   BF/S        L1311
    00001510 7510                   ADD         #16,R5
      Monochrome   807                    for(j=0 ; j<64 ; j++) vram[(j<<4)+i] = column[(j-scroll+64)&63];
    00001512 66C3                   MOV         R12,R6
    00001514 63F2                   MOV.L       @R15,R3
    00001516 64C3                   MOV         R12,R4
    00001518 3438                   SUB         R3,R4
    0000151A 7440                   ADD         #64,R4
    0000151C 6513                   MOV         R1,R5
    0000151E              L1312:                            
    0000151E 6043                   MOV         R4,R0
    00001520 20B9                   AND         R11,R0
    00001522 7601                   ADD         #1,R6
    00001524 03EC                   MOV.B       @(R0,R14),R3
    00001526 7401                   ADD         #1,R4
    00001528 2530                   MOV.B       R3,@R5
    0000152A 36D3                   CMP/GE      R13,R6
    0000152C 8FF7                   BF/S        L1312
    0000152E 7510                   ADD         #16,R5
    00001530 7701                   ADD         #1,R7
    00001532 37A3                   CMP/GE      R10,R7
    00001534 8BE3                   BF          L1310
      Monochrome   808            }
      Monochrome   809    }
    00001536 7F4C                   ADD         #76,R15
    00001538 4F26                   LDS.L       @R15+,PR
    0000153A 68F6                   MOV.L       @R15+,R8
    0000153C 6AF6                   MOV.L       @R15+,R10
    0000153E 6BF6                   MOV.L       @R15+,R11
    00001540 6CF6                   MOV.L       @R15+,R12
    00001542 6DF6                   MOV.L       @R15+,R13
    00001544 000B                   RTS
    00001546 6EF6                   MOV.L       @R15+,R14
    00001548              L1678:                            
    00001548 <00000000>             .DATA.L     _ML_vram_adress
      Monochrome   810    #endif
      Monochrome   811    
      Monochrome   812    #ifdef ML_BMP_OR
      Monochrome   813    void ML_bmp_or(const unsigned char *bmp, int x, int y, int width, int height)
    0000154C              _ML_bmp_or:                      ; function: ML_bmp_or
                                                           ; frame size=60
    0000154C 2FE6                   MOV.L       R14,@-R15
    0000154E 6E63                   MOV         R6,R14
    00001550 2FD6                   MOV.L       R13,@-R15
    00001552 2FC6                   MOV.L       R12,@-R15
    00001554 2FB6                   MOV.L       R11,@-R15
    00001556 6B43                   MOV         R4,R11
    00001558 2FA6                   MOV.L       R10,@-R15
    0000155A 6A53                   MOV         R5,R10
    0000155C 2F96                   MOV.L       R9,@-R15
    0000155E 6973                   MOV         R7,R9
    00001560 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   814    {
      Monochrome   815            unsigned short line;
      Monochrome   816            char shift, *screen, *p=(char*)&line;
      Monochrome   817            int i, j, begin=0, end=height, real_width=(width-1>>3<<3)+8;
    00001562 6C93                   MOV         R9,R12
    00001564 4F22                   STS.L       PR,@-R15
    00001566 E800                   MOV         #0,R8
    00001568 4F12                   STS.L       MACL,@-R15
    0000156A 7CFF                   ADD         #-1,R12
    0000156C 7FE8                   ADD         #-24,R15
    0000156E 6DF3                   MOV         R15,R13
    00001570 54FF                   MOV.L       @(60,R15),R4
    00001572 4C21                   SHAR        R12
    00001574 2F82                   MOV.L       R8,@R15
    00001576 7D04                   ADD         #4,R13
    00001578 1F45                   MOV.L       R4,@(20,R15)
    0000157A 4C21                   SHAR        R12
    0000157C 4C21                   SHAR        R12
    0000157E 62C3                   MOV         R12,R2
    00001580 4208                   SHLL2       R2
    00001582 4200                   SHLL        R2
    00001584 7208                   ADD         #8,R2
      Monochrome   818            if(!bmp || x<0 || x>128-width || y<1-height || y>63 || width<1 || height<1) return;
    00001586 2BB8                   TST         R11,R11
    00001588 8F02                   BF/S        L1679
    0000158A 1F23                   MOV.L       R2,@(12,R15)
    0000158C A085                   BRA         L1315
    0000158E 0009                   NOP
    00001590              L1679:                            
    00001590 4A11                   CMP/PZ      R10
    00001592 8901                   BT          L1680
    00001594 A081                   BRA         L1315
    00001596 0009                   NOP
    00001598              L1680:                            
    00001598 933D                   MOV.W       L1681,R3   ; H'0080
    0000159A 3398                   SUB         R9,R3
    0000159C 3A37                   CMP/GT      R3,R10
    0000159E 8B01                   BF          L1682
    000015A0 A07B                   BRA         L1315
    000015A2 0009                   NOP
    000015A4              L1682:                            
    000015A4 E301                   MOV         #1,R3
    000015A6 3348                   SUB         R4,R3
    000015A8 3E33                   CMP/GE      R3,R14
    000015AA 8B76                   BF          L1315
    000015AC E33F                   MOV         #63,R3
    000015AE 3E37                   CMP/GT      R3,R14
    000015B0 8973                   BT          L1315
    000015B2 E001                   MOV         #1,R0
    000015B4 3903                   CMP/GE      R0,R9
    000015B6 8B70                   BF          L1315
    000015B8 3403                   CMP/GE      R0,R4
    000015BA 8B6E                   BF          L1315
      Monochrome   819            if(y < 0) begin = -y;
    000015BC 4E11                   CMP/PZ      R14
    000015BE 8D02                   BT/S        L1316
      Monochrome   820            if(y+height > 64) end = 64-y;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015C0 E540                   MOV         #64,R5
    000015C2 62EB                   NEG         R14,R2
    000015C4 2F22                   MOV.L       R2,@R15
    000015C6              L1316:                            
    000015C6 34EC                   ADD         R14,R4
    000015C8 3457                   CMP/GT      R5,R4
    000015CA 8B01                   BF          L1317
    000015CC 35E8                   SUB         R14,R5
    000015CE 1F55                   MOV.L       R5,@(20,R15)
    000015D0              L1317:                            
      Monochrome   821            shift = 8-(x&7);
    000015D0 E307                   MOV         #7,R3
    000015D2 23A9                   AND         R10,R3
    000015D4 E208                   MOV         #8,R2
    000015D6 3238                   SUB         R3,R2
      Monochrome   822            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000015D8 D30F                   MOV.L       L1681+2,R3 ; _ML_vram_adress
    000015DA E010                   MOV         #16,R0
    000015DC 430B                   JSR         @R3
    000015DE 0F24                   MOV.B       R2,@(R0,R15)
    000015E0 61F2                   MOV.L       @R15,R1
    000015E2 63A3                   MOV         R10,R3
    000015E4 3E1C                   ADD         R1,R14
    000015E6 4E08                   SHLL2       R14
    000015E8 4E08                   SHLL2       R14
    000015EA 30EC                   ADD         R14,R0
    000015EC 4321                   SHAR        R3
    000015EE 4321                   SHAR        R3
    000015F0 4321                   SHAR        R3
    000015F2 6503                   MOV         R0,R5
    000015F4 353C                   ADD         R3,R5
      Monochrome   823            for(i=begin ; i<end ; i++)
    000015F6 6613                   MOV         R1,R6
    000015F8 63D3                   MOV         R13,R3
    000015FA 7301                   ADD         #1,R3
    000015FC 2F32                   MOV.L       R3,@R15
    000015FE 54F3                   MOV.L       @(12,R15),R4
    00001600 6243                   MOV         R4,R2
    00001602 4221                   SHAR        R2
    00001604 4221                   SHAR        R2
    00001606 4221                   SHAR        R2
    00001608 1F22                   MOV.L       R2,@(8,R15)
    0000160A 6143                   MOV         R4,R1
    0000160C 3198                   SUB         R9,R1
    0000160E E9FF                   MOV         #-1,R9
    00001610 491C                   SHAD        R1,R9
    00001612 A03F                   BRA         L1318
    00001614 3A4C                   ADD         R4,R10
    00001616              L1681:                            
    00001616 0080                   .DATA.W     H'0080
    00001618 <00000000>             .DATA.L     _ML_vram_adress
    0000161C              L1319:                            
    0000161C 57F2                   MOV.L       @(8,R15),R7
    0000161E E010                   MOV         #16,R0
    00001620 0767                   MUL.L       R6,R7
    00001622 4C15                   CMP/PL      R12
      Monochrome   824            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   825                    for(j=0 ; j<width-1>>3 ; j++)
    00001624 6483                   MOV         R8,R4
    00001626 071A                   STS         MACL,R7
    00001628 8F18                   BF/S        L1320
    0000162A 0EFC                   MOV.B       @(R0,R15),R14
    0000162C              L1321:                            
      Monochrome   826                    {
      Monochrome   827                            line = bmp[i*(real_width>>3)+j]<<shift;
    0000162C 6073                   MOV         R7,R0
    0000162E 304C                   ADD         R4,R0
    00001630 00BC                   MOV.B       @(R0,R11),R0
    00001632 600C                   EXTU.B      R0,R0
    00001634 40ED                   SHLD        R14,R0
    00001636 81F2                   MOV.W       R0,@(4,R15)
      Monochrome   828                            screen[j] |= *p;
    00001638 63D0                   MOV.B       @R13,R3
    0000163A 6043                   MOV         R4,R0
    0000163C 025C                   MOV.B       @(R0,R5),R2
    0000163E 223B                   OR          R3,R2
    00001640 0524                   MOV.B       R2,@(R0,R5)
      Monochrome   829                            if(shift!=8) screen[j+1] |= *(p+1);
    00001642 60E3                   MOV         R14,R0
    00001644 8808                   CMP/EQ      #8,R0
    00001646 8906                   BT          L1322
    00001648 62F2                   MOV.L       @R15,R2
    0000164A 6343                   MOV         R4,R3
    0000164C 6220                   MOV.B       @R2,R2
    0000164E 335C                   ADD         R5,R3
    00001650 8431                   MOV.B       @(1,R3),R0
    00001652 202B                   OR          R2,R0
    00001654 8031                   MOV.B       R0,@(1,R3)
    00001656              L1322:                            
    00001656 7401                   ADD         #1,R4
    00001658 34C3                   CMP/GE      R12,R4
    0000165A 8BE7                   BF          L1321
    0000165C              L1320:                            
      Monochrome   830                    }
      Monochrome   831                    line = (bmp[i*(real_width>>3)+j] & -1<<(real_width-width))<<shift;
    0000165C 50F2                   MOV.L       @(8,R15),R0
      Monochrome   832                    screen[j] |= *p;
    0000165E 6743                   MOV         R4,R7
    00001660 0067                   MUL.L       R6,R0
    00001662 375C                   ADD         R5,R7
    00001664 001A                   STS         MACL,R0
    00001666 304C                   ADD         R4,R0
    00001668 00BC                   MOV.B       @(R0,R11),R0
    0000166A 600C                   EXTU.B      R0,R0
    0000166C 2099                   AND         R9,R0
    0000166E 40EC                   SHAD        R14,R0
    00001670 81F2                   MOV.W       R0,@(4,R15)
      Monochrome   833                    if(shift!=8 && x+real_width<129) screen[j+1] |= *(p+1);
    00001672 60E3                   MOV         R14,R0
    00001674 63D0                   MOV.B       @R13,R3
    00001676 8808                   CMP/EQ      #8,R0
    00001678 6270                   MOV.B       @R7,R2
    0000167A 223B                   OR          R3,R2
    0000167C 8D08                   BT/S        L1323




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000167E 2720                   MOV.B       R2,@R7
    00001680 9216                   MOV.W       L1683,R2   ; H'0081
    00001682 3A23                   CMP/GE      R2,R10
    00001684 8904                   BT          L1323
    00001686 61F2                   MOV.L       @R15,R1
    00001688 8471                   MOV.B       @(1,R7),R0
    0000168A 6310                   MOV.B       @R1,R3
    0000168C 203B                   OR          R3,R0
    0000168E 8071                   MOV.B       R0,@(1,R7)
    00001690              L1323:                            
      Monochrome   834                    screen += 16;
    00001690 7510                   ADD         #16,R5
    00001692 7601                   ADD         #1,R6
    00001694              L1318:                            
    00001694 53F5                   MOV.L       @(20,R15),R3
    00001696 3633                   CMP/GE      R3,R6
    00001698 8BC0                   BF          L1319
    0000169A              L1315:                            
      Monochrome   835            }
      Monochrome   836    }
    0000169A 7F18                   ADD         #24,R15
    0000169C 4F16                   LDS.L       @R15+,MACL
    0000169E 4F26                   LDS.L       @R15+,PR
    000016A0 68F6                   MOV.L       @R15+,R8
    000016A2 69F6                   MOV.L       @R15+,R9
    000016A4 6AF6                   MOV.L       @R15+,R10
    000016A6 6BF6                   MOV.L       @R15+,R11
    000016A8 6CF6                   MOV.L       @R15+,R12
    000016AA 6DF6                   MOV.L       @R15+,R13
    000016AC 000B                   RTS
    000016AE 6EF6                   MOV.L       @R15+,R14
    000016B0              L1683:                            
    000016B0 0081                   .DATA.W     H'0081
      Monochrome   837    #endif
      Monochrome   838    
      Monochrome   839    #ifdef ML_BMP_AND
      Monochrome   840    void ML_bmp_and(const unsigned char *bmp, int x, int y, int width, int height)
    000016B2              _ML_bmp_and:                     ; function: ML_bmp_and
                                                           ; frame size=60
    000016B2 2FE6                   MOV.L       R14,@-R15
    000016B4 2FD6                   MOV.L       R13,@-R15
    000016B6 6E63                   MOV         R6,R14
    000016B8 2FC6                   MOV.L       R12,@-R15
    000016BA 2FB6                   MOV.L       R11,@-R15
    000016BC 2FA6                   MOV.L       R10,@-R15
    000016BE 6B53                   MOV         R5,R11
    000016C0 2F96                   MOV.L       R9,@-R15
    000016C2 6A43                   MOV         R4,R10
    000016C4 2F86                   MOV.L       R8,@-R15
      Monochrome   841    {
      Monochrome   842            unsigned short line;
      Monochrome   843            char shift, *screen, *p=(char*)&line;
      Monochrome   844            int i, j, begin=0, end=height, real_width=(width-1>>3<<3)+8;
    000016C6 E800                   MOV         #0,R8
    000016C8 4F22                   STS.L       PR,@-R15
    000016CA 6983                   MOV         R8,R9
    000016CC 4F12                   STS.L       MACL,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016CE 7FE8                   ADD         #-24,R15
    000016D0 1F71                   MOV.L       R7,@(4,R15)
    000016D2 6DF3                   MOV         R15,R13
    000016D4 54FF                   MOV.L       @(60,R15),R4
    000016D6 1F45                   MOV.L       R4,@(20,R15)
    000016D8 5CF1                   MOV.L       @(4,R15),R12
    000016DA 7CFF                   ADD         #-1,R12
    000016DC 4C21                   SHAR        R12
    000016DE 4C21                   SHAR        R12
    000016E0 4C21                   SHAR        R12
    000016E2 62C3                   MOV         R12,R2
    000016E4 4208                   SHLL2       R2
    000016E6 4200                   SHLL        R2
    000016E8 7208                   ADD         #8,R2
      Monochrome   845            if(!bmp || x<0 || x>128-width || y<1-height || y>63 || width<1 || height<1) return;
    000016EA 2AA8                   TST         R10,R10
    000016EC 8F02                   BF/S        L1684
    000016EE 1F24                   MOV.L       R2,@(16,R15)
    000016F0 A08E                   BRA         L1326
    000016F2 0009                   NOP
    000016F4              L1684:                            
    000016F4 4B11                   CMP/PZ      R11
    000016F6 8901                   BT          L1685
    000016F8 A08A                   BRA         L1326
    000016FA 0009                   NOP
    000016FC              L1685:                            
    000016FC 53F1                   MOV.L       @(4,R15),R3
    000016FE 9140                   MOV.W       L1686,R1   ; H'0080
    00001700 3138                   SUB         R3,R1
    00001702 3B17                   CMP/GT      R1,R11
    00001704 8B01                   BF          L1687
    00001706 A083                   BRA         L1326
    00001708 0009                   NOP
    0000170A              L1687:                            
    0000170A E001                   MOV         #1,R0
    0000170C 3048                   SUB         R4,R0
    0000170E 3E03                   CMP/GE      R0,R14
    00001710 8901                   BT          L1688
    00001712 A07D                   BRA         L1326
    00001714 0009                   NOP
    00001716              L1688:                            
    00001716 E13F                   MOV         #63,R1
    00001718 3E17                   CMP/GT      R1,R14
    0000171A 8979                   BT          L1326
    0000171C E001                   MOV         #1,R0
    0000171E 3303                   CMP/GE      R0,R3
    00001720 8B76                   BF          L1326
    00001722 E201                   MOV         #1,R2
    00001724 3423                   CMP/GE      R2,R4
    00001726 8B73                   BF          L1326
      Monochrome   846            if(y < 0) begin = -y;
    00001728 4E11                   CMP/PZ      R14
    0000172A 8D01                   BT/S        L1327
      Monochrome   847            if(y+height > 64) end = 64-y;
    0000172C E540                   MOV         #64,R5
    0000172E 69EB                   NEG         R14,R9
    00001730              L1327:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001730 34EC                   ADD         R14,R4
    00001732 3457                   CMP/GT      R5,R4
    00001734 8F02                   BF/S        L1328
      Monochrome   848            shift = 8-(x&7);
    00001736 E307                   MOV         #7,R3
    00001738 35E8                   SUB         R14,R5
    0000173A 1F55                   MOV.L       R5,@(20,R15)
    0000173C              L1328:                            
    0000173C 23B9                   AND         R11,R3
    0000173E E008                   MOV         #8,R0
    00001740 3038                   SUB         R3,R0
      Monochrome   849            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00001742 D311                   MOV.L       L1686+6,R3 ; _ML_vram_adress
    00001744 430B                   JSR         @R3
    00001746 80FC                   MOV.B       R0,@(12,R15)
    00001748 3E9C                   ADD         R9,R14
    0000174A 4E08                   SHLL2       R14
    0000174C 4E08                   SHLL2       R14
    0000174E 30EC                   ADD         R14,R0
    00001750 62B3                   MOV         R11,R2
    00001752 4221                   SHAR        R2
    00001754 4221                   SHAR        R2
    00001756 4221                   SHAR        R2
    00001758 6503                   MOV         R0,R5
    0000175A 352C                   ADD         R2,R5
    0000175C 52F4                   MOV.L       @(16,R15),R2
    0000175E E308                   MOV         #8,R3
      Monochrome   850            for(i=begin ; i<end ; i++)
    00001760 6693                   MOV         R9,R6
    00001762 69D3                   MOV         R13,R9
    00001764 7901                   ADD         #1,R9
    00001766 4221                   SHAR        R2
    00001768 4221                   SHAR        R2
    0000176A 4221                   SHAR        R2
    0000176C 1F22                   MOV.L       R2,@(8,R15)
    0000176E 50F1                   MOV.L       @(4,R15),R0
    00001770 C907                   AND         #7,R0
    00001772 3308                   SUB         R0,R3
    00001774 9006                   MOV.W       L1686+2,R0 ; H'00FF
    00001776 633B                   NEG         R3,R3
    00001778 403C                   SHAD        R3,R0
    0000177A 80F4                   MOV.B       R0,@(4,R15)
    0000177C 53F4                   MOV.L       @(16,R15),R3
    0000177E A044                   BRA         L1329
    00001780 3B3C                   ADD         R3,R11
    00001782              L1686:                            
    00001782 0080                   .DATA.W     H'0080
    00001784 00FF                   .DATA.W     H'00FF
    00001786 0000                   .DATA.W     0
    00001788 <00000000>             .DATA.L     _ML_vram_adress
    0000178C              L1330:                            
    0000178C 57F2                   MOV.L       @(8,R15),R7
    0000178E 4C15                   CMP/PL      R12
    00001790 84FC                   MOV.B       @(12,R15),R0
      Monochrome   851            {
      Monochrome   852                    for(j=0 ; j<width-1>>3 ; j++)
    00001792 6483                   MOV         R8,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001794 0767                   MUL.L       R6,R7
    00001796 071A                   STS         MACL,R7
    00001798 8F19                   BF/S        L1331
    0000179A 6E03                   MOV         R0,R14
    0000179C              L1332:                            
      Monochrome   853                    {
      Monochrome   854                            line = ~((unsigned char)~bmp[i*(real_width>>3)+j]<<shift);
    0000179C 6073                   MOV         R7,R0
    0000179E 304C                   ADD         R4,R0
    000017A0 03AC                   MOV.B       @(R0,R10),R3
      Monochrome   855                            screen[j] &= *p;
    000017A2 6043                   MOV         R4,R0
    000017A4 6337                   NOT         R3,R3
    000017A6 633C                   EXTU.B      R3,R3
    000017A8 43ED                   SHLD        R14,R3
    000017AA 6337                   NOT         R3,R3
    000017AC 2F31                   MOV.W       R3,@R15
    000017AE 62D0                   MOV.B       @R13,R2
    000017B0 015C                   MOV.B       @(R0,R5),R1
    000017B2 2129                   AND         R2,R1
    000017B4 0514                   MOV.B       R1,@(R0,R5)
      Monochrome   856                            if(shift!=8) screen[j+1] &= *(p+1);
    000017B6 60E3                   MOV         R14,R0
    000017B8 8808                   CMP/EQ      #8,R0
    000017BA 8905                   BT          L1333
    000017BC 6290                   MOV.B       @R9,R2
    000017BE 6343                   MOV         R4,R3
    000017C0 335C                   ADD         R5,R3
    000017C2 8431                   MOV.B       @(1,R3),R0
    000017C4 2029                   AND         R2,R0
    000017C6 8031                   MOV.B       R0,@(1,R3)
    000017C8              L1333:                            
    000017C8 7401                   ADD         #1,R4
    000017CA 34C3                   CMP/GE      R12,R4
    000017CC 8BE6                   BF          L1332
    000017CE              L1331:                            
      Monochrome   857                    }
      Monochrome   858                    line = ~((unsigned char)~(bmp[i*(real_width>>3)+j] | (unsigned char)-1>>8-(width&7))<<shif
                         +t);
      Monochrome   859                    screen[j] &= *p;
    000017CE 6743                   MOV         R4,R7
    000017D0 50F2                   MOV.L       @(8,R15),R0
    000017D2 375C                   ADD         R5,R7
    000017D4 0067                   MUL.L       R6,R0
    000017D6 001A                   STS         MACL,R0
    000017D8 304C                   ADD         R4,R0
    000017DA 03AC                   MOV.B       @(R0,R10),R3
    000017DC 84F4                   MOV.B       @(4,R15),R0
    000017DE 203B                   OR          R3,R0
    000017E0 6007                   NOT         R0,R0
    000017E2 600C                   EXTU.B      R0,R0
    000017E4 40ED                   SHLD        R14,R0
    000017E6 6007                   NOT         R0,R0
    000017E8 2F01                   MOV.W       R0,@R15
      Monochrome   860                    if(shift!=8 && x+real_width<129) screen[j+1] &= *(p+1);
    000017EA 60E3                   MOV         R14,R0
    000017EC 63D0                   MOV.B       @R13,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017EE 8808                   CMP/EQ      #8,R0
    000017F0 6270                   MOV.B       @R7,R2
    000017F2 2239                   AND         R3,R2
    000017F4 8D07                   BT/S        L1334
    000017F6 2720                   MOV.B       R2,@R7
    000017F8 9215                   MOV.W       L1689,R2   ; H'0081
    000017FA 3B23                   CMP/GE      R2,R11
    000017FC 8903                   BT          L1334
    000017FE 6390                   MOV.B       @R9,R3
    00001800 8471                   MOV.B       @(1,R7),R0
    00001802 2039                   AND         R3,R0
    00001804 8071                   MOV.B       R0,@(1,R7)
    00001806              L1334:                            
      Monochrome   861                    screen += 16;
    00001806 7510                   ADD         #16,R5
    00001808 7601                   ADD         #1,R6
    0000180A              L1329:                            
    0000180A 53F5                   MOV.L       @(20,R15),R3
    0000180C 3633                   CMP/GE      R3,R6
    0000180E 8BBD                   BF          L1330
    00001810              L1326:                            
      Monochrome   862            }
      Monochrome   863    }
    00001810 7F18                   ADD         #24,R15
    00001812 4F16                   LDS.L       @R15+,MACL
    00001814 4F26                   LDS.L       @R15+,PR
    00001816 68F6                   MOV.L       @R15+,R8
    00001818 69F6                   MOV.L       @R15+,R9
    0000181A 6AF6                   MOV.L       @R15+,R10
    0000181C 6BF6                   MOV.L       @R15+,R11
    0000181E 6CF6                   MOV.L       @R15+,R12
    00001820 6DF6                   MOV.L       @R15+,R13
    00001822 000B                   RTS
    00001824 6EF6                   MOV.L       @R15+,R14
    00001826              L1689:                            
    00001826 0081                   .DATA.W     H'0081
      Monochrome   864    #endif
      Monochrome   865    
      Monochrome   866    #ifdef ML_BMP_XOR
      Monochrome   867    void ML_bmp_xor(const unsigned char *bmp, int x, int y, int width, int height)
    00001828              _ML_bmp_xor:                     ; function: ML_bmp_xor
                                                           ; frame size=60
    00001828 2FE6                   MOV.L       R14,@-R15
    0000182A 6E63                   MOV         R6,R14
    0000182C 2FD6                   MOV.L       R13,@-R15
    0000182E 2FC6                   MOV.L       R12,@-R15
    00001830 2FB6                   MOV.L       R11,@-R15
    00001832 6B43                   MOV         R4,R11
    00001834 2FA6                   MOV.L       R10,@-R15
    00001836 6A53                   MOV         R5,R10
    00001838 2F96                   MOV.L       R9,@-R15
    0000183A 6973                   MOV         R7,R9
    0000183C 2F86                   MOV.L       R8,@-R15
      Monochrome   868    {
      Monochrome   869            unsigned short line;
      Monochrome   870            char shift, *screen, *p=(char*)&line;
      Monochrome   871            int i, j, begin=0, end=height, real_width=(width-1>>3<<3)+8;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000183E 6C93                   MOV         R9,R12
    00001840 4F22                   STS.L       PR,@-R15
    00001842 E800                   MOV         #0,R8
    00001844 4F12                   STS.L       MACL,@-R15
    00001846 7CFF                   ADD         #-1,R12
    00001848 7FE8                   ADD         #-24,R15
    0000184A 6DF3                   MOV         R15,R13
    0000184C 54FF                   MOV.L       @(60,R15),R4
    0000184E 4C21                   SHAR        R12
    00001850 2F82                   MOV.L       R8,@R15
    00001852 7D04                   ADD         #4,R13
    00001854 1F45                   MOV.L       R4,@(20,R15)
    00001856 4C21                   SHAR        R12
    00001858 4C21                   SHAR        R12
    0000185A 62C3                   MOV         R12,R2
    0000185C 4208                   SHLL2       R2
    0000185E 4200                   SHLL        R2
    00001860 7208                   ADD         #8,R2
      Monochrome   872            if(!bmp || x<0 || x>128-width || y<1-height || y>63 || width<1 || height<1) return;
    00001862 2BB8                   TST         R11,R11
    00001864 8F02                   BF/S        L1690
    00001866 1F23                   MOV.L       R2,@(12,R15)
    00001868 A085                   BRA         L1337
    0000186A 0009                   NOP
    0000186C              L1690:                            
    0000186C 4A11                   CMP/PZ      R10
    0000186E 8901                   BT          L1691
    00001870 A081                   BRA         L1337
    00001872 0009                   NOP
    00001874              L1691:                            
    00001874 933D                   MOV.W       L1692,R3   ; H'0080
    00001876 3398                   SUB         R9,R3
    00001878 3A37                   CMP/GT      R3,R10
    0000187A 8B01                   BF          L1693
    0000187C A07B                   BRA         L1337
    0000187E 0009                   NOP
    00001880              L1693:                            
    00001880 E301                   MOV         #1,R3
    00001882 3348                   SUB         R4,R3
    00001884 3E33                   CMP/GE      R3,R14
    00001886 8B76                   BF          L1337
    00001888 E33F                   MOV         #63,R3
    0000188A 3E37                   CMP/GT      R3,R14
    0000188C 8973                   BT          L1337
    0000188E E001                   MOV         #1,R0
    00001890 3903                   CMP/GE      R0,R9
    00001892 8B70                   BF          L1337
    00001894 3403                   CMP/GE      R0,R4
    00001896 8B6E                   BF          L1337
      Monochrome   873            if(y < 0) begin = -y;
    00001898 4E11                   CMP/PZ      R14
    0000189A 8D02                   BT/S        L1338
      Monochrome   874            if(y+height > 64) end = 64-y;
    0000189C E540                   MOV         #64,R5
    0000189E 62EB                   NEG         R14,R2
    000018A0 2F22                   MOV.L       R2,@R15
    000018A2              L1338:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018A2 34EC                   ADD         R14,R4
    000018A4 3457                   CMP/GT      R5,R4
    000018A6 8B01                   BF          L1339
    000018A8 35E8                   SUB         R14,R5
    000018AA 1F55                   MOV.L       R5,@(20,R15)
    000018AC              L1339:                            
      Monochrome   875            shift = 8-(x&7);
    000018AC E307                   MOV         #7,R3
    000018AE 23A9                   AND         R10,R3
    000018B0 E208                   MOV         #8,R2
    000018B2 3238                   SUB         R3,R2
      Monochrome   876            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000018B4 D30F                   MOV.L       L1692+2,R3 ; _ML_vram_adress
    000018B6 E010                   MOV         #16,R0
    000018B8 430B                   JSR         @R3
    000018BA 0F24                   MOV.B       R2,@(R0,R15)
    000018BC 61F2                   MOV.L       @R15,R1
    000018BE 63A3                   MOV         R10,R3
    000018C0 3E1C                   ADD         R1,R14
    000018C2 4E08                   SHLL2       R14
    000018C4 4E08                   SHLL2       R14
    000018C6 30EC                   ADD         R14,R0
    000018C8 4321                   SHAR        R3
    000018CA 4321                   SHAR        R3
    000018CC 4321                   SHAR        R3
    000018CE 6503                   MOV         R0,R5
    000018D0 353C                   ADD         R3,R5
      Monochrome   877            for(i=begin ; i<end ; i++)
    000018D2 6613                   MOV         R1,R6
    000018D4 63D3                   MOV         R13,R3
    000018D6 7301                   ADD         #1,R3
    000018D8 2F32                   MOV.L       R3,@R15
    000018DA 54F3                   MOV.L       @(12,R15),R4
    000018DC 6243                   MOV         R4,R2
    000018DE 4221                   SHAR        R2
    000018E0 4221                   SHAR        R2
    000018E2 4221                   SHAR        R2
    000018E4 1F22                   MOV.L       R2,@(8,R15)
    000018E6 6143                   MOV         R4,R1
    000018E8 3198                   SUB         R9,R1
    000018EA E9FF                   MOV         #-1,R9
    000018EC 491C                   SHAD        R1,R9
    000018EE A03F                   BRA         L1340
    000018F0 3A4C                   ADD         R4,R10
    000018F2              L1692:                            
    000018F2 0080                   .DATA.W     H'0080
    000018F4 <00000000>             .DATA.L     _ML_vram_adress
    000018F8              L1341:                            
    000018F8 57F2                   MOV.L       @(8,R15),R7
    000018FA E010                   MOV         #16,R0
    000018FC 0767                   MUL.L       R6,R7
    000018FE 4C15                   CMP/PL      R12
      Monochrome   878            {
      Monochrome   879                    for(j=0 ; j<width-1>>3 ; j++)
    00001900 6483                   MOV         R8,R4
    00001902 071A                   STS         MACL,R7
    00001904 8F18                   BF/S        L1342




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001906 0EFC                   MOV.B       @(R0,R15),R14
    00001908              L1343:                            
      Monochrome   880                    {
      Monochrome   881                            line = bmp[i*(real_width>>3)+j]<<shift;
    00001908 6073                   MOV         R7,R0
    0000190A 304C                   ADD         R4,R0
    0000190C 00BC                   MOV.B       @(R0,R11),R0
    0000190E 600C                   EXTU.B      R0,R0
    00001910 40ED                   SHLD        R14,R0
    00001912 81F2                   MOV.W       R0,@(4,R15)
      Monochrome   882                            screen[j] ^= *p;
    00001914 63D0                   MOV.B       @R13,R3
    00001916 6043                   MOV         R4,R0
    00001918 025C                   MOV.B       @(R0,R5),R2
    0000191A 223A                   XOR         R3,R2
    0000191C 0524                   MOV.B       R2,@(R0,R5)
      Monochrome   883                            if(shift!=8) screen[j+1] ^= *(p+1);
    0000191E 60E3                   MOV         R14,R0
    00001920 8808                   CMP/EQ      #8,R0
    00001922 8906                   BT          L1344
    00001924 62F2                   MOV.L       @R15,R2
    00001926 6343                   MOV         R4,R3
    00001928 6220                   MOV.B       @R2,R2
    0000192A 335C                   ADD         R5,R3
    0000192C 8431                   MOV.B       @(1,R3),R0
    0000192E 202A                   XOR         R2,R0
    00001930 8031                   MOV.B       R0,@(1,R3)
    00001932              L1344:                            
    00001932 7401                   ADD         #1,R4
    00001934 34C3                   CMP/GE      R12,R4
    00001936 8BE7                   BF          L1343
    00001938              L1342:                            
      Monochrome   884                    }
      Monochrome   885                    line = (bmp[i*(real_width>>3)+j] & -1<<(real_width-width))<<shift;
    00001938 50F2                   MOV.L       @(8,R15),R0
      Monochrome   886                    screen[j] ^= *p;
    0000193A 6743                   MOV         R4,R7
    0000193C 0067                   MUL.L       R6,R0
    0000193E 375C                   ADD         R5,R7
    00001940 001A                   STS         MACL,R0
    00001942 304C                   ADD         R4,R0
    00001944 00BC                   MOV.B       @(R0,R11),R0
    00001946 600C                   EXTU.B      R0,R0
    00001948 2099                   AND         R9,R0
    0000194A 40EC                   SHAD        R14,R0
    0000194C 81F2                   MOV.W       R0,@(4,R15)
      Monochrome   887                    if(shift!=8 && x+real_width<129) screen[j+1] ^= *(p+1);
    0000194E 60E3                   MOV         R14,R0
    00001950 63D0                   MOV.B       @R13,R3
    00001952 8808                   CMP/EQ      #8,R0
    00001954 6270                   MOV.B       @R7,R2
    00001956 223A                   XOR         R3,R2
    00001958 8D08                   BT/S        L1345
    0000195A 2720                   MOV.B       R2,@R7
    0000195C 9268                   MOV.W       L1694,R2   ; H'0081
    0000195E 3A23                   CMP/GE      R2,R10
    00001960 8904                   BT          L1345




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001962 61F2                   MOV.L       @R15,R1
    00001964 8471                   MOV.B       @(1,R7),R0
    00001966 6310                   MOV.B       @R1,R3
    00001968 203A                   XOR         R3,R0
    0000196A 8071                   MOV.B       R0,@(1,R7)
    0000196C              L1345:                            
      Monochrome   888                    screen += 16;
    0000196C 7510                   ADD         #16,R5
    0000196E 7601                   ADD         #1,R6
    00001970              L1340:                            
    00001970 53F5                   MOV.L       @(20,R15),R3
    00001972 3633                   CMP/GE      R3,R6
    00001974 8BC0                   BF          L1341
    00001976              L1337:                            
      Monochrome   889            }
      Monochrome   890    }
    00001976 7F18                   ADD         #24,R15
    00001978 4F16                   LDS.L       @R15+,MACL
    0000197A 4F26                   LDS.L       @R15+,PR
    0000197C 68F6                   MOV.L       @R15+,R8
    0000197E 69F6                   MOV.L       @R15+,R9
    00001980 6AF6                   MOV.L       @R15+,R10
    00001982 6BF6                   MOV.L       @R15+,R11
    00001984 6CF6                   MOV.L       @R15+,R12
    00001986 6DF6                   MOV.L       @R15+,R13
    00001988 000B                   RTS
    0000198A 6EF6                   MOV.L       @R15+,R14
      Monochrome   891    #endif
      Monochrome   892    
      Monochrome   893    #ifdef ML_BMP_OR_CL
      Monochrome   894    void ML_bmp_or_cl(const unsigned char *bmp, int x, int y, int width, int height)
    0000198C              _ML_bmp_or_cl:                   ; function: ML_bmp_or_cl
                                                           ; frame size=92
    0000198C 2FE6                   MOV.L       R14,@-R15
    0000198E E05C                   MOV         #92,R0
    00001990 2FD6                   MOV.L       R13,@-R15
    00001992 2FC6                   MOV.L       R12,@-R15
    00001994 2FB6                   MOV.L       R11,@-R15
    00001996 2FA6                   MOV.L       R10,@-R15
    00001998 2F96                   MOV.L       R9,@-R15
    0000199A 6963                   MOV         R6,R9
    0000199C 2F86                   MOV.L       R8,@-R15
      Monochrome   895    {
      Monochrome   896            unsigned short line;
      Monochrome   897            char shift, *screen, *p;
      Monochrome   898            int i, j, real_width, begin_x, end_x, begin_y, end_y;
      Monochrome   899            char bool1=1, bool2=1, bool3;
    0000199E E601                   MOV         #1,R6
    000019A0 4F22                   STS.L       PR,@-R15
    000019A2 4F12                   STS.L       MACL,@-R15
    000019A4 7FC8                   ADD         #-56,R15
    000019A6 1F45                   MOV.L       R4,@(20,R15)
    000019A8 1F72                   MOV.L       R7,@(8,R15)
    000019AA 04FE                   MOV.L       @(R0,R15),R4
    000019AC E01C                   MOV         #28,R0
    000019AE 0F64                   MOV.B       R6,@(R0,R15)
    000019B0 E034                   MOV         #52,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019B2 0F64                   MOV.B       R6,@(R0,R15)
      Monochrome   900            if(!bmp || x<1-width || x>127 || y<1-height || y>63 || height<1 || width<1) return;
    000019B4 53F5                   MOV.L       @(20,R15),R3
    000019B6 2338                   TST         R3,R3
    000019B8 8B01                   BF          L1695
    000019BA A103                   BRA         L1348
    000019BC 0009                   NOP
    000019BE              L1695:                            
    000019BE E201                   MOV         #1,R2
    000019C0 53F2                   MOV.L       @(8,R15),R3
    000019C2 3238                   SUB         R3,R2
    000019C4 3523                   CMP/GE      R2,R5
    000019C6 8901                   BT          L1696
    000019C8 A0FC                   BRA         L1348
    000019CA 0009                   NOP
    000019CC              L1696:                            
    000019CC E17F                   MOV         #127,R1
    000019CE 3517                   CMP/GT      R1,R5
    000019D0 8B01                   BF          L1697
    000019D2 A0F7                   BRA         L1348
    000019D4 0009                   NOP
    000019D6              L1697:                            
    000019D6 E001                   MOV         #1,R0
    000019D8 3048                   SUB         R4,R0
    000019DA 3903                   CMP/GE      R0,R9
    000019DC 8901                   BT          L1698
    000019DE A0F1                   BRA         L1348
    000019E0 0009                   NOP
    000019E2              L1698:                            
    000019E2 E23F                   MOV         #63,R2
    000019E4 3927                   CMP/GT      R2,R9
    000019E6 8B01                   BF          L1699
    000019E8 A0EC                   BRA         L1348
    000019EA 0009                   NOP
    000019EC              L1699:                            
    000019EC E001                   MOV         #1,R0
    000019EE 3403                   CMP/GE      R0,R4
    000019F0 8901                   BT          L1700
    000019F2 A0E7                   BRA         L1348
    000019F4 0009                   NOP
    000019F6              L1700:                            
    000019F6 52F2                   MOV.L       @(8,R15),R2
    000019F8 3203                   CMP/GE      R0,R2
    000019FA 8901                   BT          L1701
    000019FC A0E2                   BRA         L1348
    000019FE 0009                   NOP
    00001A00              L1701:                            
      Monochrome   901            p = (char*)&line;
      Monochrome   902            real_width = (width-1>>3<<3)+8;
    00001A00 52F2                   MOV.L       @(8,R15),R2
    00001A02 6BF3                   MOV         R15,R11
    00001A04 72FF                   ADD         #-1,R2
    00001A06 4221                   SHAR        R2
    00001A08 4221                   SHAR        R2
    00001A0A 4221                   SHAR        R2
    00001A0C 4208                   SHLL2       R2
    00001A0E 4200                   SHLL        R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A10 7208                   ADD         #8,R2
      Monochrome   903            if(y < 0) begin_y = -y;
    00001A12 4911                   CMP/PZ      R9
    00001A14 1F23                   MOV.L       R2,@(12,R15)
    00001A16 8D02                   BT/S        L1349
    00001A18 E600                   MOV         #0,R6
    00001A1A A001                   BRA         L1350
    00001A1C 689B                   NEG         R9,R8
    00001A1E              L1349:                            
      Monochrome   904            else begin_y = 0;
    00001A1E 6863                   MOV         R6,R8
    00001A20              L1350:                            
      Monochrome   905            if(y+height > 64) end_y = 64-y;
    00001A20 E740                   MOV         #64,R7
    00001A22 6393                   MOV         R9,R3
    00001A24 334C                   ADD         R4,R3
    00001A26 3377                   CMP/GT      R7,R3
    00001A28 8B03                   BF          L1351
    00001A2A 3798                   SUB         R9,R7
    00001A2C A002                   BRA         L1352
    00001A2E 1F7C                   MOV.L       R7,@(48,R15)
    00001A30              L1694:                            
    00001A30 0081                   .DATA.W     H'0081
    00001A32              L1351:                            
      Monochrome   906            else end_y = height;
    00001A32 1F4C                   MOV.L       R4,@(48,R15)
    00001A34              L1352:                            
      Monochrome   907            shift = 8-(x&7);
    00001A34 E307                   MOV         #7,R3
    00001A36 2359                   AND         R5,R3
    00001A38 E408                   MOV         #8,R4
    00001A3A 3438                   SUB         R3,R4
    00001A3C 4511                   CMP/PZ      R5
    00001A3E 8D0A                   BT/S        L1353
    00001A40 6E4E                   EXTS.B      R4,R14
      Monochrome   908            if(x<0)
      Monochrome   909            {
      Monochrome   910                    begin_x = -x>>3;
    00001A42 6C5B                   NEG         R5,R12
    00001A44 4C21                   SHAR        R12
    00001A46 4C21                   SHAR        R12
    00001A48 4C21                   SHAR        R12
      Monochrome   911                    if(shift != 8) bool1 = 0;
    00001A4A 60E3                   MOV         R14,R0
    00001A4C 8808                   CMP/EQ      #8,R0
    00001A4E 8903                   BT          L1355
    00001A50 E01C                   MOV         #28,R0
    00001A52 A001                   BRA         L1355
    00001A54 0F64                   MOV.B       R6,@(R0,R15)
    00001A56              L1353:                            
      Monochrome   912            } else begin_x = 0;
    00001A56 6C63                   MOV         R6,R12
    00001A58              L1355:                            
    00001A58 9343                   MOV.W       L1702,R3   ; H'0080
    00001A5A 6253                   MOV         R5,R2
    00001A5C 4221                   SHAR        R2
    00001A5E 4221                   SHAR        R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A60 4221                   SHAR        R2
    00001A62 1F21                   MOV.L       R2,@(4,R15)
    00001A64 54F3                   MOV.L       @(12,R15),R4
    00001A66 74FF                   ADD         #-1,R4
    00001A68 51F3                   MOV.L       @(12,R15),R1
    00001A6A 4421                   SHAR        R4
    00001A6C 4421                   SHAR        R4
    00001A6E 4421                   SHAR        R4
    00001A70 315C                   ADD         R5,R1
    00001A72 3137                   CMP/GT      R3,R1
    00001A74 8B04                   BF          L1356
      Monochrome   913            if(x+real_width > 128) end_x = 15-(x>>3), bool2 = 0;
    00001A76 ED0F                   MOV         #15,R13
    00001A78 3D28                   SUB         R2,R13
    00001A7A E034                   MOV         #52,R0
    00001A7C A001                   BRA         L1357
    00001A7E 0F64                   MOV.B       R6,@(R0,R15)
    00001A80              L1356:                            
      Monochrome   914            else end_x = real_width-1>>3;
    00001A80 6D43                   MOV         R4,R13
    00001A82              L1357:                            
      Monochrome   915            bool3 = (end_x == real_width-1>>3);
    00001A82 3D40                   CMP/EQ      R4,R13
      Monochrome   916            screen = ML_vram_adress()+(y+begin_y<<4)+(x>>3);
    00001A84 D317                   MOV.L       L1702+2,R3 ; _ML_vram_adress
    00001A86 61F3                   MOV         R15,R1
    00001A88 0029                   MOVT        R0
    00001A8A 712C                   ADD         #44,R1
    00001A8C 430B                   JSR         @R3
    00001A8E 2100                   MOV.B       R0,@R1
    00001A90 53F1                   MOV.L       @(4,R15),R3
    00001A92 61B3                   MOV         R11,R1
      Monochrome   917    
      Monochrome   918            for(i=begin_y ; i<end_y ; i++)
    00001A94 1F86                   MOV.L       R8,@(24,R15)
    00001A96 6A93                   MOV         R9,R10
    00001A98 54F3                   MOV.L       @(12,R15),R4
    00001A9A 7101                   ADD         #1,R1
    00001A9C 3A8C                   ADD         R8,R10
    00001A9E 4A08                   SHLL2       R10
    00001AA0 4A08                   SHLL2       R10
    00001AA2 3A0C                   ADD         R0,R10
    00001AA4 3A3C                   ADD         R3,R10
    00001AA6 4421                   SHAR        R4
    00001AA8 4421                   SHAR        R4
    00001AAA 4421                   SHAR        R4
    00001AAC 1F44                   MOV.L       R4,@(16,R15)
    00001AAE 53F6                   MOV.L       @(24,R15),R3
    00001AB0 52F5                   MOV.L       @(20,R15),R2
    00001AB2 0437                   MUL.L       R3,R4
    00001AB4 041A                   STS         MACL,R4
    00001AB6 6843                   MOV         R4,R8
    00001AB8 38DC                   ADD         R13,R8
    00001ABA 382C                   ADD         R2,R8
    00001ABC 6943                   MOV         R4,R9
    00001ABE 34CC                   ADD         R12,R4
    00001AC0 342C                   ADD         R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001AC2 63C3                   MOV         R12,R3
    00001AC4 1F48                   MOV.L       R4,@(32,R15)
    00001AC6 7301                   ADD         #1,R3
    00001AC8 1F11                   MOV.L       R1,@(4,R15)
    00001ACA 1F3A                   MOV.L       R3,@(40,R15)
    00001ACC 52F2                   MOV.L       @(8,R15),R2
    00001ACE 50F3                   MOV.L       @(12,R15),R0
    00001AD0 3028                   SUB         R2,R0
    00001AD2 E1FF                   MOV         #-1,R1
    00001AD4 410C                   SHAD        R0,R1
    00001AD6 1F13                   MOV.L       R1,@(12,R15)
    00001AD8 55F4                   MOV.L       @(16,R15),R5
    00001ADA 1F59                   MOV.L       R5,@(36,R15)
    00001ADC 1F54                   MOV.L       R5,@(16,R15)
    00001ADE A06D                   BRA         L1358
    00001AE0 1F52                   MOV.L       R5,@(8,R15)
    00001AE2              L1702:                            
    00001AE2 0080                   .DATA.W     H'0080
    00001AE4 <00000000>             .DATA.L     _ML_vram_adress
    00001AE8              L1359:                            
      Monochrome   919            {
      Monochrome   920                    if(begin_x < end_x)
    00001AE8 3CD3                   CMP/GE      R13,R12
    00001AEA 8938                   BT          L1360
      Monochrome   921                    {
      Monochrome   922                            line = bmp[i*(real_width>>3)+begin_x] << shift;
    00001AEC 53F8                   MOV.L       @(32,R15),R3
    00001AEE 64C3                   MOV         R12,R4
    00001AF0 6230                   MOV.B       @R3,R2
    00001AF2 E01C                   MOV         #28,R0
    00001AF4 622C                   EXTU.B      R2,R2
    00001AF6 42ED                   SHLD        R14,R2
    00001AF8 2F21                   MOV.W       R2,@R15
    00001AFA 03FC                   MOV.B       @(R0,R15),R3
    00001AFC 2338                   TST         R3,R3
    00001AFE 8D04                   BT/S        L1361
    00001B00 34AC                   ADD         R10,R4
      Monochrome   923                            if(bool1) screen[begin_x] |= *p;
    00001B02 63B0                   MOV.B       @R11,R3
    00001B04 6140                   MOV.B       @R4,R1
    00001B06 213B                   OR          R3,R1
    00001B08 2410                   MOV.B       R1,@R4
    00001B0A              L1361:                            
      Monochrome   924                            if(shift!=8) screen[begin_x+1] |= *(p+1);
    00001B0A 60E3                   MOV         R14,R0
    00001B0C 8808                   CMP/EQ      #8,R0
    00001B0E 8904                   BT          L1362
    00001B10 52F1                   MOV.L       @(4,R15),R2
    00001B12 6320                   MOV.B       @R2,R3
    00001B14 8441                   MOV.B       @(1,R4),R0
    00001B16 203B                   OR          R3,R0
    00001B18 8041                   MOV.B       R0,@(1,R4)
    00001B1A              L1362:                            
      Monochrome   925                            for(j=begin_x+1 ; j<end_x ; j++)
    00001B1A 54FA                   MOV.L       @(40,R15),R4
    00001B1C 53F5                   MOV.L       @(20,R15),R3
    00001B1E 34D3                   CMP/GE      R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B20 6643                   MOV         R4,R6
    00001B22 36AC                   ADD         R10,R6
    00001B24 6563                   MOV         R6,R5
    00001B26 7501                   ADD         #1,R5
    00001B28 6763                   MOV         R6,R7
    00001B2A 6693                   MOV         R9,R6
    00001B2C 364C                   ADD         R4,R6
    00001B2E 8D16                   BT/S        L1360
    00001B30 363C                   ADD         R3,R6
    00001B32              L1364:                            
      Monochrome   926                            {
      Monochrome   927                                    line = bmp[i*(real_width>>3)+j] << shift;
      Monochrome   928                                    screen[j] |= *p;
      Monochrome   929                                    if(shift!=8) screen[j+1] |= *(p+1);
    00001B32 60E3                   MOV         R14,R0
    00001B34 6360                   MOV.B       @R6,R3
    00001B36 8808                   CMP/EQ      #8,R0
    00001B38 633C                   EXTU.B      R3,R3
    00001B3A 43ED                   SHLD        R14,R3
    00001B3C 2F31                   MOV.W       R3,@R15
    00001B3E 62B0                   MOV.B       @R11,R2
    00001B40 6170                   MOV.B       @R7,R1
    00001B42 212B                   OR          R2,R1
    00001B44 8D05                   BT/S        L1365
    00001B46 2710                   MOV.B       R1,@R7
    00001B48 52F1                   MOV.L       @(4,R15),R2
    00001B4A 6320                   MOV.B       @R2,R3
    00001B4C 6150                   MOV.B       @R5,R1
    00001B4E 213B                   OR          R3,R1
    00001B50 2510                   MOV.B       R1,@R5
    00001B52              L1365:                            
    00001B52 7401                   ADD         #1,R4
    00001B54 7501                   ADD         #1,R5
    00001B56 7701                   ADD         #1,R7
    00001B58 34D3                   CMP/GE      R13,R4
    00001B5A 8FEA                   BF/S        L1364
    00001B5C 7601                   ADD         #1,R6
    00001B5E              L1360:                            
      Monochrome   930                            }
      Monochrome   931                    }
      Monochrome   932                    line = bmp[i*(real_width>>3)+end_x];
      Monochrome   933                    if(bool3) line &= -1<<real_width-width;
    00001B5E E02C                   MOV         #44,R0
    00001B60 6280                   MOV.B       @R8,R2
    00001B62 622C                   EXTU.B      R2,R2
    00001B64 2F21                   MOV.W       R2,@R15
    00001B66 03FC                   MOV.B       @(R0,R15),R3
    00001B68 2338                   TST         R3,R3
    00001B6A 8903                   BT          L1366
    00001B6C 53F3                   MOV.L       @(12,R15),R3
    00001B6E 61F1                   MOV.W       @R15,R1
    00001B70 2139                   AND         R3,R1
    00001B72 2F11                   MOV.W       R1,@R15
    00001B74              L1366:                            
      Monochrome   934                    line <<= shift;
    00001B74 62F1                   MOV.W       @R15,R2
    00001B76 64D3                   MOV         R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B78 42ED                   SHLD        R14,R2
    00001B7A 3CD3                   CMP/GE      R13,R12
    00001B7C 2F21                   MOV.W       R2,@R15
    00001B7E 8F04                   BF/S        L1368
    00001B80 34AC                   ADD         R10,R4
    00001B82 E01C                   MOV         #28,R0
    00001B84 01FC                   MOV.B       @(R0,R15),R1
    00001B86 2118                   TST         R1,R1
    00001B88 8903                   BT          L1367
    00001B8A              L1368:                            
      Monochrome   935                    if(begin_x < end_x || bool1) screen[end_x] |= *p;
    00001B8A 63B0                   MOV.B       @R11,R3
    00001B8C 6240                   MOV.B       @R4,R2
    00001B8E 223B                   OR          R3,R2
    00001B90 2420                   MOV.B       R2,@R4
    00001B92              L1367:                            
      Monochrome   936                    if(bool2) screen[end_x+1] |= *(p+1);
    00001B92 E034                   MOV         #52,R0
    00001B94 01FC                   MOV.B       @(R0,R15),R1
    00001B96 2118                   TST         R1,R1
    00001B98 8D05                   BT/S        L1369
      Monochrome   937                    screen += 16;
    00001B9A 7A10                   ADD         #16,R10
    00001B9C 51F1                   MOV.L       @(4,R15),R1
    00001B9E 6310                   MOV.B       @R1,R3
    00001BA0 8441                   MOV.B       @(1,R4),R0
    00001BA2 203B                   OR          R3,R0
    00001BA4 8041                   MOV.B       R0,@(1,R4)
    00001BA6              L1369:                            
    00001BA6 53F6                   MOV.L       @(24,R15),R3
    00001BA8 7301                   ADD         #1,R3
    00001BAA 1F36                   MOV.L       R3,@(24,R15)
    00001BAC 52F9                   MOV.L       @(36,R15),R2
    00001BAE 382C                   ADD         R2,R8
    00001BB0 51F4                   MOV.L       @(16,R15),R1
    00001BB2 391C                   ADD         R1,R9
    00001BB4 53F8                   MOV.L       @(32,R15),R3
    00001BB6 50F2                   MOV.L       @(8,R15),R0
    00001BB8 303C                   ADD         R3,R0
    00001BBA 1F08                   MOV.L       R0,@(32,R15)
    00001BBC              L1358:                            
    00001BBC 53FC                   MOV.L       @(48,R15),R3
    00001BBE 51F6                   MOV.L       @(24,R15),R1
    00001BC0 3133                   CMP/GE      R3,R1
    00001BC2 8B91                   BF          L1359
    00001BC4              L1348:                            
      Monochrome   938            }
      Monochrome   939    }
    00001BC4 7F38                   ADD         #56,R15
    00001BC6 4F16                   LDS.L       @R15+,MACL
    00001BC8 4F26                   LDS.L       @R15+,PR
    00001BCA 68F6                   MOV.L       @R15+,R8
    00001BCC 69F6                   MOV.L       @R15+,R9
    00001BCE 6AF6                   MOV.L       @R15+,R10
    00001BD0 6BF6                   MOV.L       @R15+,R11
    00001BD2 6CF6                   MOV.L       @R15+,R12
    00001BD4 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001BD6 000B                   RTS
    00001BD8 6EF6                   MOV.L       @R15+,R14
      Monochrome   940    #endif
      Monochrome   941    
      Monochrome   942    #ifdef ML_BMP_AND_CL
      Monochrome   943    void ML_bmp_and_cl(const unsigned char *bmp, int x, int y, int width, int height)
    00001BDA              _ML_bmp_and_cl:                  ; function: ML_bmp_and_cl
                                                           ; frame size=92
    00001BDA E05C                   MOV         #92,R0
    00001BDC 2FE6                   MOV.L       R14,@-R15
    00001BDE 2FD6                   MOV.L       R13,@-R15
    00001BE0 2FC6                   MOV.L       R12,@-R15
    00001BE2 2FB6                   MOV.L       R11,@-R15
    00001BE4 2FA6                   MOV.L       R10,@-R15
    00001BE6 2F96                   MOV.L       R9,@-R15
    00001BE8 2F86                   MOV.L       R8,@-R15
    00001BEA 6963                   MOV         R6,R9
    00001BEC 4F22                   STS.L       PR,@-R15
      Monochrome   944    {
      Monochrome   945            unsigned short line;
      Monochrome   946            char shift, *screen, *p;
      Monochrome   947            int i, j, real_width, begin_x, end_x, begin_y, end_y;
      Monochrome   948            char bool1=1, bool2=1, bool3;
    00001BEE E601                   MOV         #1,R6
    00001BF0 4F12                   STS.L       MACL,@-R15
    00001BF2 7FC8                   ADD         #-56,R15
    00001BF4 1F45                   MOV.L       R4,@(20,R15)
    00001BF6 1F72                   MOV.L       R7,@(8,R15)
    00001BF8 04FE                   MOV.L       @(R0,R15),R4
    00001BFA E01C                   MOV         #28,R0
    00001BFC 0F64                   MOV.B       R6,@(R0,R15)
    00001BFE E034                   MOV         #52,R0
    00001C00 0F64                   MOV.B       R6,@(R0,R15)
      Monochrome   949            if(!bmp || x<1-width || x>127 || y<1-height || y>63 || height<1 || width<1) return;
    00001C02 53F5                   MOV.L       @(20,R15),R3
    00001C04 2338                   TST         R3,R3
    00001C06 8B01                   BF          L1703
    00001C08 A109                   BRA         L1372
    00001C0A 0009                   NOP
    00001C0C              L1703:                            
    00001C0C 53F2                   MOV.L       @(8,R15),R3
    00001C0E E201                   MOV         #1,R2
    00001C10 3238                   SUB         R3,R2
    00001C12 3523                   CMP/GE      R2,R5
    00001C14 8901                   BT          L1704
    00001C16 A102                   BRA         L1372
    00001C18 0009                   NOP
    00001C1A              L1704:                            
    00001C1A E17F                   MOV         #127,R1
    00001C1C 3517                   CMP/GT      R1,R5
    00001C1E 8B01                   BF          L1705
    00001C20 A0FD                   BRA         L1372
    00001C22 0009                   NOP
    00001C24              L1705:                            
    00001C24 E001                   MOV         #1,R0
    00001C26 3048                   SUB         R4,R0
    00001C28 3903                   CMP/GE      R0,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C2A 8901                   BT          L1706
    00001C2C A0F7                   BRA         L1372
    00001C2E 0009                   NOP
    00001C30              L1706:                            
    00001C30 E23F                   MOV         #63,R2
    00001C32 3927                   CMP/GT      R2,R9
    00001C34 8B01                   BF          L1707
    00001C36 A0F2                   BRA         L1372
    00001C38 0009                   NOP
    00001C3A              L1707:                            
    00001C3A E001                   MOV         #1,R0
    00001C3C 3403                   CMP/GE      R0,R4
    00001C3E 8901                   BT          L1708
    00001C40 A0ED                   BRA         L1372
    00001C42 0009                   NOP
    00001C44              L1708:                            
    00001C44 52F2                   MOV.L       @(8,R15),R2
    00001C46 3203                   CMP/GE      R0,R2
    00001C48 8901                   BT          L1709
    00001C4A A0E8                   BRA         L1372
    00001C4C 0009                   NOP
    00001C4E              L1709:                            
      Monochrome   950            p = (char*)&line;
    00001C4E 6BF3                   MOV         R15,R11
      Monochrome   951            real_width = (width-1>>3<<3)+8;
    00001C50 52F2                   MOV.L       @(8,R15),R2
    00001C52 72FF                   ADD         #-1,R2
    00001C54 4221                   SHAR        R2
    00001C56 4221                   SHAR        R2
    00001C58 4221                   SHAR        R2
    00001C5A 4208                   SHLL2       R2
    00001C5C 4200                   SHLL        R2
    00001C5E 7208                   ADD         #8,R2
    00001C60 1F23                   MOV.L       R2,@(12,R15)
      Monochrome   952            if(y < 0) begin_y = -y;
    00001C62 4911                   CMP/PZ      R9
    00001C64 8D02                   BT/S        L1373
    00001C66 E600                   MOV         #0,R6
    00001C68 A001                   BRA         L1374
    00001C6A 689B                   NEG         R9,R8
    00001C6C              L1373:                            
      Monochrome   953            else begin_y = 0;
    00001C6C 6863                   MOV         R6,R8
    00001C6E              L1374:                            
      Monochrome   954            if(y+height > 64) end_y = 64-y;
    00001C6E E740                   MOV         #64,R7
    00001C70 6393                   MOV         R9,R3
    00001C72 334C                   ADD         R4,R3
    00001C74 3377                   CMP/GT      R7,R3
    00001C76 8B02                   BF          L1375
    00001C78 3798                   SUB         R9,R7
    00001C7A A001                   BRA         L1376
    00001C7C 1F7C                   MOV.L       R7,@(48,R15)
    00001C7E              L1375:                            
      Monochrome   955            else end_y = height;
    00001C7E 1F4C                   MOV.L       R4,@(48,R15)
    00001C80              L1376:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   956            shift = 8-(x&7);
    00001C80 E307                   MOV         #7,R3
    00001C82 2359                   AND         R5,R3
    00001C84 E408                   MOV         #8,R4
    00001C86 3438                   SUB         R3,R4
    00001C88 4511                   CMP/PZ      R5
    00001C8A 8D0A                   BT/S        L1377
    00001C8C 6E4E                   EXTS.B      R4,R14
      Monochrome   957            if(x<0)
      Monochrome   958            {
      Monochrome   959                    begin_x = -x>>3;
    00001C8E 6C5B                   NEG         R5,R12
    00001C90 4C21                   SHAR        R12
    00001C92 4C21                   SHAR        R12
    00001C94 4C21                   SHAR        R12
      Monochrome   960                    if(shift != 8) bool1 = 0;
    00001C96 60E3                   MOV         R14,R0
    00001C98 8808                   CMP/EQ      #8,R0
    00001C9A 8903                   BT          L1379
    00001C9C E01C                   MOV         #28,R0
    00001C9E A001                   BRA         L1379
    00001CA0 0F64                   MOV.B       R6,@(R0,R15)
    00001CA2              L1377:                            
      Monochrome   961            } else begin_x = 0;
    00001CA2 6C63                   MOV         R6,R12
    00001CA4              L1379:                            
    00001CA4 9343                   MOV.W       L1710,R3   ; H'0080
    00001CA6 6253                   MOV         R5,R2
    00001CA8 4221                   SHAR        R2
    00001CAA 4221                   SHAR        R2
    00001CAC 4221                   SHAR        R2
    00001CAE 1F21                   MOV.L       R2,@(4,R15)
    00001CB0 54F3                   MOV.L       @(12,R15),R4
    00001CB2 74FF                   ADD         #-1,R4
    00001CB4 51F3                   MOV.L       @(12,R15),R1
    00001CB6 4421                   SHAR        R4
    00001CB8 4421                   SHAR        R4
    00001CBA 4421                   SHAR        R4
    00001CBC 315C                   ADD         R5,R1
    00001CBE 3137                   CMP/GT      R3,R1
    00001CC0 8B04                   BF          L1380
      Monochrome   962            if(x+real_width > 128) end_x = 15-(x>>3), bool2 = 0;
    00001CC2 ED0F                   MOV         #15,R13
    00001CC4 3D28                   SUB         R2,R13
    00001CC6 E034                   MOV         #52,R0
    00001CC8 A001                   BRA         L1381
    00001CCA 0F64                   MOV.B       R6,@(R0,R15)
    00001CCC              L1380:                            
      Monochrome   963            else end_x = real_width-1>>3;
    00001CCC 6D43                   MOV         R4,R13
    00001CCE              L1381:                            
      Monochrome   964            bool3 = (end_x == real_width-1>>3);
    00001CCE 3D40                   CMP/EQ      R4,R13
      Monochrome   965            screen = ML_vram_adress()+(y+begin_y<<4)+(x>>3);
    00001CD0 D317                   MOV.L       L1710+2,R3 ; _ML_vram_adress
    00001CD2 61F3                   MOV         R15,R1
    00001CD4 0029                   MOVT        R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CD6 712C                   ADD         #44,R1
    00001CD8 430B                   JSR         @R3
    00001CDA 2100                   MOV.B       R0,@R1
    00001CDC 53F1                   MOV.L       @(4,R15),R3
    00001CDE 61B3                   MOV         R11,R1
      Monochrome   966    
      Monochrome   967            for(i=begin_y ; i<end_y ; i++)
    00001CE0 1F86                   MOV.L       R8,@(24,R15)
    00001CE2 6A93                   MOV         R9,R10
    00001CE4 54F3                   MOV.L       @(12,R15),R4
    00001CE6 7101                   ADD         #1,R1
    00001CE8 3A8C                   ADD         R8,R10
    00001CEA 4A08                   SHLL2       R10
    00001CEC 4A08                   SHLL2       R10
    00001CEE 3A0C                   ADD         R0,R10
    00001CF0 3A3C                   ADD         R3,R10
    00001CF2 4421                   SHAR        R4
    00001CF4 4421                   SHAR        R4
    00001CF6 4421                   SHAR        R4
    00001CF8 1F44                   MOV.L       R4,@(16,R15)
    00001CFA 53F6                   MOV.L       @(24,R15),R3
    00001CFC 52F5                   MOV.L       @(20,R15),R2
    00001CFE 0437                   MUL.L       R3,R4
    00001D00 041A                   STS         MACL,R4
    00001D02 6843                   MOV         R4,R8
    00001D04 38DC                   ADD         R13,R8
    00001D06 382C                   ADD         R2,R8
    00001D08 6943                   MOV         R4,R9
    00001D0A 34CC                   ADD         R12,R4
    00001D0C 342C                   ADD         R2,R4
    00001D0E 63C3                   MOV         R12,R3
    00001D10 1F48                   MOV.L       R4,@(32,R15)
    00001D12 7301                   ADD         #1,R3
    00001D14 1F11                   MOV.L       R1,@(4,R15)
    00001D16 1F3A                   MOV.L       R3,@(40,R15)
    00001D18 52F2                   MOV.L       @(8,R15),R2
    00001D1A 50F3                   MOV.L       @(12,R15),R0
    00001D1C 3028                   SUB         R2,R0
    00001D1E E1FF                   MOV         #-1,R1
    00001D20 410C                   SHAD        R0,R1
    00001D22 1F13                   MOV.L       R1,@(12,R15)
    00001D24 55F4                   MOV.L       @(16,R15),R5
    00001D26 1F59                   MOV.L       R5,@(36,R15)
    00001D28 1F54                   MOV.L       R5,@(16,R15)
    00001D2A A074                   BRA         L1382
    00001D2C 1F52                   MOV.L       R5,@(8,R15)
    00001D2E              L1710:                            
    00001D2E 0080                   .DATA.W     H'0080
    00001D30 <00000000>             .DATA.L     _ML_vram_adress
    00001D34              L1383:                            
      Monochrome   968            {
      Monochrome   969                    if(begin_x < end_x)
    00001D34 3CD3                   CMP/GE      R13,R12
    00001D36 893C                   BT          L1384
      Monochrome   970    
      Monochrome   971                    {
      Monochrome   972                            line = ~((unsigned char)~bmp[i*(real_width>>3)+begin_x]<<shift);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D38 53F8                   MOV.L       @(32,R15),R3
    00001D3A 64C3                   MOV         R12,R4
    00001D3C 6230                   MOV.B       @R3,R2
    00001D3E E01C                   MOV         #28,R0
    00001D40 6227                   NOT         R2,R2
    00001D42 622C                   EXTU.B      R2,R2
    00001D44 42ED                   SHLD        R14,R2
    00001D46 6227                   NOT         R2,R2
    00001D48 2F21                   MOV.W       R2,@R15
    00001D4A 03FC                   MOV.B       @(R0,R15),R3
    00001D4C 2338                   TST         R3,R3
    00001D4E 8D04                   BT/S        L1385
    00001D50 34AC                   ADD         R10,R4
      Monochrome   973                            if(bool1) screen[begin_x] &= *p;
    00001D52 63B0                   MOV.B       @R11,R3
    00001D54 6140                   MOV.B       @R4,R1
    00001D56 2139                   AND         R3,R1
    00001D58 2410                   MOV.B       R1,@R4
    00001D5A              L1385:                            
      Monochrome   974                            if(shift!=8) screen[begin_x+1] &= *(p+1);
    00001D5A 60E3                   MOV         R14,R0
    00001D5C 8808                   CMP/EQ      #8,R0
    00001D5E 8904                   BT          L1386
    00001D60 52F1                   MOV.L       @(4,R15),R2
    00001D62 6320                   MOV.B       @R2,R3
    00001D64 8441                   MOV.B       @(1,R4),R0
    00001D66 2039                   AND         R3,R0
    00001D68 8041                   MOV.B       R0,@(1,R4)
    00001D6A              L1386:                            
      Monochrome   975                            for(j=begin_x+1 ; j<end_x ; j++)
    00001D6A 54FA                   MOV.L       @(40,R15),R4
    00001D6C 53F5                   MOV.L       @(20,R15),R3
    00001D6E 34D3                   CMP/GE      R13,R4
    00001D70 6643                   MOV         R4,R6
    00001D72 36AC                   ADD         R10,R6
    00001D74 6563                   MOV         R6,R5
    00001D76 7501                   ADD         #1,R5
    00001D78 6763                   MOV         R6,R7
    00001D7A 6693                   MOV         R9,R6
    00001D7C 364C                   ADD         R4,R6
    00001D7E 8D18                   BT/S        L1384
    00001D80 363C                   ADD         R3,R6
    00001D82              L1388:                            
      Monochrome   976                            {
      Monochrome   977                                    line = ~((unsigned char)~bmp[i*(real_width>>3)+j]<<shift);
      Monochrome   978                                    screen[j] &= *p;
      Monochrome   979                                    if(shift!=8) screen[j+1] &= *(p+1);
    00001D82 60E3                   MOV         R14,R0
    00001D84 6360                   MOV.B       @R6,R3
    00001D86 8808                   CMP/EQ      #8,R0
    00001D88 6337                   NOT         R3,R3
    00001D8A 633C                   EXTU.B      R3,R3
    00001D8C 43ED                   SHLD        R14,R3
    00001D8E 6337                   NOT         R3,R3
    00001D90 2F31                   MOV.W       R3,@R15
    00001D92 62B0                   MOV.B       @R11,R2
    00001D94 6170                   MOV.B       @R7,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D96 2129                   AND         R2,R1
    00001D98 8D05                   BT/S        L1389
    00001D9A 2710                   MOV.B       R1,@R7
    00001D9C 52F1                   MOV.L       @(4,R15),R2
    00001D9E 6320                   MOV.B       @R2,R3
    00001DA0 6150                   MOV.B       @R5,R1
    00001DA2 2139                   AND         R3,R1
    00001DA4 2510                   MOV.B       R1,@R5
    00001DA6              L1389:                            
    00001DA6 7401                   ADD         #1,R4
    00001DA8 7501                   ADD         #1,R5
    00001DAA 7701                   ADD         #1,R7
    00001DAC 34D3                   CMP/GE      R13,R4
    00001DAE 8FE8                   BF/S        L1388
    00001DB0 7601                   ADD         #1,R6
    00001DB2              L1384:                            
      Monochrome   980                            }
      Monochrome   981                    }
      Monochrome   982                    line = (unsigned char)~bmp[i*(real_width>>3)+end_x];
      Monochrome   983                    if(bool3) line &= -1<<real_width-width;
    00001DB2 E02C                   MOV         #44,R0
    00001DB4 6280                   MOV.B       @R8,R2
    00001DB6 6227                   NOT         R2,R2
    00001DB8 622C                   EXTU.B      R2,R2
    00001DBA 2F21                   MOV.W       R2,@R15
    00001DBC 03FC                   MOV.B       @(R0,R15),R3
    00001DBE 2338                   TST         R3,R3
    00001DC0 8903                   BT          L1390
    00001DC2 53F3                   MOV.L       @(12,R15),R3
    00001DC4 61F1                   MOV.W       @R15,R1
    00001DC6 2139                   AND         R3,R1
    00001DC8 2F11                   MOV.W       R1,@R15
    00001DCA              L1390:                            
    00001DCA 64D3                   MOV         R13,R4
      Monochrome   984                    line = ~(line << shift);
    00001DCC 62F1                   MOV.W       @R15,R2
    00001DCE 3CD3                   CMP/GE      R13,R12
    00001DD0 622D                   EXTU.W      R2,R2
    00001DD2 42ED                   SHLD        R14,R2
    00001DD4 6227                   NOT         R2,R2
    00001DD6 2F21                   MOV.W       R2,@R15
    00001DD8 8F04                   BF/S        L1392
    00001DDA 34AC                   ADD         R10,R4
    00001DDC E01C                   MOV         #28,R0
    00001DDE 01FC                   MOV.B       @(R0,R15),R1
    00001DE0 2118                   TST         R1,R1
    00001DE2 8903                   BT          L1391
    00001DE4              L1392:                            
      Monochrome   985                    if(begin_x < end_x || bool1) screen[end_x] &= *p;
    00001DE4 63B0                   MOV.B       @R11,R3
    00001DE6 6240                   MOV.B       @R4,R2
    00001DE8 2239                   AND         R3,R2
    00001DEA 2420                   MOV.B       R2,@R4
    00001DEC              L1391:                            
      Monochrome   986                    if(bool2) screen[end_x+1] &= *(p+1);
    00001DEC E034                   MOV         #52,R0
    00001DEE 01FC                   MOV.B       @(R0,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001DF0 2118                   TST         R1,R1
    00001DF2 8D05                   BT/S        L1393
      Monochrome   987                    screen += 16;
    00001DF4 7A10                   ADD         #16,R10
    00001DF6 51F1                   MOV.L       @(4,R15),R1
    00001DF8 8441                   MOV.B       @(1,R4),R0
    00001DFA 6310                   MOV.B       @R1,R3
    00001DFC 2039                   AND         R3,R0
    00001DFE 8041                   MOV.B       R0,@(1,R4)
    00001E00              L1393:                            
    00001E00 53F6                   MOV.L       @(24,R15),R3
    00001E02 7301                   ADD         #1,R3
    00001E04 1F36                   MOV.L       R3,@(24,R15)
    00001E06 52F9                   MOV.L       @(36,R15),R2
    00001E08 51F4                   MOV.L       @(16,R15),R1
    00001E0A 382C                   ADD         R2,R8
    00001E0C 53F8                   MOV.L       @(32,R15),R3
    00001E0E 391C                   ADD         R1,R9
    00001E10 50F2                   MOV.L       @(8,R15),R0
    00001E12 303C                   ADD         R3,R0
    00001E14 1F08                   MOV.L       R0,@(32,R15)
    00001E16              L1382:                            
    00001E16 53FC                   MOV.L       @(48,R15),R3
    00001E18 51F6                   MOV.L       @(24,R15),R1
    00001E1A 3133                   CMP/GE      R3,R1
    00001E1C 8B8A                   BF          L1383
    00001E1E              L1372:                            
      Monochrome   988            }
      Monochrome   989    }
    00001E1E 7F38                   ADD         #56,R15
    00001E20 4F16                   LDS.L       @R15+,MACL
    00001E22 4F26                   LDS.L       @R15+,PR
    00001E24 68F6                   MOV.L       @R15+,R8
    00001E26 69F6                   MOV.L       @R15+,R9
    00001E28 6AF6                   MOV.L       @R15+,R10
    00001E2A 6BF6                   MOV.L       @R15+,R11
    00001E2C 6CF6                   MOV.L       @R15+,R12
    00001E2E 6DF6                   MOV.L       @R15+,R13
    00001E30 000B                   RTS
    00001E32 6EF6                   MOV.L       @R15+,R14
      Monochrome   990    #endif
      Monochrome   991    
      Monochrome   992    #ifdef ML_BMP_XOR_CL
      Monochrome   993    void ML_bmp_xor_cl(const unsigned char *bmp, int x, int y, int width, int height)
    00001E34              _ML_bmp_xor_cl:                  ; function: ML_bmp_xor_cl
                                                           ; frame size=92
    00001E34 2FE6                   MOV.L       R14,@-R15
    00001E36 E05C                   MOV         #92,R0
    00001E38 2FD6                   MOV.L       R13,@-R15
    00001E3A 2FC6                   MOV.L       R12,@-R15
    00001E3C 2FB6                   MOV.L       R11,@-R15
    00001E3E 2FA6                   MOV.L       R10,@-R15
    00001E40 2F96                   MOV.L       R9,@-R15
    00001E42 6963                   MOV         R6,R9
    00001E44 2F86                   MOV.L       R8,@-R15
      Monochrome   994    {
      Monochrome   995            unsigned short line;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome   996            char shift, *screen, *p;
      Monochrome   997            int i, j, real_width, begin_x, end_x, begin_y, end_y;
      Monochrome   998            char bool1=1, bool2=1, bool3;
    00001E46 E601                   MOV         #1,R6
    00001E48 4F22                   STS.L       PR,@-R15
    00001E4A 4F12                   STS.L       MACL,@-R15
    00001E4C 7FC8                   ADD         #-56,R15
    00001E4E 1F45                   MOV.L       R4,@(20,R15)
    00001E50 1F72                   MOV.L       R7,@(8,R15)
    00001E52 04FE                   MOV.L       @(R0,R15),R4
    00001E54 E01C                   MOV         #28,R0
    00001E56 0F64                   MOV.B       R6,@(R0,R15)
    00001E58 E034                   MOV         #52,R0
    00001E5A 0F64                   MOV.B       R6,@(R0,R15)
      Monochrome   999            if(!bmp || x<1-width || x>127 || y<1-height || y>63 || height<1 || width<1) return;
    00001E5C 53F5                   MOV.L       @(20,R15),R3
    00001E5E 2338                   TST         R3,R3
    00001E60 8B01                   BF          L1711
    00001E62 A103                   BRA         L1396
    00001E64 0009                   NOP
    00001E66              L1711:                            
    00001E66 E201                   MOV         #1,R2
    00001E68 53F2                   MOV.L       @(8,R15),R3
    00001E6A 3238                   SUB         R3,R2
    00001E6C 3523                   CMP/GE      R2,R5
    00001E6E 8901                   BT          L1712
    00001E70 A0FC                   BRA         L1396
    00001E72 0009                   NOP
    00001E74              L1712:                            
    00001E74 E17F                   MOV         #127,R1
    00001E76 3517                   CMP/GT      R1,R5
    00001E78 8B01                   BF          L1713
    00001E7A A0F7                   BRA         L1396
    00001E7C 0009                   NOP
    00001E7E              L1713:                            
    00001E7E E001                   MOV         #1,R0
    00001E80 3048                   SUB         R4,R0
    00001E82 3903                   CMP/GE      R0,R9
    00001E84 8901                   BT          L1714
    00001E86 A0F1                   BRA         L1396
    00001E88 0009                   NOP
    00001E8A              L1714:                            
    00001E8A E23F                   MOV         #63,R2
    00001E8C 3927                   CMP/GT      R2,R9
    00001E8E 8B01                   BF          L1715
    00001E90 A0EC                   BRA         L1396
    00001E92 0009                   NOP
    00001E94              L1715:                            
    00001E94 E001                   MOV         #1,R0
    00001E96 3403                   CMP/GE      R0,R4
    00001E98 8901                   BT          L1716
    00001E9A A0E7                   BRA         L1396
    00001E9C 0009                   NOP
    00001E9E              L1716:                            
    00001E9E 52F2                   MOV.L       @(8,R15),R2
    00001EA0 3203                   CMP/GE      R0,R2
    00001EA2 8901                   BT          L1717




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001EA4 A0E2                   BRA         L1396
    00001EA6 0009                   NOP
    00001EA8              L1717:                            
      Monochrome  1000            p = (char*)&line;
      Monochrome  1001            real_width = (width-1>>3<<3)+8;
    00001EA8 52F2                   MOV.L       @(8,R15),R2
    00001EAA 6BF3                   MOV         R15,R11
    00001EAC 72FF                   ADD         #-1,R2
    00001EAE 4221                   SHAR        R2
    00001EB0 4221                   SHAR        R2
    00001EB2 4221                   SHAR        R2
    00001EB4 4208                   SHLL2       R2
    00001EB6 4200                   SHLL        R2
    00001EB8 7208                   ADD         #8,R2
      Monochrome  1002            if(y < 0) begin_y = -y;
    00001EBA 4911                   CMP/PZ      R9
    00001EBC 1F23                   MOV.L       R2,@(12,R15)
    00001EBE 8D02                   BT/S        L1397
    00001EC0 E600                   MOV         #0,R6
    00001EC2 A001                   BRA         L1398
    00001EC4 689B                   NEG         R9,R8
    00001EC6              L1397:                            
      Monochrome  1003            else begin_y = 0;
    00001EC6 6863                   MOV         R6,R8
    00001EC8              L1398:                            
      Monochrome  1004            if(y+height > 64) end_y = 64-y;
    00001EC8 E740                   MOV         #64,R7
    00001ECA 6393                   MOV         R9,R3
    00001ECC 334C                   ADD         R4,R3
    00001ECE 3377                   CMP/GT      R7,R3
    00001ED0 8B02                   BF          L1399
    00001ED2 3798                   SUB         R9,R7
    00001ED4 A001                   BRA         L1400
    00001ED6 1F7C                   MOV.L       R7,@(48,R15)
    00001ED8              L1399:                            
      Monochrome  1005            else end_y = height;
    00001ED8 1F4C                   MOV.L       R4,@(48,R15)
    00001EDA              L1400:                            
      Monochrome  1006            shift = 8-(x&7);
    00001EDA E307                   MOV         #7,R3
    00001EDC 2359                   AND         R5,R3
    00001EDE E408                   MOV         #8,R4
    00001EE0 3438                   SUB         R3,R4
    00001EE2 4511                   CMP/PZ      R5
    00001EE4 8D0A                   BT/S        L1401
    00001EE6 6E4E                   EXTS.B      R4,R14
      Monochrome  1007            if(x<0)
      Monochrome  1008            {
      Monochrome  1009                    begin_x = -x>>3;
    00001EE8 6C5B                   NEG         R5,R12
    00001EEA 4C21                   SHAR        R12
    00001EEC 4C21                   SHAR        R12
    00001EEE 4C21                   SHAR        R12
      Monochrome  1010                    if(shift != 8) bool1 = 0;
    00001EF0 60E3                   MOV         R14,R0
    00001EF2 8808                   CMP/EQ      #8,R0
    00001EF4 8903                   BT          L1403




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001EF6 E01C                   MOV         #28,R0
    00001EF8 A001                   BRA         L1403
    00001EFA 0F64                   MOV.B       R6,@(R0,R15)
    00001EFC              L1401:                            
      Monochrome  1011            } else begin_x = 0;
    00001EFC 6C63                   MOV         R6,R12
    00001EFE              L1403:                            
    00001EFE 6253                   MOV         R5,R2
    00001F00 9342                   MOV.W       L1718,R3   ; H'0080
    00001F02 4221                   SHAR        R2
    00001F04 4221                   SHAR        R2
    00001F06 4221                   SHAR        R2
    00001F08 1F21                   MOV.L       R2,@(4,R15)
    00001F0A 54F3                   MOV.L       @(12,R15),R4
    00001F0C 51F3                   MOV.L       @(12,R15),R1
    00001F0E 74FF                   ADD         #-1,R4
    00001F10 4421                   SHAR        R4
    00001F12 4421                   SHAR        R4
    00001F14 4421                   SHAR        R4
    00001F16 315C                   ADD         R5,R1
    00001F18 3137                   CMP/GT      R3,R1
    00001F1A 8B04                   BF          L1404
      Monochrome  1012            if(x+real_width > 128) end_x = 15-(x>>3), bool2 = 0;
    00001F1C ED0F                   MOV         #15,R13
    00001F1E 3D28                   SUB         R2,R13
    00001F20 E034                   MOV         #52,R0
    00001F22 A001                   BRA         L1405
    00001F24 0F64                   MOV.B       R6,@(R0,R15)
    00001F26              L1404:                            
      Monochrome  1013            else end_x = real_width-1>>3;
    00001F26 6D43                   MOV         R4,R13
    00001F28              L1405:                            
      Monochrome  1014            bool3 = (end_x == real_width-1>>3);
      Monochrome  1015            screen = ML_vram_adress()+(y+begin_y<<4)+(x>>3);
    00001F28 D318                   MOV.L       L1718+4,R3 ; _ML_vram_adress
    00001F2A 3D40                   CMP/EQ      R4,R13
    00001F2C 0029                   MOVT        R0
    00001F2E 61F3                   MOV         R15,R1
    00001F30 712C                   ADD         #44,R1
    00001F32 430B                   JSR         @R3
    00001F34 2100                   MOV.B       R0,@R1
    00001F36 6A93                   MOV         R9,R10
    00001F38 53F1                   MOV.L       @(4,R15),R3
    00001F3A 61B3                   MOV         R11,R1
      Monochrome  1016    
      Monochrome  1017            for(i=begin_y ; i<end_y ; i++)
    00001F3C 1F86                   MOV.L       R8,@(24,R15)
    00001F3E 3A8C                   ADD         R8,R10
    00001F40 54F3                   MOV.L       @(12,R15),R4
    00001F42 7101                   ADD         #1,R1
    00001F44 4A08                   SHLL2       R10
    00001F46 4A08                   SHLL2       R10
    00001F48 3A0C                   ADD         R0,R10
    00001F4A 3A3C                   ADD         R3,R10
    00001F4C 4421                   SHAR        R4
    00001F4E 4421                   SHAR        R4
    00001F50 4421                   SHAR        R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F52 1F44                   MOV.L       R4,@(16,R15)
    00001F54 53F6                   MOV.L       @(24,R15),R3
    00001F56 0437                   MUL.L       R3,R4
    00001F58 52F5                   MOV.L       @(20,R15),R2
    00001F5A 63C3                   MOV         R12,R3
    00001F5C 041A                   STS         MACL,R4
    00001F5E 6843                   MOV         R4,R8
    00001F60 38DC                   ADD         R13,R8
    00001F62 382C                   ADD         R2,R8
    00001F64 6943                   MOV         R4,R9
    00001F66 34CC                   ADD         R12,R4
    00001F68 342C                   ADD         R2,R4
    00001F6A 7301                   ADD         #1,R3
    00001F6C 1F48                   MOV.L       R4,@(32,R15)
    00001F6E 1F11                   MOV.L       R1,@(4,R15)
    00001F70 1F3A                   MOV.L       R3,@(40,R15)
    00001F72 52F2                   MOV.L       @(8,R15),R2
    00001F74 50F3                   MOV.L       @(12,R15),R0
    00001F76 3028                   SUB         R2,R0
    00001F78 E1FF                   MOV         #-1,R1
    00001F7A 410C                   SHAD        R0,R1
    00001F7C 1F13                   MOV.L       R1,@(12,R15)
    00001F7E 55F4                   MOV.L       @(16,R15),R5
    00001F80 1F59                   MOV.L       R5,@(36,R15)
    00001F82 1F54                   MOV.L       R5,@(16,R15)
    00001F84 A06E                   BRA         L1406
    00001F86 1F52                   MOV.L       R5,@(8,R15)
    00001F88              L1718:                            
    00001F88 0080                   .DATA.W     H'0080
    00001F8A 0000                   .DATA.W     0
    00001F8C <00000000>             .DATA.L     _ML_vram_adress
    00001F90              L1407:                            
      Monochrome  1018            {
      Monochrome  1019                    if(begin_x < end_x)
    00001F90 3CD3                   CMP/GE      R13,R12
    00001F92 8938                   BT          L1408
      Monochrome  1020                    {
      Monochrome  1021                            line = bmp[i*(real_width>>3)+begin_x] << shift;
    00001F94 53F8                   MOV.L       @(32,R15),R3
    00001F96 64C3                   MOV         R12,R4
    00001F98 6230                   MOV.B       @R3,R2
    00001F9A E01C                   MOV         #28,R0
    00001F9C 622C                   EXTU.B      R2,R2
    00001F9E 42ED                   SHLD        R14,R2
    00001FA0 2F21                   MOV.W       R2,@R15
    00001FA2 03FC                   MOV.B       @(R0,R15),R3
    00001FA4 2338                   TST         R3,R3
    00001FA6 8D04                   BT/S        L1409
    00001FA8 34AC                   ADD         R10,R4
      Monochrome  1022                            if(bool1) screen[begin_x] ^= *p;
    00001FAA 63B0                   MOV.B       @R11,R3
    00001FAC 6140                   MOV.B       @R4,R1
    00001FAE 213A                   XOR         R3,R1
    00001FB0 2410                   MOV.B       R1,@R4
    00001FB2              L1409:                            
      Monochrome  1023                            if(shift!=8) screen[begin_x+1] ^= *(p+1);
    00001FB2 60E3                   MOV         R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001FB4 8808                   CMP/EQ      #8,R0
    00001FB6 8904                   BT          L1410
    00001FB8 52F1                   MOV.L       @(4,R15),R2
    00001FBA 6320                   MOV.B       @R2,R3
    00001FBC 8441                   MOV.B       @(1,R4),R0
    00001FBE 203A                   XOR         R3,R0
    00001FC0 8041                   MOV.B       R0,@(1,R4)
    00001FC2              L1410:                            
      Monochrome  1024                            for(j=begin_x+1 ; j<end_x ; j++)
    00001FC2 54FA                   MOV.L       @(40,R15),R4
    00001FC4 53F5                   MOV.L       @(20,R15),R3
    00001FC6 34D3                   CMP/GE      R13,R4
    00001FC8 6643                   MOV         R4,R6
    00001FCA 36AC                   ADD         R10,R6
    00001FCC 6563                   MOV         R6,R5
    00001FCE 7501                   ADD         #1,R5
    00001FD0 6763                   MOV         R6,R7
    00001FD2 6693                   MOV         R9,R6
    00001FD4 364C                   ADD         R4,R6
    00001FD6 8D16                   BT/S        L1408
    00001FD8 363C                   ADD         R3,R6
    00001FDA              L1412:                            
      Monochrome  1025                            {
      Monochrome  1026                                    line = bmp[i*(real_width>>3)+j] << shift;
      Monochrome  1027                                    screen[j] ^= *p;
      Monochrome  1028                                    if(shift!=8) screen[j+1] ^= *(p+1);
    00001FDA 60E3                   MOV         R14,R0
    00001FDC 6360                   MOV.B       @R6,R3
    00001FDE 8808                   CMP/EQ      #8,R0
    00001FE0 633C                   EXTU.B      R3,R3
    00001FE2 43ED                   SHLD        R14,R3
    00001FE4 2F31                   MOV.W       R3,@R15
    00001FE6 62B0                   MOV.B       @R11,R2
    00001FE8 6170                   MOV.B       @R7,R1
    00001FEA 212A                   XOR         R2,R1
    00001FEC 8D05                   BT/S        L1413
    00001FEE 2710                   MOV.B       R1,@R7
    00001FF0 52F1                   MOV.L       @(4,R15),R2
    00001FF2 6320                   MOV.B       @R2,R3
    00001FF4 6150                   MOV.B       @R5,R1
    00001FF6 213A                   XOR         R3,R1
    00001FF8 2510                   MOV.B       R1,@R5
    00001FFA              L1413:                            
    00001FFA 7401                   ADD         #1,R4
    00001FFC 7501                   ADD         #1,R5
    00001FFE 7701                   ADD         #1,R7
    00002000 34D3                   CMP/GE      R13,R4
    00002002 8FEA                   BF/S        L1412
    00002004 7601                   ADD         #1,R6
    00002006              L1408:                            
      Monochrome  1029                            }
      Monochrome  1030                    }
      Monochrome  1031                    line = bmp[i*(real_width>>3)+end_x];
      Monochrome  1032                    if(bool3) line &= -1<<real_width-width;
    00002006 E02C                   MOV         #44,R0
    00002008 6280                   MOV.B       @R8,R2
    0000200A 622C                   EXTU.B      R2,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000200C 2F21                   MOV.W       R2,@R15
    0000200E 03FC                   MOV.B       @(R0,R15),R3
    00002010 2338                   TST         R3,R3
    00002012 8903                   BT          L1414
    00002014 53F3                   MOV.L       @(12,R15),R3
    00002016 61F1                   MOV.W       @R15,R1
    00002018 2139                   AND         R3,R1
    0000201A 2F11                   MOV.W       R1,@R15
    0000201C              L1414:                            
      Monochrome  1033                    line <<= shift;
    0000201C 62F1                   MOV.W       @R15,R2
    0000201E 64D3                   MOV         R13,R4
    00002020 42ED                   SHLD        R14,R2
    00002022 3CD3                   CMP/GE      R13,R12
    00002024 2F21                   MOV.W       R2,@R15
    00002026 8F04                   BF/S        L1416
    00002028 34AC                   ADD         R10,R4
    0000202A E01C                   MOV         #28,R0
    0000202C 01FC                   MOV.B       @(R0,R15),R1
    0000202E 2118                   TST         R1,R1
    00002030 8903                   BT          L1415
    00002032              L1416:                            
      Monochrome  1034                    if(begin_x < end_x || bool1) screen[end_x] ^= *p;
    00002032 63B0                   MOV.B       @R11,R3
    00002034 6240                   MOV.B       @R4,R2
    00002036 223A                   XOR         R3,R2
    00002038 2420                   MOV.B       R2,@R4
    0000203A              L1415:                            
      Monochrome  1035                    if(bool2) screen[end_x+1] ^= *(p+1);
    0000203A E034                   MOV         #52,R0
    0000203C 01FC                   MOV.B       @(R0,R15),R1
    0000203E 2118                   TST         R1,R1
    00002040 8D05                   BT/S        L1417
      Monochrome  1036                    screen += 16;
    00002042 7A10                   ADD         #16,R10
    00002044 51F1                   MOV.L       @(4,R15),R1
    00002046 6310                   MOV.B       @R1,R3
    00002048 8441                   MOV.B       @(1,R4),R0
    0000204A 203A                   XOR         R3,R0
    0000204C 8041                   MOV.B       R0,@(1,R4)
    0000204E              L1417:                            
    0000204E 53F6                   MOV.L       @(24,R15),R3
    00002050 7301                   ADD         #1,R3
    00002052 1F36                   MOV.L       R3,@(24,R15)
    00002054 52F9                   MOV.L       @(36,R15),R2
    00002056 382C                   ADD         R2,R8
    00002058 51F4                   MOV.L       @(16,R15),R1
    0000205A 391C                   ADD         R1,R9
    0000205C 53F8                   MOV.L       @(32,R15),R3
    0000205E 50F2                   MOV.L       @(8,R15),R0
    00002060 303C                   ADD         R3,R0
    00002062 1F08                   MOV.L       R0,@(32,R15)
    00002064              L1406:                            
    00002064 53FC                   MOV.L       @(48,R15),R3
    00002066 51F6                   MOV.L       @(24,R15),R1
    00002068 3133                   CMP/GE      R3,R1
    0000206A 8B91                   BF          L1407




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000206C              L1396:                            
      Monochrome  1037            }
      Monochrome  1038    }
    0000206C 7F38                   ADD         #56,R15
    0000206E 4F16                   LDS.L       @R15+,MACL
    00002070 4F26                   LDS.L       @R15+,PR
    00002072 68F6                   MOV.L       @R15+,R8
    00002074 69F6                   MOV.L       @R15+,R9
    00002076 6AF6                   MOV.L       @R15+,R10
    00002078 6BF6                   MOV.L       @R15+,R11
    0000207A 6CF6                   MOV.L       @R15+,R12
    0000207C 6DF6                   MOV.L       @R15+,R13
    0000207E 000B                   RTS
    00002080 6EF6                   MOV.L       @R15+,R14
      Monochrome  1039    
      Monochrome  1040    #endif
      Monochrome  1041    
      Monochrome  1042    #ifdef ML_BMP_8_OR
      Monochrome  1043    void ML_bmp_8_or(const unsigned char *bmp, int x, int y)
    00002082              _ML_bmp_8_or:                    ; function: ML_bmp_8_or
                                                           ; frame size=36
    00002082 2FE6                   MOV.L       R14,@-R15
    00002084 2FD6                   MOV.L       R13,@-R15
    00002086 6E63                   MOV         R6,R14
    00002088 2FC6                   MOV.L       R12,@-R15
    0000208A 6D53                   MOV         R5,R13
    0000208C 2FB6                   MOV.L       R11,@-R15
      Monochrome  1044    {
      Monochrome  1045            unsigned short line;
      Monochrome  1046            char i, shift, begin=0, end=8, *screen, *p=(char*)&line;
    0000208E EB00                   MOV         #0,R11
    00002090 2FA6                   MOV.L       R10,@-R15
    00002092 2F96                   MOV.L       R9,@-R15
    00002094 4F22                   STS.L       PR,@-R15
    00002096 7FF8                   ADD         #-8,R15
    00002098 1F41                   MOV.L       R4,@(4,R15)
    0000209A E408                   MOV         #8,R4
      Monochrome  1047            if(!bmp || x<0 || x>120 || y<-7 || y>63) return;
    0000209C 53F1                   MOV.L       @(4,R15),R3
    0000209E 6943                   MOV         R4,R9
    000020A0 2338                   TST         R3,R3
    000020A2 8D43                   BT/S        L1420
    000020A4 6CF3                   MOV         R15,R12
    000020A6 4D11                   CMP/PZ      R13
    000020A8 8B40                   BF          L1420
    000020AA E278                   MOV         #120,R2
    000020AC 3D27                   CMP/GT      R2,R13
    000020AE 893D                   BT          L1420
    000020B0 E1F9                   MOV         #-7,R1
    000020B2 3E13                   CMP/GE      R1,R14
    000020B4 8B3A                   BF          L1420
    000020B6 E03F                   MOV         #63,R0
    000020B8 3E07                   CMP/GT      R0,R14
    000020BA 8937                   BT          L1420
      Monochrome  1048            if(y < 0) begin = -y;
    000020BC 4E11                   CMP/PZ      R14
    000020BE 8D01                   BT/S        L1421




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1049            if(y > 56) end = 64-y;
    000020C0 E338                   MOV         #56,R3
    000020C2 6BEB                   NEG         R14,R11
    000020C4              L1421:                            
    000020C4 3E37                   CMP/GT      R3,R14
    000020C6 8F02                   BF/S        L1422
      Monochrome  1050            shift = 8-(x&7);
    000020C8 E307                   MOV         #7,R3
    000020CA E940                   MOV         #64,R9
    000020CC 39E8                   SUB         R14,R9
    000020CE              L1422:                            
    000020CE 23D9                   AND         R13,R3
      Monochrome  1051            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000020D0 D24B                   MOV.L       L1719+2,R2 ; _ML_vram_adress
    000020D2 6A43                   MOV         R4,R10
    000020D4 420B                   JSR         @R2
    000020D6 3A38                   SUB         R3,R10
    000020D8 63BE                   EXTS.B      R11,R3
    000020DA 33EC                   ADD         R14,R3
    000020DC 4308                   SHLL2       R3
    000020DE 4308                   SHLL2       R3
    000020E0 303C                   ADD         R3,R0
    000020E2 4D21                   SHAR        R13
    000020E4 53F1                   MOV.L       @(4,R15),R3
    000020E6 6EC3                   MOV         R12,R14
    000020E8 4D21                   SHAR        R13
    000020EA 4D21                   SHAR        R13
    000020EC 6603                   MOV         R0,R6
    000020EE 36DC                   ADD         R13,R6
      Monochrome  1052            for(i=begin ; i<end ; i++)
    000020F0 65B3                   MOV         R11,R5
    000020F2 645E                   EXTS.B      R5,R4
    000020F4 343C                   ADD         R3,R4
    000020F6 679E                   EXTS.B      R9,R7
    000020F8 625E                   EXTS.B      R5,R2
    000020FA 3273                   CMP/GE      R7,R2
    000020FC 8D16                   BT/S        L1420
    000020FE 7E01                   ADD         #1,R14
    00002100              L1424:                            
      Monochrome  1053            {
      Monochrome  1054                    line = bmp[i]<<shift;
    00002100 6340                   MOV.B       @R4,R3
    00002102 6DAE                   EXTS.B      R10,R13
    00002104 633C                   EXTU.B      R3,R3
    00002106 43DD                   SHLD        R13,R3
    00002108 2F31                   MOV.W       R3,@R15
      Monochrome  1055                    screen[0] |= *p;
      Monochrome  1056                    if(shift!=8) screen[1] |= *(p+1);
    0000210A 60D3                   MOV         R13,R0
    0000210C 62C0                   MOV.B       @R12,R2
    0000210E 8808                   CMP/EQ      #8,R0
    00002110 6160                   MOV.B       @R6,R1
    00002112 212B                   OR          R2,R1
    00002114 8D04                   BT/S        L1425
    00002116 2610                   MOV.B       R1,@R6
    00002118 63E0                   MOV.B       @R14,R3
    0000211A 8461                   MOV.B       @(1,R6),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000211C 203B                   OR          R3,R0
    0000211E 8061                   MOV.B       R0,@(1,R6)
    00002120              L1425:                            
      Monochrome  1057                    screen += 16;
    00002120 7610                   ADD         #16,R6
    00002122 7501                   ADD         #1,R5
    00002124 635E                   EXTS.B      R5,R3
    00002126 3373                   CMP/GE      R7,R3
    00002128 8FEA                   BF/S        L1424
    0000212A 7401                   ADD         #1,R4
    0000212C              L1420:                            
      Monochrome  1058            }
      Monochrome  1059    }
    0000212C 7F08                   ADD         #8,R15
    0000212E 4F26                   LDS.L       @R15+,PR
    00002130 69F6                   MOV.L       @R15+,R9
    00002132 6AF6                   MOV.L       @R15+,R10
    00002134 6BF6                   MOV.L       @R15+,R11
    00002136 6CF6                   MOV.L       @R15+,R12
    00002138 6DF6                   MOV.L       @R15+,R13
    0000213A 000B                   RTS
    0000213C 6EF6                   MOV.L       @R15+,R14
      Monochrome  1060    #endif
      Monochrome  1061    
      Monochrome  1062    #ifdef ML_BMP_8_AND
      Monochrome  1063    void ML_bmp_8_and(const unsigned char *bmp, int x, int y)
    0000213E              _ML_bmp_8_and:                   ; function: ML_bmp_8_and
                                                           ; frame size=36
    0000213E 2FE6                   MOV.L       R14,@-R15
    00002140 2FD6                   MOV.L       R13,@-R15
    00002142 6E63                   MOV         R6,R14
    00002144 2FC6                   MOV.L       R12,@-R15
    00002146 6D53                   MOV         R5,R13
    00002148 2FB6                   MOV.L       R11,@-R15
      Monochrome  1064    {
      Monochrome  1065            unsigned short line;
      Monochrome  1066            char i, shift, begin=0, end=8, *screen, *p=(char*)&line;
    0000214A EB00                   MOV         #0,R11
    0000214C 2FA6                   MOV.L       R10,@-R15
    0000214E 2F96                   MOV.L       R9,@-R15
    00002150 4F22                   STS.L       PR,@-R15
    00002152 7FF8                   ADD         #-8,R15
    00002154 1F41                   MOV.L       R4,@(4,R15)
    00002156 E408                   MOV         #8,R4
      Monochrome  1067            if(!bmp || x<0 || x>120 || y<-7 || y>63) return;
    00002158 53F1                   MOV.L       @(4,R15),R3
    0000215A 6943                   MOV         R4,R9
    0000215C 2338                   TST         R3,R3
    0000215E 8D45                   BT/S        L1428
    00002160 6CF3                   MOV         R15,R12
    00002162 4D11                   CMP/PZ      R13
    00002164 8B42                   BF          L1428
    00002166 E278                   MOV         #120,R2
    00002168 3D27                   CMP/GT      R2,R13
    0000216A 893F                   BT          L1428
    0000216C E1F9                   MOV         #-7,R1
    0000216E 3E13                   CMP/GE      R1,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002170 8B3C                   BF          L1428
    00002172 E03F                   MOV         #63,R0
    00002174 3E07                   CMP/GT      R0,R14
    00002176 8939                   BT          L1428
      Monochrome  1068            if(y < 0) begin = -y;
    00002178 4E11                   CMP/PZ      R14
    0000217A 8D01                   BT/S        L1429
      Monochrome  1069            if(y > 56) end = 64-y;
    0000217C E338                   MOV         #56,R3
    0000217E 6BEB                   NEG         R14,R11
    00002180              L1429:                            
    00002180 3E37                   CMP/GT      R3,R14
    00002182 8F02                   BF/S        L1430
      Monochrome  1070            shift = 8-(x&7);
    00002184 E307                   MOV         #7,R3
    00002186 E940                   MOV         #64,R9
    00002188 39E8                   SUB         R14,R9
    0000218A              L1430:                            
    0000218A 23D9                   AND         R13,R3
      Monochrome  1071            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    0000218C D21C                   MOV.L       L1719+2,R2 ; _ML_vram_adress
    0000218E 6A43                   MOV         R4,R10
    00002190 420B                   JSR         @R2
    00002192 3A38                   SUB         R3,R10
    00002194 63BE                   EXTS.B      R11,R3
    00002196 33EC                   ADD         R14,R3
    00002198 4308                   SHLL2       R3
    0000219A 4308                   SHLL2       R3
    0000219C 303C                   ADD         R3,R0
    0000219E 4D21                   SHAR        R13
    000021A0 53F1                   MOV.L       @(4,R15),R3
    000021A2 6EC3                   MOV         R12,R14
    000021A4 4D21                   SHAR        R13
    000021A6 4D21                   SHAR        R13
    000021A8 6603                   MOV         R0,R6
    000021AA 36DC                   ADD         R13,R6
      Monochrome  1072            for(i=begin ; i<end ; i++)
    000021AC 65B3                   MOV         R11,R5
    000021AE 645E                   EXTS.B      R5,R4
    000021B0 343C                   ADD         R3,R4
    000021B2 679E                   EXTS.B      R9,R7
    000021B4 625E                   EXTS.B      R5,R2
    000021B6 3273                   CMP/GE      R7,R2
    000021B8 8D18                   BT/S        L1428
    000021BA 7E01                   ADD         #1,R14
    000021BC              L1432:                            
      Monochrome  1073            {
      Monochrome  1074                    line = ~((unsigned char)~bmp[i]<<shift);
    000021BC 6340                   MOV.B       @R4,R3
    000021BE 6DAE                   EXTS.B      R10,R13
    000021C0 6337                   NOT         R3,R3
    000021C2 633C                   EXTU.B      R3,R3
    000021C4 43DD                   SHLD        R13,R3
    000021C6 6337                   NOT         R3,R3
    000021C8 2F31                   MOV.W       R3,@R15
      Monochrome  1075                    screen[0] &= *p;
      Monochrome  1076                    if(shift!=8) screen[1] &= *(p+1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000021CA 60D3                   MOV         R13,R0
    000021CC 62C0                   MOV.B       @R12,R2
    000021CE 8808                   CMP/EQ      #8,R0
    000021D0 6160                   MOV.B       @R6,R1
    000021D2 2129                   AND         R2,R1
    000021D4 8D04                   BT/S        L1433
    000021D6 2610                   MOV.B       R1,@R6
    000021D8 63E0                   MOV.B       @R14,R3
    000021DA 8461                   MOV.B       @(1,R6),R0
    000021DC 2039                   AND         R3,R0
    000021DE 8061                   MOV.B       R0,@(1,R6)
    000021E0              L1433:                            
      Monochrome  1077                    screen += 16;
    000021E0 7610                   ADD         #16,R6
    000021E2 7501                   ADD         #1,R5
    000021E4 635E                   EXTS.B      R5,R3
    000021E6 3373                   CMP/GE      R7,R3
    000021E8 8FE8                   BF/S        L1432
    000021EA 7401                   ADD         #1,R4
    000021EC              L1428:                            
      Monochrome  1078            }
      Monochrome  1079    }
    000021EC 7F08                   ADD         #8,R15
    000021EE 4F26                   LDS.L       @R15+,PR
    000021F0 69F6                   MOV.L       @R15+,R9
    000021F2 6AF6                   MOV.L       @R15+,R10
    000021F4 6BF6                   MOV.L       @R15+,R11
    000021F6 6CF6                   MOV.L       @R15+,R12
    000021F8 6DF6                   MOV.L       @R15+,R13
    000021FA 000B                   RTS
    000021FC 6EF6                   MOV.L       @R15+,R14
    000021FE              L1719:                            
    000021FE 0000                   .DATA.W     0
    00002200 <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1080    #endif
      Monochrome  1081    
      Monochrome  1082    #ifdef ML_BMP_8_XOR
      Monochrome  1083    void ML_bmp_8_xor(const unsigned char *bmp, int x, int y)
    00002204              _ML_bmp_8_xor:                   ; function: ML_bmp_8_xor
                                                           ; frame size=40
    00002204 2FE6                   MOV.L       R14,@-R15
      Monochrome  1084    {
      Monochrome  1085            unsigned short line;
      Monochrome  1086            char i, shift, begin=0, end=8, *screen, *p=(char*)&line;
      Monochrome  1087            if(!bmp || x<0 || x>120 || y<-7 || y>63) return;
    00002206 6343                   MOV         R4,R3
    00002208 2FD6                   MOV.L       R13,@-R15
    0000220A 6E63                   MOV         R6,R14
    0000220C 2FC6                   MOV.L       R12,@-R15
    0000220E ED08                   MOV         #8,R13
    00002210 2FB6                   MOV.L       R11,@-R15
    00002212 2338                   TST         R3,R3
    00002214 2FA6                   MOV.L       R10,@-R15
    00002216 6B53                   MOV         R5,R11
    00002218 2F96                   MOV.L       R9,@-R15
    0000221A EA00                   MOV         #0,R10
    0000221C 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000221E 69D3                   MOV         R13,R9
    00002220 4F22                   STS.L       PR,@-R15
    00002222 7FF8                   ADD         #-8,R15
    00002224 1F41                   MOV.L       R4,@(4,R15)
    00002226 8D42                   BT/S        L1436
    00002228 6CF3                   MOV         R15,R12
    0000222A 4B11                   CMP/PZ      R11
    0000222C 8B3F                   BF          L1436
    0000222E E278                   MOV         #120,R2
    00002230 3B27                   CMP/GT      R2,R11
    00002232 893C                   BT          L1436
    00002234 E1F9                   MOV         #-7,R1
    00002236 3E13                   CMP/GE      R1,R14
    00002238 8B39                   BF          L1436
    0000223A E03F                   MOV         #63,R0
    0000223C 3E07                   CMP/GT      R0,R14
    0000223E 8936                   BT          L1436
      Monochrome  1088            if(y < 0) begin = -y;
    00002240 4E11                   CMP/PZ      R14
    00002242 8D01                   BT/S        L1437
      Monochrome  1089            if(y > 56) end = 64-y;
    00002244 E338                   MOV         #56,R3
    00002246 6AEB                   NEG         R14,R10
    00002248              L1437:                            
    00002248 3E37                   CMP/GT      R3,R14
    0000224A 8F02                   BF/S        L1438
      Monochrome  1090            shift = 8-(x&7);
    0000224C E307                   MOV         #7,R3
    0000224E E940                   MOV         #64,R9
    00002250 39E8                   SUB         R14,R9
    00002252              L1438:                            
    00002252 23B9                   AND         R11,R3
      Monochrome  1091            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00002254 D255                   MOV.L       L1720,R2   ; _ML_vram_adress
    00002256 68D3                   MOV         R13,R8
    00002258 420B                   JSR         @R2
    0000225A 3838                   SUB         R3,R8
    0000225C 63AE                   EXTS.B      R10,R3
    0000225E 33EC                   ADD         R14,R3
    00002260 4308                   SHLL2       R3
    00002262 4308                   SHLL2       R3
    00002264 303C                   ADD         R3,R0
    00002266 4B21                   SHAR        R11
    00002268 53F1                   MOV.L       @(4,R15),R3
    0000226A 679E                   EXTS.B      R9,R7
    0000226C 4B21                   SHAR        R11
    0000226E 4B21                   SHAR        R11
    00002270 6503                   MOV         R0,R5
    00002272 35BC                   ADD         R11,R5
      Monochrome  1092            for(i=begin ; i<end ; i++)
    00002274 64A3                   MOV         R10,R4
    00002276 664E                   EXTS.B      R4,R6
    00002278 363C                   ADD         R3,R6
    0000227A 6BC3                   MOV         R12,R11
    0000227C 624E                   EXTS.B      R4,R2
    0000227E 3273                   CMP/GE      R7,R2
    00002280 8D15                   BT/S        L1436




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002282 7B01                   ADD         #1,R11
    00002284              L1440:                            
      Monochrome  1093            {
      Monochrome  1094                    line = bmp[i]<<shift;
    00002284 6360                   MOV.B       @R6,R3
    00002286 6E8E                   EXTS.B      R8,R14
    00002288 633C                   EXTU.B      R3,R3
    0000228A 43ED                   SHLD        R14,R3
    0000228C 2F31                   MOV.W       R3,@R15
      Monochrome  1095                    screen[0] ^= *p;
      Monochrome  1096                    if(shift<8) screen[1] ^= *(p+1);
    0000228E 3ED3                   CMP/GE      R13,R14
    00002290 62C0                   MOV.B       @R12,R2
    00002292 6150                   MOV.B       @R5,R1
    00002294 212A                   XOR         R2,R1
    00002296 8D04                   BT/S        L1441
    00002298 2510                   MOV.B       R1,@R5
    0000229A 63B0                   MOV.B       @R11,R3
    0000229C 8451                   MOV.B       @(1,R5),R0
    0000229E 203A                   XOR         R3,R0
    000022A0 8051                   MOV.B       R0,@(1,R5)
    000022A2              L1441:                            
      Monochrome  1097                    screen += 16;
    000022A2 7510                   ADD         #16,R5
    000022A4 7401                   ADD         #1,R4
    000022A6 634E                   EXTS.B      R4,R3
    000022A8 3373                   CMP/GE      R7,R3
    000022AA 8FEB                   BF/S        L1440
    000022AC 7601                   ADD         #1,R6
    000022AE              L1436:                            
      Monochrome  1098            }
      Monochrome  1099    }
    000022AE 7F08                   ADD         #8,R15
    000022B0 4F26                   LDS.L       @R15+,PR
    000022B2 68F6                   MOV.L       @R15+,R8
    000022B4 69F6                   MOV.L       @R15+,R9
    000022B6 6AF6                   MOV.L       @R15+,R10
    000022B8 6BF6                   MOV.L       @R15+,R11
    000022BA 6CF6                   MOV.L       @R15+,R12
    000022BC 6DF6                   MOV.L       @R15+,R13
    000022BE 000B                   RTS
    000022C0 6EF6                   MOV.L       @R15+,R14
      Monochrome  1100    #endif
      Monochrome  1101    
      Monochrome  1102    #ifdef ML_BMP_8_OR_CL
      Monochrome  1103    void ML_bmp_8_or_cl(const unsigned char *bmp, int x, int y)
    000022C2              _ML_bmp_8_or_cl:                 ; function: ML_bmp_8_or_cl
                                                           ; frame size=44
    000022C2 2FE6                   MOV.L       R14,@-R15
    000022C4 2FD6                   MOV.L       R13,@-R15
    000022C6 6E63                   MOV         R6,R14
    000022C8 2FC6                   MOV.L       R12,@-R15
    000022CA 6D53                   MOV         R5,R13
    000022CC 2FB6                   MOV.L       R11,@-R15
      Monochrome  1104    {
      Monochrome  1105            unsigned short line;
      Monochrome  1106            char i, shift, begin=0, end=8, bool1=1, bool2=1, *screen, *p=(char*)&line;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000022CE E601                   MOV         #1,R6
    000022D0 2FA6                   MOV.L       R10,@-R15
    000022D2 E508                   MOV         #8,R5
    000022D4 2F96                   MOV.L       R9,@-R15
    000022D6 6C63                   MOV         R6,R12
    000022D8 2F86                   MOV.L       R8,@-R15
    000022DA 6053                   MOV         R5,R0
    000022DC 4F22                   STS.L       PR,@-R15
    000022DE 6963                   MOV         R6,R9
    000022E0 7FF4                   ADD         #-12,R15
    000022E2 1F41                   MOV.L       R4,@(4,R15)
    000022E4 80F8                   MOV.B       R0,@(8,R15)
    000022E6 E400                   MOV         #0,R4
      Monochrome  1107            if(!bmp || x<-7 || x>127 || y<-7 || y>63) return;
    000022E8 53F1                   MOV.L       @(4,R15),R3
    000022EA 6A43                   MOV         R4,R10
    000022EC 2338                   TST         R3,R3
    000022EE 8D53                   BT/S        L1444
    000022F0 6BF3                   MOV         R15,R11
    000022F2 E3F9                   MOV         #-7,R3
    000022F4 3D33                   CMP/GE      R3,R13
    000022F6 8B4F                   BF          L1444
    000022F8 E17F                   MOV         #127,R1
    000022FA 3D17                   CMP/GT      R1,R13
    000022FC 894C                   BT          L1444
    000022FE 3E33                   CMP/GE      R3,R14
    00002300 8B4A                   BF          L1444
    00002302 E23F                   MOV         #63,R2
    00002304 3E27                   CMP/GT      R2,R14
    00002306 8947                   BT          L1444
      Monochrome  1108            if(y < 0) begin = -y;
    00002308 4E11                   CMP/PZ      R14
    0000230A 8D01                   BT/S        L1445
      Monochrome  1109            if(y > 56) end = 64-y;
    0000230C E238                   MOV         #56,R2
    0000230E 6AEB                   NEG         R14,R10
    00002310              L1445:                            
    00002310 3E27                   CMP/GT      R2,R14
    00002312 8B02                   BF          L1446
    00002314 E040                   MOV         #64,R0
    00002316 30E8                   SUB         R14,R0
    00002318 80F8                   MOV.B       R0,@(8,R15)
    0000231A              L1446:                            
      Monochrome  1110            shift = 8-(x&7);
    0000231A E307                   MOV         #7,R3
    0000231C 23D9                   AND         R13,R3
    0000231E 6853                   MOV         R5,R8
      Monochrome  1111            if(x < 0) bool1 = 0;
    00002320 4D11                   CMP/PZ      R13
    00002322 8D01                   BT/S        L1447
    00002324 3838                   SUB         R3,R8
    00002326 6943                   MOV         R4,R9
    00002328              L1447:                            
      Monochrome  1112            if(x>120 || shift==8) bool2 = 0;
    00002328 E378                   MOV         #120,R3
    0000232A 3D37                   CMP/GT      R3,R13
    0000232C 8902                   BT          L1449




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000232E 608E                   EXTS.B      R8,R0
    00002330 8808                   CMP/EQ      #8,R0
    00002332 8B00                   BF          L1448
    00002334              L1449:                            
    00002334 6C43                   MOV         R4,R12
    00002336              L1448:                            
      Monochrome  1113            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00002336 D31D                   MOV.L       L1720,R3   ; _ML_vram_adress
    00002338 430B                   JSR         @R3
    0000233A 0009                   NOP
    0000233C 53F1                   MOV.L       @(4,R15),R3
    0000233E 62AE                   EXTS.B      R10,R2
    00002340 32EC                   ADD         R14,R2
    00002342 4208                   SHLL2       R2
    00002344 4208                   SHLL2       R2
    00002346 302C                   ADD         R2,R0
    00002348 4D21                   SHAR        R13
    0000234A 4D21                   SHAR        R13
    0000234C 4D21                   SHAR        R13
    0000234E 6503                   MOV         R0,R5
    00002350 84F8                   MOV.B       @(8,R15),R0
    00002352 35DC                   ADD         R13,R5
      Monochrome  1114            for(i=begin ; i<end ; i++)
    00002354 64A3                   MOV         R10,R4
    00002356 664E                   EXTS.B      R4,R6
    00002358 363C                   ADD         R3,R6
    0000235A 6EB3                   MOV         R11,R14
    0000235C 6703                   MOV         R0,R7
    0000235E 624E                   EXTS.B      R4,R2
    00002360 3273                   CMP/GE      R7,R2
    00002362 8D19                   BT/S        L1444
    00002364 7E01                   ADD         #1,R14
    00002366              L1451:                            
      Monochrome  1115            {
      Monochrome  1116                    line = bmp[i]<<shift;
    00002366 628E                   EXTS.B      R8,R2
    00002368 6360                   MOV.B       @R6,R3
    0000236A 633C                   EXTU.B      R3,R3
    0000236C 432D                   SHLD        R2,R3
      Monochrome  1117                    if(bool1) screen[0] |= *p;
    0000236E 629E                   EXTS.B      R9,R2
    00002370 2228                   TST         R2,R2
    00002372 8D04                   BT/S        L1452
    00002374 2F31                   MOV.W       R3,@R15
    00002376 62B0                   MOV.B       @R11,R2
    00002378 6150                   MOV.B       @R5,R1
    0000237A 212B                   OR          R2,R1
    0000237C 2510                   MOV.B       R1,@R5
    0000237E              L1452:                            
      Monochrome  1118                    if(bool2) screen[1] |= *(p+1);
    0000237E 63CE                   EXTS.B      R12,R3
    00002380 2338                   TST         R3,R3
    00002382 8903                   BT          L1453
    00002384 63E0                   MOV.B       @R14,R3
    00002386 8451                   MOV.B       @(1,R5),R0
    00002388 203B                   OR          R3,R0
    0000238A 8051                   MOV.B       R0,@(1,R5)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000238C              L1453:                            
      Monochrome  1119                    screen += 16;
    0000238C 7510                   ADD         #16,R5
    0000238E 7401                   ADD         #1,R4
    00002390 634E                   EXTS.B      R4,R3
    00002392 3373                   CMP/GE      R7,R3
    00002394 8FE7                   BF/S        L1451
    00002396 7601                   ADD         #1,R6
    00002398              L1444:                            
      Monochrome  1120            }
      Monochrome  1121    }
    00002398 7F0C                   ADD         #12,R15
    0000239A 4F26                   LDS.L       @R15+,PR
    0000239C 68F6                   MOV.L       @R15+,R8
    0000239E 69F6                   MOV.L       @R15+,R9
    000023A0 6AF6                   MOV.L       @R15+,R10
    000023A2 6BF6                   MOV.L       @R15+,R11
    000023A4 6CF6                   MOV.L       @R15+,R12
    000023A6 6DF6                   MOV.L       @R15+,R13
    000023A8 000B                   RTS
    000023AA 6EF6                   MOV.L       @R15+,R14
    000023AC              L1720:                            
    000023AC <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1122    #endif
      Monochrome  1123    
      Monochrome  1124    #ifdef ML_BMP_8_AND_CL
      Monochrome  1125    void ML_bmp_8_and_cl(const unsigned char *bmp, int x, int y)
    000023B0              _ML_bmp_8_and_cl:                ; function: ML_bmp_8_and_cl
                                                           ; frame size=44
    000023B0 2FE6                   MOV.L       R14,@-R15
    000023B2 6E63                   MOV         R6,R14
    000023B4 2FD6                   MOV.L       R13,@-R15
      Monochrome  1126    {
      Monochrome  1127            unsigned short line;
      Monochrome  1128            char i, shift, begin=0, end=8, bool1=1, bool2=1, *screen, *p=(char*)&line;
    000023B6 E601                   MOV         #1,R6
    000023B8 2FC6                   MOV.L       R12,@-R15
    000023BA 6D53                   MOV         R5,R13
    000023BC 2FB6                   MOV.L       R11,@-R15
    000023BE 6C63                   MOV         R6,R12
    000023C0 2FA6                   MOV.L       R10,@-R15
    000023C2 E508                   MOV         #8,R5
    000023C4 2F96                   MOV.L       R9,@-R15
    000023C6 6053                   MOV         R5,R0
    000023C8 2F86                   MOV.L       R8,@-R15
    000023CA 6963                   MOV         R6,R9
    000023CC 4F22                   STS.L       PR,@-R15
    000023CE 7FF4                   ADD         #-12,R15
    000023D0 1F41                   MOV.L       R4,@(4,R15)
    000023D2 E400                   MOV         #0,R4
    000023D4 80F8                   MOV.B       R0,@(8,R15)
    000023D6 6A43                   MOV         R4,R10
      Monochrome  1129            if(!bmp || x<-7 || x>127 || y<-7 || y>63) return;
    000023D8 53F1                   MOV.L       @(4,R15),R3
    000023DA 2338                   TST         R3,R3
    000023DC 8D55                   BT/S        L1456
    000023DE 6BF3                   MOV         R15,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000023E0 E3F9                   MOV         #-7,R3
    000023E2 3D33                   CMP/GE      R3,R13
    000023E4 8B51                   BF          L1456
    000023E6 E17F                   MOV         #127,R1
    000023E8 3D17                   CMP/GT      R1,R13
    000023EA 894E                   BT          L1456
    000023EC 3E33                   CMP/GE      R3,R14
    000023EE 8B4C                   BF          L1456
    000023F0 E23F                   MOV         #63,R2
    000023F2 3E27                   CMP/GT      R2,R14
    000023F4 8949                   BT          L1456
      Monochrome  1130            if(y < 0) begin = -y;
    000023F6 4E11                   CMP/PZ      R14
    000023F8 8D01                   BT/S        L1457
      Monochrome  1131            if(y > 56) end = 64-y;
    000023FA E238                   MOV         #56,R2
    000023FC 6AEB                   NEG         R14,R10
    000023FE              L1457:                            
    000023FE 3E27                   CMP/GT      R2,R14
    00002400 8B02                   BF          L1458
    00002402 E040                   MOV         #64,R0
    00002404 30E8                   SUB         R14,R0
    00002406 80F8                   MOV.B       R0,@(8,R15)
    00002408              L1458:                            
      Monochrome  1132            shift = 8-(x&7);
    00002408 E307                   MOV         #7,R3
    0000240A 23D9                   AND         R13,R3
    0000240C 6853                   MOV         R5,R8
      Monochrome  1133            if(x < 0) bool1 = 0;
    0000240E 4D11                   CMP/PZ      R13
    00002410 8D01                   BT/S        L1459
    00002412 3838                   SUB         R3,R8
    00002414 6943                   MOV         R4,R9
    00002416              L1459:                            
      Monochrome  1134            if(x>120 || shift==8) bool2 = 0;
    00002416 E378                   MOV         #120,R3
    00002418 3D37                   CMP/GT      R3,R13
    0000241A 8902                   BT          L1461
    0000241C 608E                   EXTS.B      R8,R0
    0000241E 8808                   CMP/EQ      #8,R0
    00002420 8B00                   BF          L1460
    00002422              L1461:                            
    00002422 6C43                   MOV         R4,R12
    00002424              L1460:                            
      Monochrome  1135            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00002424 D358                   MOV.L       L1721,R3   ; _ML_vram_adress
    00002426 430B                   JSR         @R3
    00002428 0009                   NOP
    0000242A 62AE                   EXTS.B      R10,R2
    0000242C 53F1                   MOV.L       @(4,R15),R3
    0000242E 4D21                   SHAR        R13
    00002430 32EC                   ADD         R14,R2
    00002432 4208                   SHLL2       R2
    00002434 4208                   SHLL2       R2
    00002436 302C                   ADD         R2,R0
    00002438 4D21                   SHAR        R13
    0000243A 4D21                   SHAR        R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000243C 6503                   MOV         R0,R5
    0000243E 35DC                   ADD         R13,R5
    00002440 84F8                   MOV.B       @(8,R15),R0
      Monochrome  1136            for(i=begin ; i<end ; i++)
    00002442 64A3                   MOV         R10,R4
    00002444 664E                   EXTS.B      R4,R6
    00002446 363C                   ADD         R3,R6
    00002448 6EB3                   MOV         R11,R14
    0000244A 6703                   MOV         R0,R7
    0000244C 624E                   EXTS.B      R4,R2
    0000244E 3273                   CMP/GE      R7,R2
    00002450 8D1B                   BT/S        L1456
    00002452 7E01                   ADD         #1,R14
    00002454              L1463:                            
      Monochrome  1137            {
      Monochrome  1138                    line = ~((unsigned char)~bmp[i]<<shift);
    00002454 6360                   MOV.B       @R6,R3
    00002456 628E                   EXTS.B      R8,R2
    00002458 6337                   NOT         R3,R3
    0000245A 633C                   EXTU.B      R3,R3
    0000245C 432D                   SHLD        R2,R3
    0000245E 6337                   NOT         R3,R3
      Monochrome  1139                    if(bool1) screen[0] &= *p;
    00002460 629E                   EXTS.B      R9,R2
    00002462 2228                   TST         R2,R2
    00002464 8D04                   BT/S        L1464
    00002466 2F31                   MOV.W       R3,@R15
    00002468 62B0                   MOV.B       @R11,R2
    0000246A 6150                   MOV.B       @R5,R1
    0000246C 2129                   AND         R2,R1
    0000246E 2510                   MOV.B       R1,@R5
    00002470              L1464:                            
      Monochrome  1140                    if(bool2) screen[1] &= *(p+1);
    00002470 63CE                   EXTS.B      R12,R3
    00002472 2338                   TST         R3,R3
    00002474 8903                   BT          L1465
    00002476 63E0                   MOV.B       @R14,R3
    00002478 8451                   MOV.B       @(1,R5),R0
    0000247A 2039                   AND         R3,R0
    0000247C 8051                   MOV.B       R0,@(1,R5)
    0000247E              L1465:                            
      Monochrome  1141                    screen += 16;
    0000247E 7510                   ADD         #16,R5
    00002480 7401                   ADD         #1,R4
    00002482 634E                   EXTS.B      R4,R3
    00002484 3373                   CMP/GE      R7,R3
    00002486 8FE5                   BF/S        L1463
    00002488 7601                   ADD         #1,R6
    0000248A              L1456:                            
      Monochrome  1142            }
      Monochrome  1143    }
    0000248A 7F0C                   ADD         #12,R15
    0000248C 4F26                   LDS.L       @R15+,PR
    0000248E 68F6                   MOV.L       @R15+,R8
    00002490 69F6                   MOV.L       @R15+,R9
    00002492 6AF6                   MOV.L       @R15+,R10
    00002494 6BF6                   MOV.L       @R15+,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  110


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002496 6CF6                   MOV.L       @R15+,R12
    00002498 6DF6                   MOV.L       @R15+,R13
    0000249A 000B                   RTS
    0000249C 6EF6                   MOV.L       @R15+,R14
      Monochrome  1144    #endif
      Monochrome  1145    
      Monochrome  1146    #ifdef ML_BMP_8_XOR_CL
      Monochrome  1147    void ML_bmp_8_xor_cl(const unsigned char *bmp, int x, int y)
    0000249E              _ML_bmp_8_xor_cl:                ; function: ML_bmp_8_xor_cl
                                                           ; frame size=44
    0000249E 2FE6                   MOV.L       R14,@-R15
    000024A0 2FD6                   MOV.L       R13,@-R15
    000024A2 6E63                   MOV         R6,R14
    000024A4 2FC6                   MOV.L       R12,@-R15
    000024A6 6D53                   MOV         R5,R13
    000024A8 2FB6                   MOV.L       R11,@-R15
      Monochrome  1148    {
      Monochrome  1149            unsigned short line;
      Monochrome  1150            char i, shift, begin=0, end=8, bool1=1, bool2=1, *screen, *p=(char*)&line;
    000024AA E601                   MOV         #1,R6
    000024AC 2FA6                   MOV.L       R10,@-R15
    000024AE E508                   MOV         #8,R5
    000024B0 2F96                   MOV.L       R9,@-R15
    000024B2 6C63                   MOV         R6,R12
    000024B4 2F86                   MOV.L       R8,@-R15
    000024B6 6053                   MOV         R5,R0
    000024B8 4F22                   STS.L       PR,@-R15
    000024BA 6963                   MOV         R6,R9
    000024BC 7FF4                   ADD         #-12,R15
    000024BE 1F41                   MOV.L       R4,@(4,R15)
    000024C0 80F8                   MOV.B       R0,@(8,R15)
    000024C2 E400                   MOV         #0,R4
      Monochrome  1151            if(!bmp || x<-7 || x>127 || y<-7 || y>63) return;
    000024C4 53F1                   MOV.L       @(4,R15),R3
    000024C6 6A43                   MOV         R4,R10
    000024C8 2338                   TST         R3,R3
    000024CA 8D53                   BT/S        L1468
    000024CC 6BF3                   MOV         R15,R11
    000024CE E3F9                   MOV         #-7,R3
    000024D0 3D33                   CMP/GE      R3,R13
    000024D2 8B4F                   BF          L1468
    000024D4 E17F                   MOV         #127,R1
    000024D6 3D17                   CMP/GT      R1,R13
    000024D8 894C                   BT          L1468
    000024DA 3E33                   CMP/GE      R3,R14
    000024DC 8B4A                   BF          L1468
    000024DE E23F                   MOV         #63,R2
    000024E0 3E27                   CMP/GT      R2,R14
    000024E2 8947                   BT          L1468
      Monochrome  1152            if(y < 0) begin = -y;
    000024E4 4E11                   CMP/PZ      R14
    000024E6 8D01                   BT/S        L1469
      Monochrome  1153            if(y > 56) end = 64-y;
    000024E8 E238                   MOV         #56,R2
    000024EA 6AEB                   NEG         R14,R10
    000024EC              L1469:                            
    000024EC 3E27                   CMP/GT      R2,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  111


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000024EE 8B02                   BF          L1470
    000024F0 E040                   MOV         #64,R0
    000024F2 30E8                   SUB         R14,R0
    000024F4 80F8                   MOV.B       R0,@(8,R15)
    000024F6              L1470:                            
      Monochrome  1154            shift = 8-(x&7);
    000024F6 E307                   MOV         #7,R3
    000024F8 23D9                   AND         R13,R3
    000024FA 6853                   MOV         R5,R8
      Monochrome  1155            if(x < 0) bool1 = 0;
    000024FC 4D11                   CMP/PZ      R13
    000024FE 8D01                   BT/S        L1471
    00002500 3838                   SUB         R3,R8
    00002502 6943                   MOV         R4,R9
    00002504              L1471:                            
      Monochrome  1156            if(x>120 || shift==8) bool2 = 0;
    00002504 E378                   MOV         #120,R3
    00002506 3D37                   CMP/GT      R3,R13
    00002508 8902                   BT          L1473
    0000250A 608E                   EXTS.B      R8,R0
    0000250C 8808                   CMP/EQ      #8,R0
    0000250E 8B00                   BF          L1472
    00002510              L1473:                            
    00002510 6C43                   MOV         R4,R12
    00002512              L1472:                            
      Monochrome  1157            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00002512 D31D                   MOV.L       L1721,R3   ; _ML_vram_adress
    00002514 430B                   JSR         @R3
    00002516 0009                   NOP
    00002518 53F1                   MOV.L       @(4,R15),R3
    0000251A 62AE                   EXTS.B      R10,R2
    0000251C 32EC                   ADD         R14,R2
    0000251E 4208                   SHLL2       R2
    00002520 4208                   SHLL2       R2
    00002522 302C                   ADD         R2,R0
    00002524 4D21                   SHAR        R13
    00002526 4D21                   SHAR        R13
    00002528 4D21                   SHAR        R13
    0000252A 6503                   MOV         R0,R5
    0000252C 84F8                   MOV.B       @(8,R15),R0
    0000252E 35DC                   ADD         R13,R5
      Monochrome  1158            for(i=begin ; i<end ; i++)
    00002530 64A3                   MOV         R10,R4
    00002532 664E                   EXTS.B      R4,R6
    00002534 363C                   ADD         R3,R6
    00002536 6EB3                   MOV         R11,R14
    00002538 6703                   MOV         R0,R7
    0000253A 624E                   EXTS.B      R4,R2
    0000253C 3273                   CMP/GE      R7,R2
    0000253E 8D19                   BT/S        L1468
    00002540 7E01                   ADD         #1,R14
    00002542              L1475:                            
      Monochrome  1159            {
      Monochrome  1160                    line = bmp[i]<<shift;
    00002542 628E                   EXTS.B      R8,R2
    00002544 6360                   MOV.B       @R6,R3
    00002546 633C                   EXTU.B      R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  112


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002548 432D                   SHLD        R2,R3
      Monochrome  1161                    if(bool1) screen[0] ^= *p;
    0000254A 629E                   EXTS.B      R9,R2
    0000254C 2228                   TST         R2,R2
    0000254E 8D04                   BT/S        L1476
    00002550 2F31                   MOV.W       R3,@R15
    00002552 62B0                   MOV.B       @R11,R2
    00002554 6150                   MOV.B       @R5,R1
    00002556 212A                   XOR         R2,R1
    00002558 2510                   MOV.B       R1,@R5
    0000255A              L1476:                            
      Monochrome  1162                    if(bool2) screen[1] ^= *(p+1);
    0000255A 63CE                   EXTS.B      R12,R3
    0000255C 2338                   TST         R3,R3
    0000255E 8903                   BT          L1477
    00002560 63E0                   MOV.B       @R14,R3
    00002562 8451                   MOV.B       @(1,R5),R0
    00002564 203A                   XOR         R3,R0
    00002566 8051                   MOV.B       R0,@(1,R5)
    00002568              L1477:                            
      Monochrome  1163                    screen += 16;
    00002568 7510                   ADD         #16,R5
    0000256A 7401                   ADD         #1,R4
    0000256C 634E                   EXTS.B      R4,R3
    0000256E 3373                   CMP/GE      R7,R3
    00002570 8FE7                   BF/S        L1475
    00002572 7601                   ADD         #1,R6
    00002574              L1468:                            
      Monochrome  1164            }
      Monochrome  1165    }
    00002574 7F0C                   ADD         #12,R15
    00002576 4F26                   LDS.L       @R15+,PR
    00002578 68F6                   MOV.L       @R15+,R8
    0000257A 69F6                   MOV.L       @R15+,R9
    0000257C 6AF6                   MOV.L       @R15+,R10
    0000257E 6BF6                   MOV.L       @R15+,R11
    00002580 6CF6                   MOV.L       @R15+,R12
    00002582 6DF6                   MOV.L       @R15+,R13
    00002584 000B                   RTS
    00002586 6EF6                   MOV.L       @R15+,R14
    00002588              L1721:                            
    00002588 <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1166    #endif
      Monochrome  1167    
      Monochrome  1168    #ifdef ML_BMP_16_OR
      Monochrome  1169    void ML_bmp_16_or(const unsigned short *bmp, int x, int y)
    0000258C              _ML_bmp_16_or:                   ; function: ML_bmp_16_or
                                                           ; frame size=36
    0000258C 2FE6                   MOV.L       R14,@-R15
      Monochrome  1170    {
      Monochrome  1171            unsigned long line;
      Monochrome  1172            char i, shift, begin=0, end=16, *screen, *p=(char*)&line+1;
      Monochrome  1173            if(!bmp || x<0 || x>112 || y<-15 || y>63) return;
    0000258E 6343                   MOV         R4,R3
    00002590 2FD6                   MOV.L       R13,@-R15
    00002592 6E63                   MOV         R6,R14
    00002594 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  113


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002596 2338                   TST         R3,R3
    00002598 2FB6                   MOV.L       R11,@-R15
    0000259A EC00                   MOV         #0,R12
    0000259C 2FA6                   MOV.L       R10,@-R15
    0000259E 6B53                   MOV         R5,R11
    000025A0 2F96                   MOV.L       R9,@-R15
    000025A2 E910                   MOV         #16,R9
    000025A4 4F22                   STS.L       PR,@-R15
    000025A6 7FF8                   ADD         #-8,R15
    000025A8 1F41                   MOV.L       R4,@(4,R15)
    000025AA 6DF3                   MOV         R15,R13
    000025AC 8D4A                   BT/S        L1480
    000025AE 7D01                   ADD         #1,R13
    000025B0 4B11                   CMP/PZ      R11
    000025B2 8B47                   BF          L1480
    000025B4 E270                   MOV         #112,R2
    000025B6 3B27                   CMP/GT      R2,R11
    000025B8 8944                   BT          L1480
    000025BA E1F1                   MOV         #-15,R1
    000025BC 3E13                   CMP/GE      R1,R14
    000025BE 8B41                   BF          L1480
    000025C0 E03F                   MOV         #63,R0
    000025C2 3E07                   CMP/GT      R0,R14
    000025C4 893E                   BT          L1480
      Monochrome  1174            if(y < 0) begin = -y;
    000025C6 4E11                   CMP/PZ      R14
    000025C8 8D01                   BT/S        L1481
      Monochrome  1175            if(y > 48) end = 64-y;
    000025CA E330                   MOV         #48,R3
    000025CC 6CEB                   NEG         R14,R12
    000025CE              L1481:                            
    000025CE 3E37                   CMP/GT      R3,R14
    000025D0 8F02                   BF/S        L1482
      Monochrome  1176            shift = 8-(x&7);
    000025D2 E307                   MOV         #7,R3
    000025D4 E940                   MOV         #64,R9
    000025D6 39E8                   SUB         R14,R9
    000025D8              L1482:                            
      Monochrome  1177            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000025D8 D285                   MOV.L       L1722+2,R2 ; _ML_vram_adress
    000025DA 23B9                   AND         R11,R3
    000025DC EA08                   MOV         #8,R10
    000025DE 420B                   JSR         @R2
    000025E0 3A38                   SUB         R3,R10
    000025E2 63CE                   EXTS.B      R12,R3
    000025E4 33EC                   ADD         R14,R3
    000025E6 4308                   SHLL2       R3
    000025E8 4308                   SHLL2       R3
    000025EA 303C                   ADD         R3,R0
    000025EC 53F1                   MOV.L       @(4,R15),R3
    000025EE 679E                   EXTS.B      R9,R7
    000025F0 4B21                   SHAR        R11
    000025F2 4B21                   SHAR        R11
    000025F4 4B21                   SHAR        R11
    000025F6 6403                   MOV         R0,R4
    000025F8 34BC                   ADD         R11,R4
      Monochrome  1178            for(i=begin ; i<end ; i++)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  114


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000025FA 66C3                   MOV         R12,R6
    000025FC 656E                   EXTS.B      R6,R5
    000025FE 4500                   SHLL        R5
    00002600 353C                   ADD         R3,R5
    00002602 6BD3                   MOV         R13,R11
    00002604 7B01                   ADD         #1,R11
    00002606 6CD3                   MOV         R13,R12
    00002608 626E                   EXTS.B      R6,R2
    0000260A 3273                   CMP/GE      R7,R2
    0000260C 8D1A                   BT/S        L1480
    0000260E 7C02                   ADD         #2,R12
    00002610              L1484:                            
      Monochrome  1179            {
      Monochrome  1180                    line = bmp[i]<<shift;
    00002610 6351                   MOV.W       @R5,R3
    00002612 6EAE                   EXTS.B      R10,R14
    00002614 633D                   EXTU.W      R3,R3
    00002616 43ED                   SHLD        R14,R3
    00002618 2F32                   MOV.L       R3,@R15
      Monochrome  1181                    screen[0] |= *p;
    0000261A 62D0                   MOV.B       @R13,R2
    0000261C 6140                   MOV.B       @R4,R1
    0000261E 212B                   OR          R2,R1
    00002620 2410                   MOV.B       R1,@R4
      Monochrome  1182                    screen[1] |= *(p+1);
    00002622 63B0                   MOV.B       @R11,R3
    00002624 8441                   MOV.B       @(1,R4),R0
    00002626 203B                   OR          R3,R0
    00002628 8041                   MOV.B       R0,@(1,R4)
      Monochrome  1183                    if(shift!=8) screen[2] |= *(p+2);
    0000262A 60E3                   MOV         R14,R0
    0000262C 8808                   CMP/EQ      #8,R0
    0000262E 8903                   BT          L1485
    00002630 63C0                   MOV.B       @R12,R3
    00002632 8442                   MOV.B       @(2,R4),R0
    00002634 203B                   OR          R3,R0
    00002636 8042                   MOV.B       R0,@(2,R4)
    00002638              L1485:                            
      Monochrome  1184                    screen += 16;
    00002638 7410                   ADD         #16,R4
    0000263A 7601                   ADD         #1,R6
    0000263C 636E                   EXTS.B      R6,R3
    0000263E 3373                   CMP/GE      R7,R3
    00002640 8FE6                   BF/S        L1484
    00002642 7502                   ADD         #2,R5
    00002644              L1480:                            
      Monochrome  1185            }
      Monochrome  1186    }
    00002644 7F08                   ADD         #8,R15
    00002646 4F26                   LDS.L       @R15+,PR
    00002648 69F6                   MOV.L       @R15+,R9
    0000264A 6AF6                   MOV.L       @R15+,R10
    0000264C 6BF6                   MOV.L       @R15+,R11
    0000264E 6CF6                   MOV.L       @R15+,R12
    00002650 6DF6                   MOV.L       @R15+,R13
    00002652 000B                   RTS
    00002654 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  115


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1187    #endif
      Monochrome  1188    
      Monochrome  1189    #ifdef ML_BMP_16_AND
      Monochrome  1190    void ML_bmp_16_and(const unsigned short *bmp, int x, int y)
    00002656              _ML_bmp_16_and:                  ; function: ML_bmp_16_and
                                                           ; frame size=36
      Monochrome  1191    {
      Monochrome  1192            unsigned long line;
      Monochrome  1193            char i, shift, begin=0, end=16, *screen, *p=(char*)&line+1;
      Monochrome  1194            if(!bmp || x<0 || x>112 || y<-15 || y>63) return;
    00002656 6343                   MOV         R4,R3
    00002658 2FE6                   MOV.L       R14,@-R15
    0000265A 2338                   TST         R3,R3
    0000265C 2FD6                   MOV.L       R13,@-R15
    0000265E 6E63                   MOV         R6,R14
    00002660 2FC6                   MOV.L       R12,@-R15
    00002662 EC00                   MOV         #0,R12
    00002664 2FB6                   MOV.L       R11,@-R15
    00002666 6B53                   MOV         R5,R11
    00002668 2FA6                   MOV.L       R10,@-R15
    0000266A 2F96                   MOV.L       R9,@-R15
    0000266C 4F22                   STS.L       PR,@-R15
    0000266E E910                   MOV         #16,R9
    00002670 7FF8                   ADD         #-8,R15
    00002672 6DF3                   MOV         R15,R13
    00002674 1F41                   MOV.L       R4,@(4,R15)
    00002676 8D4C                   BT/S        L1488
    00002678 7D01                   ADD         #1,R13
    0000267A 4B11                   CMP/PZ      R11
    0000267C 8B49                   BF          L1488
    0000267E E270                   MOV         #112,R2
    00002680 3B27                   CMP/GT      R2,R11
    00002682 8946                   BT          L1488
    00002684 E1F1                   MOV         #-15,R1
    00002686 3E13                   CMP/GE      R1,R14
    00002688 8B43                   BF          L1488
    0000268A E03F                   MOV         #63,R0
    0000268C 3E07                   CMP/GT      R0,R14
    0000268E 8940                   BT          L1488
      Monochrome  1195            if(y < 0) begin = -y;
    00002690 4E11                   CMP/PZ      R14
    00002692 8D01                   BT/S        L1489
      Monochrome  1196            if(y > 48) end = 64-y;
    00002694 E330                   MOV         #48,R3
    00002696 6CEB                   NEG         R14,R12
    00002698              L1489:                            
    00002698 3E37                   CMP/GT      R3,R14
    0000269A 8F02                   BF/S        L1490
      Monochrome  1197            shift = 8-(x&7);
    0000269C E307                   MOV         #7,R3
    0000269E E940                   MOV         #64,R9
    000026A0 39E8                   SUB         R14,R9
    000026A2              L1490:                            
    000026A2 23B9                   AND         R11,R3
      Monochrome  1198            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    000026A4 D252                   MOV.L       L1722+2,R2 ; _ML_vram_adress
    000026A6 EA08                   MOV         #8,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  116


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000026A8 420B                   JSR         @R2
    000026AA 3A38                   SUB         R3,R10
    000026AC 63CE                   EXTS.B      R12,R3
    000026AE 33EC                   ADD         R14,R3
    000026B0 4308                   SHLL2       R3
    000026B2 4308                   SHLL2       R3
    000026B4 303C                   ADD         R3,R0
    000026B6 4B21                   SHAR        R11
    000026B8 53F1                   MOV.L       @(4,R15),R3
    000026BA 679E                   EXTS.B      R9,R7
    000026BC 4B21                   SHAR        R11
    000026BE 4B21                   SHAR        R11
    000026C0 6403                   MOV         R0,R4
    000026C2 34BC                   ADD         R11,R4
      Monochrome  1199            for(i=begin ; i<end ; i++)
    000026C4 66C3                   MOV         R12,R6
    000026C6 656E                   EXTS.B      R6,R5
    000026C8 4500                   SHLL        R5
    000026CA 353C                   ADD         R3,R5
    000026CC 6BD3                   MOV         R13,R11
    000026CE 7B01                   ADD         #1,R11
    000026D0 6CD3                   MOV         R13,R12
    000026D2 626E                   EXTS.B      R6,R2
    000026D4 3273                   CMP/GE      R7,R2
    000026D6 8D1C                   BT/S        L1488
    000026D8 7C02                   ADD         #2,R12
    000026DA              L1492:                            
      Monochrome  1200            {
      Monochrome  1201                    line = ~((unsigned short)~bmp[i]<<shift);
    000026DA 6EAE                   EXTS.B      R10,R14
    000026DC 6351                   MOV.W       @R5,R3
    000026DE 6337                   NOT         R3,R3
    000026E0 633D                   EXTU.W      R3,R3
    000026E2 43ED                   SHLD        R14,R3
    000026E4 6337                   NOT         R3,R3
    000026E6 2F32                   MOV.L       R3,@R15
      Monochrome  1202                    screen[0] &= *p;
    000026E8 62D0                   MOV.B       @R13,R2
    000026EA 6140                   MOV.B       @R4,R1
    000026EC 2129                   AND         R2,R1
    000026EE 2410                   MOV.B       R1,@R4
      Monochrome  1203                    screen[1] &= *(p+1);
    000026F0 63B0                   MOV.B       @R11,R3
    000026F2 8441                   MOV.B       @(1,R4),R0
    000026F4 2039                   AND         R3,R0
    000026F6 8041                   MOV.B       R0,@(1,R4)
      Monochrome  1204                    if(shift!=8) screen[2] &= *(p+2);
    000026F8 60E3                   MOV         R14,R0
    000026FA 8808                   CMP/EQ      #8,R0
    000026FC 8903                   BT          L1493
    000026FE 63C0                   MOV.B       @R12,R3
    00002700 8442                   MOV.B       @(2,R4),R0
    00002702 2039                   AND         R3,R0
    00002704 8042                   MOV.B       R0,@(2,R4)
    00002706              L1493:                            
      Monochrome  1205                    screen += 16;
    00002706 7410                   ADD         #16,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  117


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002708 7601                   ADD         #1,R6
    0000270A 636E                   EXTS.B      R6,R3
    0000270C 3373                   CMP/GE      R7,R3
    0000270E 8FE4                   BF/S        L1492
    00002710 7502                   ADD         #2,R5
    00002712              L1488:                            
      Monochrome  1206            }
      Monochrome  1207    }
    00002712 7F08                   ADD         #8,R15
    00002714 4F26                   LDS.L       @R15+,PR
    00002716 69F6                   MOV.L       @R15+,R9
    00002718 6AF6                   MOV.L       @R15+,R10
    0000271A 6BF6                   MOV.L       @R15+,R11
    0000271C 6CF6                   MOV.L       @R15+,R12
    0000271E 6DF6                   MOV.L       @R15+,R13
    00002720 000B                   RTS
    00002722 6EF6                   MOV.L       @R15+,R14
      Monochrome  1208    #endif
      Monochrome  1209    
      Monochrome  1210    #ifdef ML_BMP_16_XOR
      Monochrome  1211    void ML_bmp_16_xor(const unsigned short *bmp, int x, int y)
    00002724              _ML_bmp_16_xor:                  ; function: ML_bmp_16_xor
                                                           ; frame size=36
    00002724 2FE6                   MOV.L       R14,@-R15
      Monochrome  1212    {
      Monochrome  1213            unsigned long line;
      Monochrome  1214            char i, shift, begin=0, end=16, *screen, *p=(char*)&line+1;
      Monochrome  1215            if(!bmp || x<0 || x>112 || y<-15 || y>63) return;
    00002726 6343                   MOV         R4,R3
    00002728 2FD6                   MOV.L       R13,@-R15
    0000272A 6E63                   MOV         R6,R14
    0000272C 2FC6                   MOV.L       R12,@-R15
    0000272E 2338                   TST         R3,R3
    00002730 2FB6                   MOV.L       R11,@-R15
    00002732 EC00                   MOV         #0,R12
    00002734 2FA6                   MOV.L       R10,@-R15
    00002736 6B53                   MOV         R5,R11
    00002738 2F96                   MOV.L       R9,@-R15
    0000273A E910                   MOV         #16,R9
    0000273C 4F22                   STS.L       PR,@-R15
    0000273E 7FF8                   ADD         #-8,R15
    00002740 1F41                   MOV.L       R4,@(4,R15)
    00002742 6DF3                   MOV         R15,R13
    00002744 8D4A                   BT/S        L1496
    00002746 7D01                   ADD         #1,R13
    00002748 4B11                   CMP/PZ      R11
    0000274A 8B47                   BF          L1496
    0000274C E270                   MOV         #112,R2
    0000274E 3B27                   CMP/GT      R2,R11
    00002750 8944                   BT          L1496
    00002752 E1F1                   MOV         #-15,R1
    00002754 3E13                   CMP/GE      R1,R14
    00002756 8B41                   BF          L1496
    00002758 E03F                   MOV         #63,R0
    0000275A 3E07                   CMP/GT      R0,R14
    0000275C 893E                   BT          L1496
      Monochrome  1216            if(y < 0) begin = -y;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  118


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000275E 4E11                   CMP/PZ      R14
    00002760 8D01                   BT/S        L1497
      Monochrome  1217            if(y > 48) end = 64-y;
    00002762 E330                   MOV         #48,R3
    00002764 6CEB                   NEG         R14,R12
    00002766              L1497:                            
    00002766 3E37                   CMP/GT      R3,R14
    00002768 8F02                   BF/S        L1498
      Monochrome  1218            shift = 8-(x&7);
    0000276A E307                   MOV         #7,R3
    0000276C E940                   MOV         #64,R9
    0000276E 39E8                   SUB         R14,R9
    00002770              L1498:                            
      Monochrome  1219            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00002770 D21F                   MOV.L       L1722+2,R2 ; _ML_vram_adress
    00002772 23B9                   AND         R11,R3
    00002774 EA08                   MOV         #8,R10
    00002776 420B                   JSR         @R2
    00002778 3A38                   SUB         R3,R10
    0000277A 63CE                   EXTS.B      R12,R3
    0000277C 33EC                   ADD         R14,R3
    0000277E 4308                   SHLL2       R3
    00002780 4308                   SHLL2       R3
    00002782 303C                   ADD         R3,R0
    00002784 53F1                   MOV.L       @(4,R15),R3
    00002786 679E                   EXTS.B      R9,R7
    00002788 4B21                   SHAR        R11
    0000278A 4B21                   SHAR        R11
    0000278C 4B21                   SHAR        R11
    0000278E 6403                   MOV         R0,R4
    00002790 34BC                   ADD         R11,R4
      Monochrome  1220            for(i=begin ; i<end ; i++)
    00002792 66C3                   MOV         R12,R6
    00002794 656E                   EXTS.B      R6,R5
    00002796 4500                   SHLL        R5
    00002798 353C                   ADD         R3,R5
    0000279A 6BD3                   MOV         R13,R11
    0000279C 7B01                   ADD         #1,R11
    0000279E 6CD3                   MOV         R13,R12
    000027A0 626E                   EXTS.B      R6,R2
    000027A2 3273                   CMP/GE      R7,R2
    000027A4 8D1A                   BT/S        L1496
    000027A6 7C02                   ADD         #2,R12
    000027A8              L1500:                            
      Monochrome  1221            {
      Monochrome  1222                    line = bmp[i]<<shift;
    000027A8 6351                   MOV.W       @R5,R3
    000027AA 6EAE                   EXTS.B      R10,R14
    000027AC 633D                   EXTU.W      R3,R3
    000027AE 43ED                   SHLD        R14,R3
    000027B0 2F32                   MOV.L       R3,@R15
      Monochrome  1223                    screen[0] ^= *p;
    000027B2 62D0                   MOV.B       @R13,R2
    000027B4 6140                   MOV.B       @R4,R1
    000027B6 212A                   XOR         R2,R1
    000027B8 2410                   MOV.B       R1,@R4
      Monochrome  1224                    screen[1] ^= *(p+1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  119


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000027BA 63B0                   MOV.B       @R11,R3
    000027BC 8441                   MOV.B       @(1,R4),R0
    000027BE 203A                   XOR         R3,R0
    000027C0 8041                   MOV.B       R0,@(1,R4)
      Monochrome  1225                    if(shift!=8) screen[2] ^= *(p+2);
    000027C2 60E3                   MOV         R14,R0
    000027C4 8808                   CMP/EQ      #8,R0
    000027C6 8903                   BT          L1501
    000027C8 63C0                   MOV.B       @R12,R3
    000027CA 8442                   MOV.B       @(2,R4),R0
    000027CC 203A                   XOR         R3,R0
    000027CE 8042                   MOV.B       R0,@(2,R4)
    000027D0              L1501:                            
      Monochrome  1226                    screen += 16;
    000027D0 7410                   ADD         #16,R4
    000027D2 7601                   ADD         #1,R6
    000027D4 636E                   EXTS.B      R6,R3
    000027D6 3373                   CMP/GE      R7,R3
    000027D8 8FE6                   BF/S        L1500
    000027DA 7502                   ADD         #2,R5
    000027DC              L1496:                            
      Monochrome  1227            }
      Monochrome  1228    }
    000027DC 7F08                   ADD         #8,R15
    000027DE 4F26                   LDS.L       @R15+,PR
    000027E0 69F6                   MOV.L       @R15+,R9
    000027E2 6AF6                   MOV.L       @R15+,R10
    000027E4 6BF6                   MOV.L       @R15+,R11
    000027E6 6CF6                   MOV.L       @R15+,R12
    000027E8 6DF6                   MOV.L       @R15+,R13
    000027EA 000B                   RTS
    000027EC 6EF6                   MOV.L       @R15+,R14
    000027EE              L1722:                            
    000027EE 0000                   .DATA.W     0
    000027F0 <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1229    #endif
      Monochrome  1230    
      Monochrome  1231    #ifdef ML_BMP_16_OR_CL
      Monochrome  1232    void ML_bmp_16_or_cl(const unsigned short *bmp, int x, int y)
    000027F4              _ML_bmp_16_or_cl:                ; function: ML_bmp_16_or_cl
                                                           ; frame size=48
    000027F4 2FE6                   MOV.L       R14,@-R15
      Monochrome  1233    {
      Monochrome  1234            unsigned long line;
      Monochrome  1235            char i, shift, begin=0, end=16, bool1=1, bool2=1, bool3=1, *screen, *p=(char*)&line+1;
    000027F6 E010                   MOV         #16,R0
    000027F8 2FD6                   MOV.L       R13,@-R15
    000027FA 6E53                   MOV         R5,R14
    000027FC 2FC6                   MOV.L       R12,@-R15
    000027FE 6D63                   MOV         R6,R13
    00002800 2FB6                   MOV.L       R11,@-R15
    00002802 E501                   MOV         #1,R5
    00002804 2FA6                   MOV.L       R10,@-R15
    00002806 2F96                   MOV.L       R9,@-R15
    00002808 2F86                   MOV.L       R8,@-R15
    0000280A 6953                   MOV         R5,R9
    0000280C 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  120


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000280E 6B93                   MOV         R9,R11
    00002810 7FF0                   ADD         #-16,R15
    00002812 6CF3                   MOV         R15,R12
    00002814 1F41                   MOV.L       R4,@(4,R15)
    00002816 E400                   MOV         #0,R4
    00002818 80FC                   MOV.B       R0,@(12,R15)
    0000281A 6A43                   MOV         R4,R10
    0000281C 6053                   MOV         R5,R0
    0000281E 80F8                   MOV.B       R0,@(8,R15)
      Monochrome  1236            if(!bmp || x<-15 || x>127 || y<-15 || y>63) return;
    00002820 53F1                   MOV.L       @(4,R15),R3
    00002822 2338                   TST         R3,R3
    00002824 8D65                   BT/S        L1504
    00002826 7C01                   ADD         #1,R12
    00002828 E3F1                   MOV         #-15,R3
    0000282A 3E33                   CMP/GE      R3,R14
    0000282C 8B61                   BF          L1504
    0000282E E17F                   MOV         #127,R1
    00002830 3E17                   CMP/GT      R1,R14
    00002832 895E                   BT          L1504
    00002834 3D33                   CMP/GE      R3,R13
    00002836 8B5C                   BF          L1504
    00002838 E23F                   MOV         #63,R2
    0000283A 3D27                   CMP/GT      R2,R13
    0000283C 8959                   BT          L1504
      Monochrome  1237            if(y < 0) begin = -y;
    0000283E 4D11                   CMP/PZ      R13
    00002840 8D01                   BT/S        L1505
      Monochrome  1238            if(y > 48) end = 64-y;
    00002842 E230                   MOV         #48,R2
    00002844 6ADB                   NEG         R13,R10
    00002846              L1505:                            
    00002846 3D27                   CMP/GT      R2,R13
    00002848 8B02                   BF          L1506
    0000284A E040                   MOV         #64,R0
    0000284C 30D8                   SUB         R13,R0
    0000284E 80FC                   MOV.B       R0,@(12,R15)
    00002850              L1506:                            
      Monochrome  1239            shift = 8-(x&7);
    00002850 E307                   MOV         #7,R3
    00002852 23E9                   AND         R14,R3
    00002854 E808                   MOV         #8,R8
      Monochrome  1240            if(x < 0) bool1 = 0;
    00002856 4E11                   CMP/PZ      R14
    00002858 8D01                   BT/S        L1507
    0000285A 3838                   SUB         R3,R8
    0000285C 6943                   MOV         R4,R9
    0000285E              L1507:                            
      Monochrome  1241            if(x<-8 || x>119) bool2 = 0;
    0000285E E3F8                   MOV         #-8,R3
    00002860 3E33                   CMP/GE      R3,R14
    00002862 8B02                   BF          L1509
    00002864 E177                   MOV         #119,R1
    00002866 3E17                   CMP/GT      R1,R14
    00002868 8B01                   BF          L1508
    0000286A              L1509:                            
    0000286A 6043                   MOV         R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  121


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000286C 80F8                   MOV.B       R0,@(8,R15)
    0000286E              L1508:                            
      Monochrome  1242            if(x>111 || shift==8) bool3 = 0;
    0000286E E36F                   MOV         #111,R3
    00002870 3E37                   CMP/GT      R3,R14
    00002872 8902                   BT          L1511
    00002874 608E                   EXTS.B      R8,R0
    00002876 8808                   CMP/EQ      #8,R0
    00002878 8B00                   BF          L1510
    0000287A              L1511:                            
    0000287A 6B43                   MOV         R4,R11
    0000287C              L1510:                            
      Monochrome  1243            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    0000287C D367                   MOV.L       L1723,R3   ; _ML_vram_adress
    0000287E 430B                   JSR         @R3
    00002880 0009                   NOP
    00002882 62AE                   EXTS.B      R10,R2
    00002884 53F1                   MOV.L       @(4,R15),R3
    00002886 4E21                   SHAR        R14
    00002888 32DC                   ADD         R13,R2
    0000288A 4208                   SHLL2       R2
    0000288C 4208                   SHLL2       R2
    0000288E 302C                   ADD         R2,R0
    00002890 4E21                   SHAR        R14
    00002892 4E21                   SHAR        R14
    00002894 6403                   MOV         R0,R4
    00002896 34EC                   ADD         R14,R4
    00002898 84FC                   MOV.B       @(12,R15),R0
      Monochrome  1244            for(i=begin ; i<end ; i++)
    0000289A 65A3                   MOV         R10,R5
    0000289C 665E                   EXTS.B      R5,R6
    0000289E 4600                   SHLL        R6
    000028A0 363C                   ADD         R3,R6
    000028A2 6EC3                   MOV         R12,R14
    000028A4 7E01                   ADD         #1,R14
    000028A6 6DC3                   MOV         R12,R13
    000028A8 6703                   MOV         R0,R7
    000028AA 625E                   EXTS.B      R5,R2
    000028AC 3273                   CMP/GE      R7,R2
    000028AE 8D20                   BT/S        L1504
    000028B0 7D02                   ADD         #2,R13
    000028B2              L1513:                            
      Monochrome  1245            {
      Monochrome  1246                    line = bmp[i]<<shift;
    000028B2 628E                   EXTS.B      R8,R2
    000028B4 6361                   MOV.W       @R6,R3
    000028B6 633D                   EXTU.W      R3,R3
    000028B8 432D                   SHLD        R2,R3
      Monochrome  1247                    if(bool1) screen[0] |= *p;
    000028BA 629E                   EXTS.B      R9,R2
    000028BC 2228                   TST         R2,R2
    000028BE 8D04                   BT/S        L1514
    000028C0 2F32                   MOV.L       R3,@R15
    000028C2 62C0                   MOV.B       @R12,R2
    000028C4 6140                   MOV.B       @R4,R1
    000028C6 212B                   OR          R2,R1
    000028C8 2410                   MOV.B       R1,@R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  122


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000028CA              L1514:                            
      Monochrome  1248                    if(bool2) screen[1] |= *(p+1);
    000028CA 84F8                   MOV.B       @(8,R15),R0
    000028CC 2008                   TST         R0,R0
    000028CE 8D04                   BT/S        L1515
      Monochrome  1249                    if(bool3) screen[2] |= *(p+2);
    000028D0 62BE                   EXTS.B      R11,R2
    000028D2 63E0                   MOV.B       @R14,R3
    000028D4 8441                   MOV.B       @(1,R4),R0
    000028D6 203B                   OR          R3,R0
    000028D8 8041                   MOV.B       R0,@(1,R4)
    000028DA              L1515:                            
    000028DA 2228                   TST         R2,R2
    000028DC 8903                   BT          L1516
    000028DE 63D0                   MOV.B       @R13,R3
    000028E0 8442                   MOV.B       @(2,R4),R0
    000028E2 203B                   OR          R3,R0
    000028E4 8042                   MOV.B       R0,@(2,R4)
    000028E6              L1516:                            
      Monochrome  1250                    screen += 16;
    000028E6 7410                   ADD         #16,R4
    000028E8 7501                   ADD         #1,R5
    000028EA 635E                   EXTS.B      R5,R3
    000028EC 3373                   CMP/GE      R7,R3
    000028EE 8FE0                   BF/S        L1513
    000028F0 7602                   ADD         #2,R6
    000028F2              L1504:                            
      Monochrome  1251            }
      Monochrome  1252    }
    000028F2 7F10                   ADD         #16,R15
    000028F4 4F26                   LDS.L       @R15+,PR
    000028F6 68F6                   MOV.L       @R15+,R8
    000028F8 69F6                   MOV.L       @R15+,R9
    000028FA 6AF6                   MOV.L       @R15+,R10
    000028FC 6BF6                   MOV.L       @R15+,R11
    000028FE 6CF6                   MOV.L       @R15+,R12
    00002900 6DF6                   MOV.L       @R15+,R13
    00002902 000B                   RTS
    00002904 6EF6                   MOV.L       @R15+,R14
      Monochrome  1253    #endif
      Monochrome  1254    
      Monochrome  1255    #ifdef ML_BMP_16_AND_CL
      Monochrome  1256    void ML_bmp_16_and_cl(const unsigned short *bmp, int x, int y)
    00002906              _ML_bmp_16_and_cl:               ; function: ML_bmp_16_and_cl
                                                           ; frame size=48
      Monochrome  1257    {
      Monochrome  1258            unsigned long line;
      Monochrome  1259            char i, shift, begin=0, end=16, bool1=1, bool2=1, bool3=1, *screen, *p=(char*)&line+1;
    00002906 E010                   MOV         #16,R0
    00002908 2FE6                   MOV.L       R14,@-R15
    0000290A 6E53                   MOV         R5,R14
    0000290C 2FD6                   MOV.L       R13,@-R15
    0000290E E501                   MOV         #1,R5
    00002910 2FC6                   MOV.L       R12,@-R15
    00002912 6D63                   MOV         R6,R13
    00002914 2FB6                   MOV.L       R11,@-R15
    00002916 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  123


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002918 2F96                   MOV.L       R9,@-R15
    0000291A 6953                   MOV         R5,R9
    0000291C 2F86                   MOV.L       R8,@-R15
    0000291E 6B93                   MOV         R9,R11
    00002920 4F22                   STS.L       PR,@-R15
    00002922 7FF0                   ADD         #-16,R15
    00002924 1F41                   MOV.L       R4,@(4,R15)
    00002926 6CF3                   MOV         R15,R12
    00002928 80FC                   MOV.B       R0,@(12,R15)
    0000292A E400                   MOV         #0,R4
    0000292C 6A43                   MOV         R4,R10
    0000292E 6053                   MOV         R5,R0
    00002930 80F8                   MOV.B       R0,@(8,R15)
      Monochrome  1260            if(!bmp || x<-15 || x>127 || y<-15 || y>63) return;
    00002932 53F1                   MOV.L       @(4,R15),R3
    00002934 2338                   TST         R3,R3
    00002936 8D67                   BT/S        L1519
    00002938 7C01                   ADD         #1,R12
    0000293A E3F1                   MOV         #-15,R3
    0000293C 3E33                   CMP/GE      R3,R14
    0000293E 8B63                   BF          L1519
    00002940 E17F                   MOV         #127,R1
    00002942 3E17                   CMP/GT      R1,R14
    00002944 8960                   BT          L1519
    00002946 3D33                   CMP/GE      R3,R13
    00002948 8B5E                   BF          L1519
    0000294A E23F                   MOV         #63,R2
    0000294C 3D27                   CMP/GT      R2,R13
    0000294E 895B                   BT          L1519
      Monochrome  1261            if(y < 0) begin = -y;
    00002950 4D11                   CMP/PZ      R13
    00002952 8D01                   BT/S        L1520
      Monochrome  1262            if(y > 48) end = 64-y;
    00002954 E230                   MOV         #48,R2
    00002956 6ADB                   NEG         R13,R10
    00002958              L1520:                            
    00002958 3D27                   CMP/GT      R2,R13
    0000295A 8B02                   BF          L1521
    0000295C E040                   MOV         #64,R0
    0000295E 30D8                   SUB         R13,R0
    00002960 80FC                   MOV.B       R0,@(12,R15)
    00002962              L1521:                            
      Monochrome  1263            shift = 8-(x&7);
    00002962 E307                   MOV         #7,R3
    00002964 23E9                   AND         R14,R3
    00002966 E808                   MOV         #8,R8
      Monochrome  1264            if(x < 0) bool1 = 0;
    00002968 4E11                   CMP/PZ      R14
    0000296A 8D01                   BT/S        L1522
    0000296C 3838                   SUB         R3,R8
    0000296E 6943                   MOV         R4,R9
    00002970              L1522:                            
      Monochrome  1265            if(x<-8 || x>119) bool2 = 0;
    00002970 E3F8                   MOV         #-8,R3
    00002972 3E33                   CMP/GE      R3,R14
    00002974 8B02                   BF          L1524
    00002976 E177                   MOV         #119,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  124


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002978 3E17                   CMP/GT      R1,R14
    0000297A 8B01                   BF          L1523
    0000297C              L1524:                            
    0000297C 6043                   MOV         R4,R0
    0000297E 80F8                   MOV.B       R0,@(8,R15)
    00002980              L1523:                            
      Monochrome  1266            if(x>111 || shift==8) bool3 = 0;
    00002980 E36F                   MOV         #111,R3
    00002982 3E37                   CMP/GT      R3,R14
    00002984 8902                   BT          L1526
    00002986 608E                   EXTS.B      R8,R0
    00002988 8808                   CMP/EQ      #8,R0
    0000298A 8B00                   BF          L1525
    0000298C              L1526:                            
    0000298C 6B43                   MOV         R4,R11
    0000298E              L1525:                            
      Monochrome  1267            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    0000298E D323                   MOV.L       L1723,R3   ; _ML_vram_adress
    00002990 430B                   JSR         @R3
    00002992 0009                   NOP
    00002994 53F1                   MOV.L       @(4,R15),R3
    00002996 62AE                   EXTS.B      R10,R2
    00002998 32DC                   ADD         R13,R2
    0000299A 4208                   SHLL2       R2
    0000299C 4208                   SHLL2       R2
    0000299E 302C                   ADD         R2,R0
    000029A0 4E21                   SHAR        R14
    000029A2 4E21                   SHAR        R14
    000029A4 4E21                   SHAR        R14
    000029A6 6403                   MOV         R0,R4
    000029A8 84FC                   MOV.B       @(12,R15),R0
    000029AA 34EC                   ADD         R14,R4
      Monochrome  1268            for(i=begin ; i<end ; i++)
    000029AC 65A3                   MOV         R10,R5
    000029AE 665E                   EXTS.B      R5,R6
    000029B0 4600                   SHLL        R6
    000029B2 363C                   ADD         R3,R6
    000029B4 6EC3                   MOV         R12,R14
    000029B6 7E01                   ADD         #1,R14
    000029B8 6DC3                   MOV         R12,R13
    000029BA 6703                   MOV         R0,R7
    000029BC 625E                   EXTS.B      R5,R2
    000029BE 3273                   CMP/GE      R7,R2
    000029C0 8D22                   BT/S        L1519
    000029C2 7D02                   ADD         #2,R13
    000029C4              L1528:                            
      Monochrome  1269            {
      Monochrome  1270                    line = ~((unsigned short)~bmp[i]<<shift);
    000029C4 6361                   MOV.W       @R6,R3
    000029C6 628E                   EXTS.B      R8,R2
    000029C8 6337                   NOT         R3,R3
    000029CA 633D                   EXTU.W      R3,R3
    000029CC 432D                   SHLD        R2,R3
    000029CE 6337                   NOT         R3,R3
      Monochrome  1271                    if(bool1) screen[0] &= *p;
    000029D0 629E                   EXTS.B      R9,R2
    000029D2 2228                   TST         R2,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  125


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000029D4 8D04                   BT/S        L1529
    000029D6 2F32                   MOV.L       R3,@R15
    000029D8 62C0                   MOV.B       @R12,R2
    000029DA 6140                   MOV.B       @R4,R1
    000029DC 2129                   AND         R2,R1
    000029DE 2410                   MOV.B       R1,@R4
    000029E0              L1529:                            
      Monochrome  1272                    if(bool2) screen[1] &= *(p+1);
    000029E0 84F8                   MOV.B       @(8,R15),R0
    000029E2 2008                   TST         R0,R0
    000029E4 8D04                   BT/S        L1530
      Monochrome  1273                    if(bool3) screen[2] &= *(p+2);
    000029E6 62BE                   EXTS.B      R11,R2
    000029E8 63E0                   MOV.B       @R14,R3
    000029EA 8441                   MOV.B       @(1,R4),R0
    000029EC 2039                   AND         R3,R0
    000029EE 8041                   MOV.B       R0,@(1,R4)
    000029F0              L1530:                            
    000029F0 2228                   TST         R2,R2
    000029F2 8903                   BT          L1531
    000029F4 63D0                   MOV.B       @R13,R3
    000029F6 8442                   MOV.B       @(2,R4),R0
    000029F8 2039                   AND         R3,R0
    000029FA 8042                   MOV.B       R0,@(2,R4)
    000029FC              L1531:                            
      Monochrome  1274                    screen += 16;
    000029FC 7410                   ADD         #16,R4
    000029FE 7501                   ADD         #1,R5
    00002A00 635E                   EXTS.B      R5,R3
    00002A02 3373                   CMP/GE      R7,R3
    00002A04 8FDE                   BF/S        L1528
    00002A06 7602                   ADD         #2,R6
    00002A08              L1519:                            
      Monochrome  1275            }
      Monochrome  1276    }
    00002A08 7F10                   ADD         #16,R15
    00002A0A 4F26                   LDS.L       @R15+,PR
    00002A0C 68F6                   MOV.L       @R15+,R8
    00002A0E 69F6                   MOV.L       @R15+,R9
    00002A10 6AF6                   MOV.L       @R15+,R10
    00002A12 6BF6                   MOV.L       @R15+,R11
    00002A14 6CF6                   MOV.L       @R15+,R12
    00002A16 6DF6                   MOV.L       @R15+,R13
    00002A18 000B                   RTS
    00002A1A 6EF6                   MOV.L       @R15+,R14
    00002A1C              L1723:                            
    00002A1C <00000000>             .DATA.L     _ML_vram_adress
      Monochrome  1277    #endif
      Monochrome  1278    
      Monochrome  1279    #ifdef ML_BMP_16_XOR_CL
      Monochrome  1280    void ML_bmp_16_xor_cl(const unsigned short *bmp, int x, int y)
    00002A20              _ML_bmp_16_xor_cl:               ; function: ML_bmp_16_xor_cl
                                                           ; frame size=48
    00002A20 2FE6                   MOV.L       R14,@-R15
      Monochrome  1281    {
      Monochrome  1282            unsigned long line;
      Monochrome  1283            char i, shift, begin=0, end=16, bool1=1, bool2=1, bool3=1, *screen, *p=(char*)&line+1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  126


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002A22 E010                   MOV         #16,R0
    00002A24 2FD6                   MOV.L       R13,@-R15
    00002A26 6E53                   MOV         R5,R14
    00002A28 2FC6                   MOV.L       R12,@-R15
    00002A2A 6D63                   MOV         R6,R13
    00002A2C 2FB6                   MOV.L       R11,@-R15
    00002A2E E501                   MOV         #1,R5
    00002A30 2FA6                   MOV.L       R10,@-R15
    00002A32 2F96                   MOV.L       R9,@-R15
    00002A34 2F86                   MOV.L       R8,@-R15
    00002A36 6953                   MOV         R5,R9
    00002A38 4F22                   STS.L       PR,@-R15
    00002A3A 6B93                   MOV         R9,R11
    00002A3C 7FF0                   ADD         #-16,R15
    00002A3E 6CF3                   MOV         R15,R12
    00002A40 1F41                   MOV.L       R4,@(4,R15)
    00002A42 E400                   MOV         #0,R4
    00002A44 80FC                   MOV.B       R0,@(12,R15)
    00002A46 6A43                   MOV         R4,R10
    00002A48 6053                   MOV         R5,R0
    00002A4A 80F8                   MOV.B       R0,@(8,R15)
      Monochrome  1284            if(!bmp || x<-15 || x>127 || y<-15 || y>63) return;
    00002A4C 53F1                   MOV.L       @(4,R15),R3
    00002A4E 2338                   TST         R3,R3
    00002A50 8D65                   BT/S        L1534
    00002A52 7C01                   ADD         #1,R12
    00002A54 E3F1                   MOV         #-15,R3
    00002A56 3E33                   CMP/GE      R3,R14
    00002A58 8B61                   BF          L1534
    00002A5A E17F                   MOV         #127,R1
    00002A5C 3E17                   CMP/GT      R1,R14
    00002A5E 895E                   BT          L1534
    00002A60 3D33                   CMP/GE      R3,R13
    00002A62 8B5C                   BF          L1534
    00002A64 E23F                   MOV         #63,R2
    00002A66 3D27                   CMP/GT      R2,R13
    00002A68 8959                   BT          L1534
      Monochrome  1285            if(y < 0) begin = -y;
    00002A6A 4D11                   CMP/PZ      R13
    00002A6C 8D01                   BT/S        L1535
      Monochrome  1286            if(y > 48) end = 64-y;
    00002A6E E230                   MOV         #48,R2
    00002A70 6ADB                   NEG         R13,R10
    00002A72              L1535:                            
    00002A72 3D27                   CMP/GT      R2,R13
    00002A74 8B02                   BF          L1536
    00002A76 E040                   MOV         #64,R0
    00002A78 30D8                   SUB         R13,R0
    00002A7A 80FC                   MOV.B       R0,@(12,R15)
    00002A7C              L1536:                            
      Monochrome  1287            shift = 8-(x&7);
    00002A7C E307                   MOV         #7,R3
    00002A7E 23E9                   AND         R14,R3
    00002A80 E808                   MOV         #8,R8
      Monochrome  1288            if(x < 0) bool1 = 0;
    00002A82 4E11                   CMP/PZ      R14
    00002A84 8D01                   BT/S        L1537




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  127


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002A86 3838                   SUB         R3,R8
    00002A88 6943                   MOV         R4,R9
    00002A8A              L1537:                            
      Monochrome  1289            if(x<-8 || x>119) bool2 = 0;
    00002A8A E3F8                   MOV         #-8,R3
    00002A8C 3E33                   CMP/GE      R3,R14
    00002A8E 8B02                   BF          L1539
    00002A90 E177                   MOV         #119,R1
    00002A92 3E17                   CMP/GT      R1,R14
    00002A94 8B01                   BF          L1538
    00002A96              L1539:                            
    00002A96 6043                   MOV         R4,R0
    00002A98 80F8                   MOV.B       R0,@(8,R15)
    00002A9A              L1538:                            
      Monochrome  1290            if(x>111 || shift==8) bool3 = 0;
    00002A9A E36F                   MOV         #111,R3
    00002A9C 3E37                   CMP/GT      R3,R14
    00002A9E 8902                   BT          L1541
    00002AA0 608E                   EXTS.B      R8,R0
    00002AA2 8808                   CMP/EQ      #8,R0
    00002AA4 8B00                   BF          L1540
    00002AA6              L1541:                            
    00002AA6 6B43                   MOV         R4,R11
    00002AA8              L1540:                            
      Monochrome  1291            screen = ML_vram_adress()+(y+begin<<4)+(x>>3);
    00002AA8 D349                   MOV.L       L1724+2,R3 ; _ML_vram_adress
    00002AAA 430B                   JSR         @R3
    00002AAC 0009                   NOP
    00002AAE 62AE                   EXTS.B      R10,R2
    00002AB0 53F1                   MOV.L       @(4,R15),R3
    00002AB2 4E21                   SHAR        R14
    00002AB4 32DC                   ADD         R13,R2
    00002AB6 4208                   SHLL2       R2
    00002AB8 4208                   SHLL2       R2
    00002ABA 302C                   ADD         R2,R0
    00002ABC 4E21                   SHAR        R14
    00002ABE 4E21                   SHAR        R14
    00002AC0 6403                   MOV         R0,R4
    00002AC2 34EC                   ADD         R14,R4
    00002AC4 84FC                   MOV.B       @(12,R15),R0
      Monochrome  1292            for(i=begin ; i<end ; i++)
    00002AC6 65A3                   MOV         R10,R5
    00002AC8 665E                   EXTS.B      R5,R6
    00002ACA 4600                   SHLL        R6
    00002ACC 363C                   ADD         R3,R6
    00002ACE 6EC3                   MOV         R12,R14
    00002AD0 7E01                   ADD         #1,R14
    00002AD2 6DC3                   MOV         R12,R13
    00002AD4 6703                   MOV         R0,R7
    00002AD6 625E                   EXTS.B      R5,R2
    00002AD8 3273                   CMP/GE      R7,R2
    00002ADA 8D20                   BT/S        L1534
    00002ADC 7D02                   ADD         #2,R13
    00002ADE              L1543:                            
      Monochrome  1293            {
      Monochrome  1294                    line = bmp[i]<<shift;
    00002ADE 628E                   EXTS.B      R8,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  128


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002AE0 6361                   MOV.W       @R6,R3
    00002AE2 633D                   EXTU.W      R3,R3
    00002AE4 432D                   SHLD        R2,R3
      Monochrome  1295                    if(bool1) screen[0] ^= *p;
    00002AE6 629E                   EXTS.B      R9,R2
    00002AE8 2228                   TST         R2,R2
    00002AEA 8D04                   BT/S        L1544
    00002AEC 2F32                   MOV.L       R3,@R15
    00002AEE 62C0                   MOV.B       @R12,R2
    00002AF0 6140                   MOV.B       @R4,R1
    00002AF2 212A                   XOR         R2,R1
    00002AF4 2410                   MOV.B       R1,@R4
    00002AF6              L1544:                            
      Monochrome  1296                    if(bool2) screen[1] ^= *(p+1);
    00002AF6 84F8                   MOV.B       @(8,R15),R0
    00002AF8 2008                   TST         R0,R0
    00002AFA 8D04                   BT/S        L1545
      Monochrome  1297                    if(bool3) screen[2] ^= *(p+2);
    00002AFC 62BE                   EXTS.B      R11,R2
    00002AFE 63E0                   MOV.B       @R14,R3
    00002B00 8441                   MOV.B       @(1,R4),R0
    00002B02 203A                   XOR         R3,R0
    00002B04 8041                   MOV.B       R0,@(1,R4)
    00002B06              L1545:                            
    00002B06 2228                   TST         R2,R2
    00002B08 8903                   BT          L1546
    00002B0A 63D0                   MOV.B       @R13,R3
    00002B0C 8442                   MOV.B       @(2,R4),R0
    00002B0E 203A                   XOR         R3,R0
    00002B10 8042                   MOV.B       R0,@(2,R4)
    00002B12              L1546:                            
      Monochrome  1298                    screen += 16;
    00002B12 7410                   ADD         #16,R4
    00002B14 7501                   ADD         #1,R5
    00002B16 635E                   EXTS.B      R5,R3
    00002B18 3373                   CMP/GE      R7,R3
    00002B1A 8FE0                   BF/S        L1543
    00002B1C 7602                   ADD         #2,R6
    00002B1E              L1534:                            
      Monochrome  1299            }
      Monochrome  1300    }
    00002B1E 7F10                   ADD         #16,R15
    00002B20 4F26                   LDS.L       @R15+,PR
    00002B22 68F6                   MOV.L       @R15+,R8
    00002B24 69F6                   MOV.L       @R15+,R9
    00002B26 6AF6                   MOV.L       @R15+,R10
    00002B28 6BF6                   MOV.L       @R15+,R11
    00002B2A 6CF6                   MOV.L       @R15+,R12
    00002B2C 6DF6                   MOV.L       @R15+,R13
    00002B2E 000B                   RTS
    00002B30 6EF6                   MOV.L       @R15+,R14
      Monochrome  1301    #endif
      Monochrome  1302    
      Monochrome  1303    
      Monochrome  1304    #ifdef ML_BMP_OR_ZOOM
      Monochrome  1305    void ML_bmp_or_zoom(const unsigned char *bmp, int x, int y, int width, int height, float zoom_w, float zoo
                         +m_h)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  129


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B32              _ML_bmp_or_zoom:                 ; function: ML_bmp_or_zoom
                                                           ; frame size=80
                                                           ; used runtime library name:
                                                           ; __divls, __muls, __stoi, __lts
    00002B32 E054                   MOV         #84,R0
      Monochrome  1306    {
      Monochrome  1307        int i, j, iz, jz, width_z, height_z, nb_width, i3, bit, x_screen, pixel;
      Monochrome  1308        int zoom_w14, zoom_h14;
      Monochrome  1309        int begin_x, end_x, begin_y, end_y;
      Monochrome  1310        char* vram = ML_vram_adress();
    00002B34 D326                   MOV.L       L1724+2,R3 ; _ML_vram_adress
    00002B36 2FE6                   MOV.L       R14,@-R15
    00002B38 2FD6                   MOV.L       R13,@-R15
    00002B3A 6E53                   MOV         R5,R14
    00002B3C 2FC6                   MOV.L       R12,@-R15
    00002B3E 2FB6                   MOV.L       R11,@-R15
    00002B40 2FA6                   MOV.L       R10,@-R15
    00002B42 6A63                   MOV         R6,R10
    00002B44 2F96                   MOV.L       R9,@-R15
    00002B46 2F86                   MOV.L       R8,@-R15
    00002B48 4F22                   STS.L       PR,@-R15
    00002B4A 4F12                   STS.L       MACL,@-R15
    00002B4C 7FD4                   ADD         #-44,R15
    00002B4E 1F41                   MOV.L       R4,@(4,R15)
    00002B50 2F72                   MOV.L       R7,@R15
    00002B52 0DFE                   MOV.L       @(R0,R15),R13
    00002B54 E058                   MOV         #88,R0
    00002B56 430B                   JSR         @R3
    00002B58 0CFE                   MOV.L       @(R0,R15),R12
    00002B5A 1F09                   MOV.L       R0,@(36,R15)
      Monochrome  1311    
      Monochrome  1312        if (!bmp) return;
    00002B5C 53F1                   MOV.L       @(4,R15),R3
    00002B5E 2338                   TST         R3,R3
    00002B60 8B01                   BF          L1725
    00002B62 A0AC                   BRA         L1548
    00002B64 0009                   NOP
    00002B66              L1725:                            
      Monochrome  1313        if (zoom_h < 0) zoom_h = 0;
    00002B66 61C3                   MOV         R12,R1
    00002B68 D31A                   MOV.L       L1724+6,R3 ; __lts
    00002B6A 430B                   JSR         @R3
    00002B6C E000                   MOV         #0,R0
    00002B6E 8800                   CMP/EQ      #0,R0
    00002B70 8D01                   BT/S        L1549
      Monochrome  1314        if (zoom_w < 0) zoom_w = 0;
    00002B72 61D3                   MOV         R13,R1
    00002B74 EC00                   MOV         #0,R12
    00002B76              L1549:                            
    00002B76 D217                   MOV.L       L1724+6,R2 ; __lts
    00002B78 420B                   JSR         @R2
    00002B7A E000                   MOV         #0,R0
    00002B7C 8800                   CMP/EQ      #0,R0
    00002B7E 8900                   BT          L1550
    00002B80 ED00                   MOV         #0,R13
    00002B82              L1550:                            
      Monochrome  1315        zoom_w14 = zoom_w * 16384;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  130


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B82 D015                   MOV.L       L1724+10,R0; H'46800000
    00002B84 D315                   MOV.L       L1724+14,R3; __muls
    00002B86 430B                   JSR         @R3
    00002B88 61D3                   MOV         R13,R1
    00002B8A D215                   MOV.L       L1724+18,R2; __stoi
    00002B8C 420B                   JSR         @R2
    00002B8E 0009                   NOP
    00002B90 1F03                   MOV.L       R0,@(12,R15)
      Monochrome  1316        zoom_h14 = zoom_h * 16384;
    00002B92 D011                   MOV.L       L1724+10,R0; H'46800000
    00002B94 D311                   MOV.L       L1724+14,R3; __muls
    00002B96 430B                   JSR         @R3
    00002B98 61C3                   MOV         R12,R1
    00002B9A D211                   MOV.L       L1724+18,R2; __stoi
    00002B9C 420B                   JSR         @R2
    00002B9E 0009                   NOP
    00002BA0 1F02                   MOV.L       R0,@(8,R15)
      Monochrome  1317        width_z = width * zoom_w14 >> 14 ;
    00002BA2 E1F2                   MOV         #-14,R1
    00002BA4 53F3                   MOV.L       @(12,R15),R3
      Monochrome  1318        height_z = height * zoom_h14 >> 14;
    00002BA6 E050                   MOV         #80,R0
    00002BA8 62F2                   MOV.L       @R15,R2
    00002BAA 0237                   MUL.L       R3,R2
    00002BAC 00FE                   MOV.L       @(R0,R15),R0
    00002BAE E3F2                   MOV         #-14,R3
    00002BB0 041A                   STS         MACL,R4
    00002BB2 441C                   SHAD        R1,R4
    00002BB4 51F2                   MOV.L       @(8,R15),R1
      Monochrome  1319        nb_width = width + 7 >> 3;
    00002BB6 7207                   ADD         #7,R2
    00002BB8 0017                   MUL.L       R1,R0
    00002BBA 4221                   SHAR        R2
    00002BBC 071A                   STS         MACL,R7
    00002BBE 473C                   SHAD        R3,R7
    00002BC0 4221                   SHAR        R2
    00002BC2 4221                   SHAR        R2
      Monochrome  1320    
      Monochrome  1321        if (x < 0) begin_x = -x;
    00002BC4 4E11                   CMP/PZ      R14
    00002BC6 8D0D                   BT/S        L1551
    00002BC8 1F27                   MOV.L       R2,@(28,R15)
    00002BCA A00C                   BRA         L1552
    00002BCC 66EB                   NEG         R14,R6
    00002BCE              L1724:                            
    00002BCE 0000                   .DATA.W     0
    00002BD0 <00000000>             .DATA.L     _ML_vram_adress
    00002BD4 <00000000>             .DATA.L     __lts
    00002BD8 46800000               .DATA.L     H'46800000
    00002BDC <00000000>             .DATA.L     __muls
    00002BE0 <00000000>             .DATA.L     __stoi
    00002BE4              L1551:                            
      Monochrome  1322        else begin_x = 0;
    00002BE4 E600                   MOV         #0,R6
    00002BE6              L1552:                            
      Monochrome  1323        if (x+width_z > 128) end_x = 128-x;
    00002BE6 63E3                   MOV         R14,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  131


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002BE8 9574                   MOV.W       L1726,R5   ; H'0080
    00002BEA 334C                   ADD         R4,R3
    00002BEC 3357                   CMP/GT      R5,R3
    00002BEE 8B03                   BF          L1553
    00002BF0 6353                   MOV         R5,R3
    00002BF2 33E8                   SUB         R14,R3
    00002BF4 A001                   BRA         L1554
    00002BF6 1F3A                   MOV.L       R3,@(40,R15)
    00002BF8              L1553:                            
      Monochrome  1324        else end_x = width_z;
    00002BF8 1F4A                   MOV.L       R4,@(40,R15)
    00002BFA              L1554:                            
      Monochrome  1325        if (y < 0) begin_y = -y;
    00002BFA 4A11                   CMP/PZ      R10
    00002BFC 8D03                   BT/S        L1555
      Monochrome  1326        else begin_y = 0;
      Monochrome  1327        if (y+height_z > 64) end_y = 64-y;
    00002BFE E440                   MOV         #64,R4
    00002C00 62AB                   NEG         R10,R2
    00002C02 A002                   BRA         L1556
    00002C04 1F28                   MOV.L       R2,@(32,R15)
    00002C06              L1555:                            
    00002C06 E100                   MOV         #0,R1
    00002C08 1F18                   MOV.L       R1,@(32,R15)
    00002C0A              L1556:                            
    00002C0A 63A3                   MOV         R10,R3
    00002C0C 337C                   ADD         R7,R3
    00002C0E 3347                   CMP/GT      R4,R3
    00002C10 8F03                   BF/S        L1557
      Monochrome  1328        else end_y = height_z;
      Monochrome  1329    
      Monochrome  1330        for (iz=begin_x; iz<end_x; iz++)
    00002C12 6863                   MOV         R6,R8
    00002C14 6C43                   MOV         R4,R12
    00002C16 A001                   BRA         L1558
    00002C18 3CA8                   SUB         R10,R12
    00002C1A              L1557:                            
    00002C1A 6C73                   MOV         R7,R12
    00002C1C              L1558:                            
    00002C1C 69E3                   MOV         R14,R9
    00002C1E 398C                   ADD         R8,R9
    00002C20 9E59                   MOV.W       L1726+2,R14; H'4000
    00002C22 E30E                   MOV         #14,R3
    00002C24 ED07                   MOV         #7,R13
    00002C26 6B63                   MOV         R6,R11
    00002C28 A046                   BRA         L1559
    00002C2A 4B3C                   SHAD        R3,R11
    00002C2C              L1560:                            
      Monochrome  1331        {
      Monochrome  1332            i = (iz << 14) / zoom_w14;
    00002C2C D32A                   MOV.L       L1726+4,R3 ; __divls
    00002C2E 61B3                   MOV         R11,R1
    00002C30 430B                   JSR         @R3
    00002C32 50F3                   MOV.L       @(12,R15),R0
    00002C34 6403                   MOV         R0,R4
      Monochrome  1333            i3 = i >> 3;
    00002C36 6303                   MOV         R0,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  132


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002C38 4321                   SHAR        R3
    00002C3A 4321                   SHAR        R3
    00002C3C 4321                   SHAR        R3
      Monochrome  1334            bit = 0x80 >> (i & 7);
    00002C3E 24D9                   AND         R13,R4
    00002C40 1F36                   MOV.L       R3,@(24,R15)
    00002C42 6253                   MOV         R5,R2
    00002C44 644B                   NEG         R4,R4
    00002C46 424C                   SHAD        R4,R2
    00002C48 1F25                   MOV.L       R2,@(20,R15)
    00002C4A 67A3                   MOV         R10,R7
      Monochrome  1335            x_screen = x+iz;
    00002C4C 2F92                   MOV.L       R9,@R15
    00002C4E 6193                   MOV         R9,R1
      Monochrome  1336    
      Monochrome  1337            for (jz=begin_y; jz<end_y; jz++)
    00002C50 54F8                   MOV.L       @(32,R15),R4
    00002C52 E30E                   MOV         #14,R3
    00002C54 374C                   ADD         R4,R7
    00002C56 4708                   SHLL2       R7
    00002C58 4708                   SHLL2       R7
    00002C5A 4121                   SHAR        R1
    00002C5C 4121                   SHAR        R1
    00002C5E 4121                   SHAR        R1
    00002C60 371C                   ADD         R1,R7
    00002C62 6643                   MOV         R4,R6
    00002C64 51F9                   MOV.L       @(36,R15),R1
    00002C66 6293                   MOV         R9,R2
    00002C68 371C                   ADD         R1,R7
    00002C6A 463C                   SHAD        R3,R6
    00002C6C 22D9                   AND         R13,R2
    00002C6E 622B                   NEG         R2,R2
    00002C70 6053                   MOV         R5,R0
    00002C72 402C                   SHAD        R2,R0
    00002C74 34C3                   CMP/GE      R12,R4
    00002C76 8D1C                   BT/S        L1561
    00002C78 1F04                   MOV.L       R0,@(16,R15)
    00002C7A              L1562:                            
      Monochrome  1338            {
      Monochrome  1339                j = (jz << 14) / zoom_h14;
    00002C7A 6163                   MOV         R6,R1
    00002C7C D316                   MOV.L       L1726+4,R3 ; __divls
    00002C7E 430B                   JSR         @R3
    00002C80 50F2                   MOV.L       @(8,R15),R0
    00002C82 2F02                   MOV.L       R0,@R15
      Monochrome  1340                pixel = bmp[i3 + nb_width * j] & bit;
    00002C84 53F7                   MOV.L       @(28,R15),R3
    00002C86 0037                   MUL.L       R3,R0
    00002C88 51F6                   MOV.L       @(24,R15),R1
    00002C8A 001A                   STS         MACL,R0
    00002C8C 53F1                   MOV.L       @(4,R15),R3
    00002C8E 301C                   ADD         R1,R0
    00002C90 013C                   MOV.B       @(R0,R3),R1
    00002C92 611C                   EXTU.B      R1,R1
    00002C94 53F5                   MOV.L       @(20,R15),R3
    00002C96 2139                   AND         R3,R1
      Monochrome  1341    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  133


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1342                            if (pixel != 0) vram[(y+jz<<4)+(x_screen>>3)] |= 128>>(x_screen&7);
    00002C98 6313                   MOV         R1,R3
    00002C9A 2338                   TST         R3,R3
    00002C9C 8D04                   BT/S        L1563
    00002C9E 2F12                   MOV.L       R1,@R15
    00002CA0 53F4                   MOV.L       @(16,R15),R3
    00002CA2 6270                   MOV.B       @R7,R2
    00002CA4 223B                   OR          R3,R2
    00002CA6 2720                   MOV.B       R2,@R7
    00002CA8              L1563:                            
    00002CA8 7401                   ADD         #1,R4
    00002CAA 7710                   ADD         #16,R7
    00002CAC 34C3                   CMP/GE      R12,R4
    00002CAE 8FE4                   BF/S        L1562
    00002CB0 36EC                   ADD         R14,R6
    00002CB2              L1561:                            
    00002CB2 7801                   ADD         #1,R8
    00002CB4 7901                   ADD         #1,R9
    00002CB6 3BEC                   ADD         R14,R11
    00002CB8              L1559:                            
    00002CB8 52FA                   MOV.L       @(40,R15),R2
    00002CBA 3823                   CMP/GE      R2,R8
    00002CBC 8BB6                   BF          L1560
    00002CBE              L1548:                            
      Monochrome  1343            }
      Monochrome  1344        }
      Monochrome  1345    }
    00002CBE 7F2C                   ADD         #44,R15
    00002CC0 4F16                   LDS.L       @R15+,MACL
    00002CC2 4F26                   LDS.L       @R15+,PR
    00002CC4 68F6                   MOV.L       @R15+,R8
    00002CC6 69F6                   MOV.L       @R15+,R9
    00002CC8 6AF6                   MOV.L       @R15+,R10
    00002CCA 6BF6                   MOV.L       @R15+,R11
    00002CCC 6CF6                   MOV.L       @R15+,R12
    00002CCE 6DF6                   MOV.L       @R15+,R13
    00002CD0 000B                   RTS
    00002CD2 6EF6                   MOV.L       @R15+,R14
    00002CD4              L1726:                            
    00002CD4 0080                   .DATA.W     H'0080
    00002CD6 4000                   .DATA.W     H'4000
    00002CD8 <00000000>             .DATA.L     __divls
      Monochrome  1346    #endif
      Monochrome  1347    
      Monochrome  1348    #ifdef ML_BMP_AND_ZOOM
      Monochrome  1349    void ML_bmp_and_zoom(const unsigned char *bmp, int x, int y, int width, int height, float zoom_w, float zo
                         +om_h)
    00002CDC              _ML_bmp_and_zoom:                ; function: ML_bmp_and_zoom
                                                           ; frame size=80
                                                           ; used runtime library name:
                                                           ; __divls, __muls, __stoi, __lts
    00002CDC 2FE6                   MOV.L       R14,@-R15
    00002CDE E054                   MOV         #84,R0
      Monochrome  1350    {
      Monochrome  1351        int i, j, iz, jz, width_z, height_z, nb_width, i3, bit, x_screen, pixel;
      Monochrome  1352        int zoom_w14, zoom_h14;
      Monochrome  1353        int begin_x, end_x, begin_y, end_y;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  134


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1354        char* vram = ML_vram_adress();
    00002CE0 D338                   MOV.L       L1727+4,R3 ; _ML_vram_adress
    00002CE2 6E53                   MOV         R5,R14
    00002CE4 2FD6                   MOV.L       R13,@-R15
    00002CE6 2FC6                   MOV.L       R12,@-R15
    00002CE8 2FB6                   MOV.L       R11,@-R15
    00002CEA 2FA6                   MOV.L       R10,@-R15
    00002CEC 2F96                   MOV.L       R9,@-R15
    00002CEE 6A63                   MOV         R6,R10
    00002CF0 2F86                   MOV.L       R8,@-R15
    00002CF2 4F22                   STS.L       PR,@-R15
    00002CF4 4F12                   STS.L       MACL,@-R15
    00002CF6 7FD4                   ADD         #-44,R15
    00002CF8 1F41                   MOV.L       R4,@(4,R15)
    00002CFA 2F72                   MOV.L       R7,@R15
    00002CFC 0DFE                   MOV.L       @(R0,R15),R13
    00002CFE E058                   MOV         #88,R0
    00002D00 430B                   JSR         @R3
    00002D02 0CFE                   MOV.L       @(R0,R15),R12
    00002D04 1F09                   MOV.L       R0,@(36,R15)
      Monochrome  1355    
      Monochrome  1356        if (!bmp) return;
    00002D06 53F1                   MOV.L       @(4,R15),R3
    00002D08 2338                   TST         R3,R3
    00002D0A 8B01                   BF          L1728
    00002D0C A0B1                   BRA         L1565
    00002D0E 0009                   NOP
    00002D10              L1728:                            
      Monochrome  1357        if (zoom_h < 0) zoom_h = 0;
    00002D10 D32D                   MOV.L       L1727+8,R3 ; __lts
    00002D12 61C3                   MOV         R12,R1
    00002D14 430B                   JSR         @R3
    00002D16 E000                   MOV         #0,R0
    00002D18 8800                   CMP/EQ      #0,R0
    00002D1A 8D01                   BT/S        L1566
      Monochrome  1358        if (zoom_w < 0) zoom_w = 0;
    00002D1C 61D3                   MOV         R13,R1
    00002D1E EC00                   MOV         #0,R12
    00002D20              L1566:                            
    00002D20 D229                   MOV.L       L1727+8,R2 ; __lts
    00002D22 420B                   JSR         @R2
    00002D24 E000                   MOV         #0,R0
    00002D26 8800                   CMP/EQ      #0,R0
    00002D28 8900                   BT          L1567
    00002D2A ED00                   MOV         #0,R13
    00002D2C              L1567:                            
      Monochrome  1359        zoom_w14 = zoom_w * 16384;
    00002D2C D027                   MOV.L       L1727+12,R0; H'46800000
    00002D2E D328                   MOV.L       L1727+16,R3; __muls
    00002D30 430B                   JSR         @R3
    00002D32 61D3                   MOV         R13,R1
    00002D34 D227                   MOV.L       L1727+20,R2; __stoi
    00002D36 420B                   JSR         @R2
    00002D38 0009                   NOP
    00002D3A 1F03                   MOV.L       R0,@(12,R15)
      Monochrome  1360        zoom_h14 = zoom_h * 16384;
    00002D3C D023                   MOV.L       L1727+12,R0; H'46800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  135


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002D3E D324                   MOV.L       L1727+16,R3; __muls
    00002D40 430B                   JSR         @R3
    00002D42 61C3                   MOV         R12,R1
    00002D44 D223                   MOV.L       L1727+20,R2; __stoi
    00002D46 420B                   JSR         @R2
    00002D48 0009                   NOP
      Monochrome  1361        width_z = width * zoom_w14 >> 14 ;
    00002D4A E1F2                   MOV         #-14,R1
    00002D4C 1F02                   MOV.L       R0,@(8,R15)
      Monochrome  1362        height_z = height * zoom_h14 >> 14;
    00002D4E E050                   MOV         #80,R0
    00002D50 53F3                   MOV.L       @(12,R15),R3
    00002D52 62F2                   MOV.L       @R15,R2
    00002D54 00FE                   MOV.L       @(R0,R15),R0
    00002D56 0237                   MUL.L       R3,R2
    00002D58 041A                   STS         MACL,R4
    00002D5A 441C                   SHAD        R1,R4
    00002D5C 51F2                   MOV.L       @(8,R15),R1
    00002D5E E3F2                   MOV         #-14,R3
    00002D60 0017                   MUL.L       R1,R0
      Monochrome  1363        nb_width = width + 7 >> 3;
    00002D62 7207                   ADD         #7,R2
    00002D64 071A                   STS         MACL,R7
    00002D66 473C                   SHAD        R3,R7
    00002D68 4221                   SHAR        R2
    00002D6A 4221                   SHAR        R2
    00002D6C 4221                   SHAR        R2
      Monochrome  1364    
      Monochrome  1365        if (x < 0) begin_x = -x;
    00002D6E 4E11                   CMP/PZ      R14
    00002D70 8D02                   BT/S        L1568
    00002D72 1F27                   MOV.L       R2,@(28,R15)
    00002D74 A001                   BRA         L1569
    00002D76 66EB                   NEG         R14,R6
    00002D78              L1568:                            
      Monochrome  1366        else begin_x = 0;
    00002D78 E600                   MOV         #0,R6
    00002D7A              L1569:                            
      Monochrome  1367        if (x+width_z > 128) end_x = 128-x;
    00002D7A 63E3                   MOV         R14,R3
    00002D7C 9520                   MOV.W       L1727,R5   ; H'0080
    00002D7E 334C                   ADD         R4,R3
    00002D80 3357                   CMP/GT      R5,R3
    00002D82 8B03                   BF          L1570
    00002D84 6353                   MOV         R5,R3
    00002D86 33E8                   SUB         R14,R3
    00002D88 A001                   BRA         L1571
    00002D8A 1F3A                   MOV.L       R3,@(40,R15)
    00002D8C              L1570:                            
      Monochrome  1368        else end_x = width_z;
    00002D8C 1F4A                   MOV.L       R4,@(40,R15)
    00002D8E              L1571:                            
      Monochrome  1369        if (y < 0) begin_y = -y;
    00002D8E 4A11                   CMP/PZ      R10
    00002D90 8D03                   BT/S        L1572
      Monochrome  1370        else begin_y = 0;
      Monochrome  1371        if (y+height_z > 64) end_y = 64-y;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  136


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002D92 E440                   MOV         #64,R4
    00002D94 62AB                   NEG         R10,R2
    00002D96 A002                   BRA         L1573
    00002D98 1F28                   MOV.L       R2,@(32,R15)
    00002D9A              L1572:                            
    00002D9A E100                   MOV         #0,R1
    00002D9C 1F18                   MOV.L       R1,@(32,R15)
    00002D9E              L1573:                            
    00002D9E 63A3                   MOV         R10,R3
    00002DA0 337C                   ADD         R7,R3
    00002DA2 3347                   CMP/GT      R4,R3
    00002DA4 8F03                   BF/S        L1574
      Monochrome  1372        else end_y = height_z;
      Monochrome  1373    
      Monochrome  1374        for (iz=begin_x; iz<end_x; iz++)
    00002DA6 6863                   MOV         R6,R8
    00002DA8 6C43                   MOV         R4,R12
    00002DAA A001                   BRA         L1575
    00002DAC 3CA8                   SUB         R10,R12
    00002DAE              L1574:                            
    00002DAE 6C73                   MOV         R7,R12
    00002DB0              L1575:                            
    00002DB0 69E3                   MOV         R14,R9
    00002DB2 398C                   ADD         R8,R9
    00002DB4 9E05                   MOV.W       L1727+2,R14; H'4000
    00002DB6 E30E                   MOV         #14,R3
    00002DB8 ED07                   MOV         #7,R13
    00002DBA 6B63                   MOV         R6,R11
    00002DBC A056                   BRA         L1576
    00002DBE 4B3C                   SHAD        R3,R11
    00002DC0              L1727:                            
    00002DC0 0080                   .DATA.W     H'0080
    00002DC2 4000                   .DATA.W     H'4000
    00002DC4 <00000000>             .DATA.L     _ML_vram_adress
    00002DC8 <00000000>             .DATA.L     __lts
    00002DCC 46800000               .DATA.L     H'46800000
    00002DD0 <00000000>             .DATA.L     __muls
    00002DD4 <00000000>             .DATA.L     __stoi
    00002DD8              L1577:                            
      Monochrome  1375        {
      Monochrome  1376            i = (iz << 14) / zoom_w14;
    00002DD8 D352                   MOV.L       L1729,R3   ; __divls
    00002DDA 61B3                   MOV         R11,R1
    00002DDC 430B                   JSR         @R3
    00002DDE 50F3                   MOV.L       @(12,R15),R0
    00002DE0 6403                   MOV         R0,R4
      Monochrome  1377            i3 = i >> 3;
    00002DE2 6303                   MOV         R0,R3
    00002DE4 4321                   SHAR        R3
    00002DE6 4321                   SHAR        R3
    00002DE8 4321                   SHAR        R3
      Monochrome  1378            bit = 0x80 >> (i & 7);
    00002DEA 24D9                   AND         R13,R4
    00002DEC 1F36                   MOV.L       R3,@(24,R15)
    00002DEE 6253                   MOV         R5,R2
    00002DF0 644B                   NEG         R4,R4
    00002DF2 424C                   SHAD        R4,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  137


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002DF4 1F25                   MOV.L       R2,@(20,R15)
    00002DF6 67A3                   MOV         R10,R7
      Monochrome  1379            x_screen = x+iz;
    00002DF8 2F92                   MOV.L       R9,@R15
    00002DFA 6193                   MOV         R9,R1
      Monochrome  1380    
      Monochrome  1381            for (jz=begin_y; jz<end_y; jz++)
    00002DFC 54F8                   MOV.L       @(32,R15),R4
    00002DFE E30E                   MOV         #14,R3
    00002E00 374C                   ADD         R4,R7
    00002E02 4708                   SHLL2       R7
    00002E04 4708                   SHLL2       R7
    00002E06 4121                   SHAR        R1
    00002E08 4121                   SHAR        R1
    00002E0A 4121                   SHAR        R1
    00002E0C 371C                   ADD         R1,R7
    00002E0E 6643                   MOV         R4,R6
    00002E10 51F9                   MOV.L       @(36,R15),R1
    00002E12 6293                   MOV         R9,R2
    00002E14 371C                   ADD         R1,R7
    00002E16 463C                   SHAD        R3,R6
    00002E18 22D9                   AND         R13,R2
    00002E1A 622B                   NEG         R2,R2
    00002E1C 6053                   MOV         R5,R0
    00002E1E 402C                   SHAD        R2,R0
    00002E20 6007                   NOT         R0,R0
    00002E22 62F3                   MOV         R15,R2
    00002E24 7210                   ADD         #16,R2
    00002E26 34C3                   CMP/GE      R12,R4
    00002E28 8D1D                   BT/S        L1578
    00002E2A 2200                   MOV.B       R0,@R2
    00002E2C              L1579:                            
      Monochrome  1382            {
      Monochrome  1383                j = (jz << 14) / zoom_h14;
    00002E2C D33D                   MOV.L       L1729,R3   ; __divls
    00002E2E 6163                   MOV         R6,R1
    00002E30 430B                   JSR         @R3
    00002E32 50F2                   MOV.L       @(8,R15),R0
    00002E34 2F02                   MOV.L       R0,@R15
      Monochrome  1384                pixel = bmp[i3 + nb_width * j] & bit;
    00002E36 53F7                   MOV.L       @(28,R15),R3
    00002E38 51F6                   MOV.L       @(24,R15),R1
    00002E3A 0037                   MUL.L       R3,R0
    00002E3C 53F1                   MOV.L       @(4,R15),R3
    00002E3E 001A                   STS         MACL,R0
    00002E40 301C                   ADD         R1,R0
    00002E42 013C                   MOV.B       @(R0,R3),R1
    00002E44 53F5                   MOV.L       @(20,R15),R3
    00002E46 611C                   EXTU.B      R1,R1
    00002E48 2139                   AND         R3,R1
      Monochrome  1385                            if (pixel == 0) vram[(y+jz<<4)+(x_screen>>3)] &= ~(128>>(x_screen&7));
    00002E4A 6313                   MOV         R1,R3
    00002E4C 2338                   TST         R3,R3
    00002E4E 8F05                   BF/S        L1580
    00002E50 2F12                   MOV.L       R1,@R15
    00002E52 E010                   MOV         #16,R0
    00002E54 6270                   MOV.B       @R7,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  138


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002E56 03FC                   MOV.B       @(R0,R15),R3
    00002E58 2239                   AND         R3,R2
    00002E5A 2720                   MOV.B       R2,@R7
    00002E5C              L1580:                            
    00002E5C 7401                   ADD         #1,R4
    00002E5E 7710                   ADD         #16,R7
    00002E60 34C3                   CMP/GE      R12,R4
    00002E62 8FE3                   BF/S        L1579
    00002E64 36EC                   ADD         R14,R6
    00002E66              L1578:                            
    00002E66 7801                   ADD         #1,R8
    00002E68 7901                   ADD         #1,R9
    00002E6A 3BEC                   ADD         R14,R11
    00002E6C              L1576:                            
    00002E6C 52FA                   MOV.L       @(40,R15),R2
    00002E6E 3823                   CMP/GE      R2,R8
    00002E70 8BB2                   BF          L1577
    00002E72              L1565:                            
      Monochrome  1386            }
      Monochrome  1387        }
      Monochrome  1388    }
    00002E72 7F2C                   ADD         #44,R15
    00002E74 4F16                   LDS.L       @R15+,MACL
    00002E76 4F26                   LDS.L       @R15+,PR
    00002E78 68F6                   MOV.L       @R15+,R8
    00002E7A 69F6                   MOV.L       @R15+,R9
    00002E7C 6AF6                   MOV.L       @R15+,R10
    00002E7E 6BF6                   MOV.L       @R15+,R11
    00002E80 6CF6                   MOV.L       @R15+,R12
    00002E82 6DF6                   MOV.L       @R15+,R13
    00002E84 000B                   RTS
    00002E86 6EF6                   MOV.L       @R15+,R14
      Monochrome  1389    #endif
      Monochrome  1390    
      Monochrome  1391    #ifdef ML_BMP_XOR_ZOOM
      Monochrome  1392    void ML_bmp_xor_zoom(const unsigned char *bmp, int x, int y, int width, int height, float zoom_w, float zo
                         +om_h)
    00002E88              _ML_bmp_xor_zoom:                ; function: ML_bmp_xor_zoom
                                                           ; frame size=80
                                                           ; used runtime library name:
                                                           ; __divls, __muls, __stoi, __lts
    00002E88 2FE6                   MOV.L       R14,@-R15
    00002E8A E054                   MOV         #84,R0
      Monochrome  1393    {
      Monochrome  1394        int i, j, iz, jz, width_z, height_z, nb_width, i3, bit, x_screen, pixel;
      Monochrome  1395        int zoom_w14, zoom_h14;
      Monochrome  1396        int begin_x, end_x, begin_y, end_y;
      Monochrome  1397        char* vram = ML_vram_adress();
    00002E8C D326                   MOV.L       L1729+4,R3 ; _ML_vram_adress
    00002E8E 6E53                   MOV         R5,R14
    00002E90 2FD6                   MOV.L       R13,@-R15
    00002E92 2FC6                   MOV.L       R12,@-R15
    00002E94 2FB6                   MOV.L       R11,@-R15
    00002E96 2FA6                   MOV.L       R10,@-R15
    00002E98 2F96                   MOV.L       R9,@-R15
    00002E9A 6A63                   MOV         R6,R10
    00002E9C 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  139


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002E9E 4F22                   STS.L       PR,@-R15
    00002EA0 4F12                   STS.L       MACL,@-R15
    00002EA2 7FD4                   ADD         #-44,R15
    00002EA4 1F41                   MOV.L       R4,@(4,R15)
    00002EA6 2F72                   MOV.L       R7,@R15
    00002EA8 0DFE                   MOV.L       @(R0,R15),R13
    00002EAA E058                   MOV         #88,R0
    00002EAC 430B                   JSR         @R3
    00002EAE 0CFE                   MOV.L       @(R0,R15),R12
    00002EB0 1F09                   MOV.L       R0,@(36,R15)
      Monochrome  1398    
      Monochrome  1399        if (!bmp) return;
    00002EB2 53F1                   MOV.L       @(4,R15),R3
    00002EB4 2338                   TST         R3,R3
    00002EB6 8B01                   BF          L1730
    00002EB8 A0AD                   BRA         L1582
    00002EBA 0009                   NOP
    00002EBC              L1730:                            
      Monochrome  1400        if (zoom_h < 0) zoom_h = 0;
    00002EBC D31B                   MOV.L       L1729+8,R3 ; __lts
    00002EBE 61C3                   MOV         R12,R1
    00002EC0 430B                   JSR         @R3
    00002EC2 E000                   MOV         #0,R0
    00002EC4 8800                   CMP/EQ      #0,R0
    00002EC6 8D01                   BT/S        L1583
      Monochrome  1401        if (zoom_w < 0) zoom_w = 0;
    00002EC8 61D3                   MOV         R13,R1
    00002ECA EC00                   MOV         #0,R12
    00002ECC              L1583:                            
    00002ECC D217                   MOV.L       L1729+8,R2 ; __lts
    00002ECE 420B                   JSR         @R2
    00002ED0 E000                   MOV         #0,R0
    00002ED2 8800                   CMP/EQ      #0,R0
    00002ED4 8900                   BT          L1584
    00002ED6 ED00                   MOV         #0,R13
    00002ED8              L1584:                            
      Monochrome  1402        zoom_w14 = zoom_w * 16384;
    00002ED8 D015                   MOV.L       L1729+12,R0; H'46800000
    00002EDA D316                   MOV.L       L1729+16,R3; __muls
    00002EDC 430B                   JSR         @R3
    00002EDE 61D3                   MOV         R13,R1
    00002EE0 D215                   MOV.L       L1729+20,R2; __stoi
    00002EE2 420B                   JSR         @R2
    00002EE4 0009                   NOP
    00002EE6 1F03                   MOV.L       R0,@(12,R15)
      Monochrome  1403        zoom_h14 = zoom_h * 16384;
    00002EE8 D011                   MOV.L       L1729+12,R0; H'46800000
    00002EEA D312                   MOV.L       L1729+16,R3; __muls
    00002EEC 430B                   JSR         @R3
    00002EEE 61C3                   MOV         R12,R1
    00002EF0 D211                   MOV.L       L1729+20,R2; __stoi
    00002EF2 420B                   JSR         @R2
    00002EF4 0009                   NOP
      Monochrome  1404        width_z = width * zoom_w14 >> 14 ;
    00002EF6 E1F2                   MOV         #-14,R1
    00002EF8 1F02                   MOV.L       R0,@(8,R15)
      Monochrome  1405        height_z = height * zoom_h14 >> 14;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  140


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002EFA E050                   MOV         #80,R0
    00002EFC 53F3                   MOV.L       @(12,R15),R3
    00002EFE 62F2                   MOV.L       @R15,R2
    00002F00 00FE                   MOV.L       @(R0,R15),R0
    00002F02 0237                   MUL.L       R3,R2
    00002F04 041A                   STS         MACL,R4
    00002F06 441C                   SHAD        R1,R4
    00002F08 51F2                   MOV.L       @(8,R15),R1
    00002F0A E3F2                   MOV         #-14,R3
    00002F0C 0017                   MUL.L       R1,R0
      Monochrome  1406        nb_width = width + 7 >> 3;
    00002F0E 7207                   ADD         #7,R2
    00002F10 071A                   STS         MACL,R7
    00002F12 473C                   SHAD        R3,R7
    00002F14 4221                   SHAR        R2
    00002F16 4221                   SHAR        R2
    00002F18 4221                   SHAR        R2
      Monochrome  1407    
      Monochrome  1408        if (x < 0) begin_x = -x;
    00002F1A 4E11                   CMP/PZ      R14
    00002F1C 8D0E                   BT/S        L1585
    00002F1E 1F27                   MOV.L       R2,@(28,R15)
    00002F20 A00D                   BRA         L1586
    00002F22 66EB                   NEG         R14,R6
    00002F24              L1729:                            
    00002F24 <00000000>             .DATA.L     __divls
    00002F28 <00000000>             .DATA.L     _ML_vram_adress
    00002F2C <00000000>             .DATA.L     __lts
    00002F30 46800000               .DATA.L     H'46800000
    00002F34 <00000000>             .DATA.L     __muls
    00002F38 <00000000>             .DATA.L     __stoi
    00002F3C              L1585:                            
      Monochrome  1409        else begin_x = 0;
    00002F3C E600                   MOV         #0,R6
    00002F3E              L1586:                            
      Monochrome  1410        if (x+width_z > 128) end_x = 128-x;
    00002F3E 63E3                   MOV         R14,R3
    00002F40 9574                   MOV.W       L1731,R5   ; H'0080
    00002F42 334C                   ADD         R4,R3
    00002F44 3357                   CMP/GT      R5,R3
    00002F46 8B03                   BF          L1587
    00002F48 6353                   MOV         R5,R3
    00002F4A 33E8                   SUB         R14,R3
    00002F4C A001                   BRA         L1588
    00002F4E 1F3A                   MOV.L       R3,@(40,R15)
    00002F50              L1587:                            
      Monochrome  1411        else end_x = width_z;
    00002F50 1F4A                   MOV.L       R4,@(40,R15)
    00002F52              L1588:                            
      Monochrome  1412        if (y < 0) begin_y = -y;
    00002F52 4A11                   CMP/PZ      R10
    00002F54 8D03                   BT/S        L1589
      Monochrome  1413        else begin_y = 0;
      Monochrome  1414        if (y+height_z > 64) end_y = 64-y;
    00002F56 E440                   MOV         #64,R4
    00002F58 62AB                   NEG         R10,R2
    00002F5A A002                   BRA         L1590




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  141


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002F5C 1F28                   MOV.L       R2,@(32,R15)
    00002F5E              L1589:                            
    00002F5E E100                   MOV         #0,R1
    00002F60 1F18                   MOV.L       R1,@(32,R15)
    00002F62              L1590:                            
    00002F62 63A3                   MOV         R10,R3
    00002F64 337C                   ADD         R7,R3
    00002F66 3347                   CMP/GT      R4,R3
    00002F68 8F03                   BF/S        L1591
      Monochrome  1415        else end_y = height_z;
      Monochrome  1416    
      Monochrome  1417        for (iz=begin_x; iz<end_x; iz++)
    00002F6A 6863                   MOV         R6,R8
    00002F6C 6C43                   MOV         R4,R12
    00002F6E A001                   BRA         L1592
    00002F70 3CA8                   SUB         R10,R12
    00002F72              L1591:                            
    00002F72 6C73                   MOV         R7,R12
    00002F74              L1592:                            
    00002F74 69E3                   MOV         R14,R9
    00002F76 398C                   ADD         R8,R9
    00002F78 9E59                   MOV.W       L1731+2,R14; H'4000
    00002F7A E30E                   MOV         #14,R3
    00002F7C ED07                   MOV         #7,R13
    00002F7E 6B63                   MOV         R6,R11
    00002F80 A046                   BRA         L1593
    00002F82 4B3C                   SHAD        R3,R11
    00002F84              L1594:                            
      Monochrome  1418        {
      Monochrome  1419            i = (iz << 14) / zoom_w14;
    00002F84 D32A                   MOV.L       L1731+4,R3 ; __divls
    00002F86 61B3                   MOV         R11,R1
    00002F88 430B                   JSR         @R3
    00002F8A 50F3                   MOV.L       @(12,R15),R0
    00002F8C 6403                   MOV         R0,R4
      Monochrome  1420            i3 = i >> 3;
    00002F8E 6303                   MOV         R0,R3
    00002F90 4321                   SHAR        R3
    00002F92 4321                   SHAR        R3
    00002F94 4321                   SHAR        R3
      Monochrome  1421            bit = 0x80 >> (i & 7);
    00002F96 24D9                   AND         R13,R4
    00002F98 1F36                   MOV.L       R3,@(24,R15)
    00002F9A 6253                   MOV         R5,R2
    00002F9C 644B                   NEG         R4,R4
    00002F9E 424C                   SHAD        R4,R2
    00002FA0 1F25                   MOV.L       R2,@(20,R15)
    00002FA2 67A3                   MOV         R10,R7
      Monochrome  1422            x_screen = x+iz;
    00002FA4 2F92                   MOV.L       R9,@R15
    00002FA6 6193                   MOV         R9,R1
      Monochrome  1423    
      Monochrome  1424            for (jz=begin_y; jz<end_y; jz++)
    00002FA8 54F8                   MOV.L       @(32,R15),R4
    00002FAA E30E                   MOV         #14,R3
    00002FAC 374C                   ADD         R4,R7
    00002FAE 4708                   SHLL2       R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  142


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002FB0 4708                   SHLL2       R7
    00002FB2 4121                   SHAR        R1
    00002FB4 4121                   SHAR        R1
    00002FB6 4121                   SHAR        R1
    00002FB8 371C                   ADD         R1,R7
    00002FBA 6643                   MOV         R4,R6
    00002FBC 51F9                   MOV.L       @(36,R15),R1
    00002FBE 6293                   MOV         R9,R2
    00002FC0 371C                   ADD         R1,R7
    00002FC2 463C                   SHAD        R3,R6
    00002FC4 22D9                   AND         R13,R2
    00002FC6 622B                   NEG         R2,R2
    00002FC8 6053                   MOV         R5,R0
    00002FCA 402C                   SHAD        R2,R0
    00002FCC 34C3                   CMP/GE      R12,R4
    00002FCE 8D1C                   BT/S        L1595
    00002FD0 1F04                   MOV.L       R0,@(16,R15)
    00002FD2              L1596:                            
      Monochrome  1425            {
      Monochrome  1426                j = (jz << 14) / zoom_h14;
    00002FD2 6163                   MOV         R6,R1
    00002FD4 D316                   MOV.L       L1731+4,R3 ; __divls
    00002FD6 430B                   JSR         @R3
    00002FD8 50F2                   MOV.L       @(8,R15),R0
    00002FDA 2F02                   MOV.L       R0,@R15
      Monochrome  1427                pixel = bmp[i3 + nb_width * j] & bit;
    00002FDC 53F7                   MOV.L       @(28,R15),R3
    00002FDE 0037                   MUL.L       R3,R0
    00002FE0 51F6                   MOV.L       @(24,R15),R1
    00002FE2 001A                   STS         MACL,R0
    00002FE4 53F1                   MOV.L       @(4,R15),R3
    00002FE6 301C                   ADD         R1,R0
    00002FE8 013C                   MOV.B       @(R0,R3),R1
    00002FEA 611C                   EXTU.B      R1,R1
    00002FEC 53F5                   MOV.L       @(20,R15),R3
    00002FEE 2139                   AND         R3,R1
      Monochrome  1428                if (pixel != 0) vram[(y+jz<<4)+(x_screen>>3)] ^= 128>>(x_screen&7);
    00002FF0 6313                   MOV         R1,R3
    00002FF2 2338                   TST         R3,R3
    00002FF4 8D04                   BT/S        L1597
    00002FF6 2F12                   MOV.L       R1,@R15
    00002FF8 53F4                   MOV.L       @(16,R15),R3
    00002FFA 6270                   MOV.B       @R7,R2
    00002FFC 223A                   XOR         R3,R2
    00002FFE 2720                   MOV.B       R2,@R7
    00003000              L1597:                            
    00003000 7401                   ADD         #1,R4
    00003002 7710                   ADD         #16,R7
    00003004 34C3                   CMP/GE      R12,R4
    00003006 8FE4                   BF/S        L1596
    00003008 36EC                   ADD         R14,R6
    0000300A              L1595:                            
    0000300A 7801                   ADD         #1,R8
    0000300C 7901                   ADD         #1,R9
    0000300E 3BEC                   ADD         R14,R11
    00003010              L1593:                            
    00003010 52FA                   MOV.L       @(40,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  143


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00003012 3823                   CMP/GE      R2,R8
    00003014 8BB6                   BF          L1594
    00003016              L1582:                            
      Monochrome  1429            }
      Monochrome  1430        }
      Monochrome  1431    }
    00003016 7F2C                   ADD         #44,R15
    00003018 4F16                   LDS.L       @R15+,MACL
    0000301A 4F26                   LDS.L       @R15+,PR
    0000301C 68F6                   MOV.L       @R15+,R8
    0000301E 69F6                   MOV.L       @R15+,R9
    00003020 6AF6                   MOV.L       @R15+,R10
    00003022 6BF6                   MOV.L       @R15+,R11
    00003024 6CF6                   MOV.L       @R15+,R12
    00003026 6DF6                   MOV.L       @R15+,R13
    00003028 000B                   RTS
    0000302A 6EF6                   MOV.L       @R15+,R14
    0000302C              L1731:                            
    0000302C 0080                   .DATA.W     H'0080
    0000302E 4000                   .DATA.W     H'4000
    00003030 <00000000>             .DATA.L     __divls
      Monochrome  1432    #endif
      Monochrome  1433    
      Monochrome  1434    #ifdef ML_BMP_OR_ROTATE
      Monochrome  1435    void ML_bmp_or_rotate(const unsigned char *bmp, int x, int y, int width, int height, int angle)
    00003034              _ML_bmp_or_rotate:               ; function: ML_bmp_or_rotate
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __muld, __divdr, __negd, __dtos, __stoi, __itod
    00003034 2FE6                   MOV.L       R14,@-R15
    00003036 E058                   MOV         #88,R0
      Monochrome  1436    {
      Monochrome  1437        int i, j, i3, dx, dy, ox, oy, xr, yr, nb_width, pixel, bit;
      Monochrome  1438        int cosinus, sinus;
      Monochrome  1439        char* vram = ML_vram_adress();
    00003038 D347                   MOV.L       L1732+12,R3; _ML_vram_adress
    0000303A 2FD6                   MOV.L       R13,@-R15
    0000303C 2FC6                   MOV.L       R12,@-R15
    0000303E 2FB6                   MOV.L       R11,@-R15
    00003040 2FA6                   MOV.L       R10,@-R15
    00003042 2F96                   MOV.L       R9,@-R15
    00003044 2F86                   MOV.L       R8,@-R15
    00003046 E900                   MOV         #0,R9
    00003048 4F22                   STS.L       PR,@-R15
    0000304A 4F12                   STS.L       MACL,@-R15
    0000304C 7FD0                   ADD         #-48,R15
    0000304E 1F47                   MOV.L       R4,@(28,R15)
    00003050 1F55                   MOV.L       R5,@(20,R15)
    00003052 1F66                   MOV.L       R6,@(24,R15)
    00003054 1F74                   MOV.L       R7,@(16,R15)
    00003056 430B                   JSR         @R3
    00003058 0EFE                   MOV.L       @(R0,R15),R14
    0000305A 1F0B                   MOV.L       R0,@(44,R15)
      Monochrome  1440    
      Monochrome  1441        if (!bmp) return;
    0000305C 53F7                   MOV.L       @(28,R15),R3
    0000305E 2338                   TST         R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  144


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00003060 8B01                   BF          L1733
    00003062 A0F8                   BRA         L1599
    00003064 0009                   NOP
    00003066              L1733:                            
      Monochrome  1442        ox = x + width / 2;
    00003066 E200                   MOV         #0,R2
    00003068 51F5                   MOV.L       @(20,R15),R1
      Monochrome  1443        oy = y + height / 2;
    0000306A E054                   MOV         #84,R0
      Monochrome  1444        angle %= 360;
    0000306C 946E                   MOV.W       L1732,R4   ; H'0168
    0000306E 53F4                   MOV.L       @(16,R15),R3
    00003070 3237                   CMP/GT      R3,R2
    00003072 332E                   ADDC        R2,R3
    00003074 4321                   SHAR        R3
    00003076 331C                   ADD         R1,R3
    00003078 1F32                   MOV.L       R3,@(8,R15)
    0000307A 02FE                   MOV.L       @(R0,R15),R2
    0000307C D337                   MOV.L       L1732+16,R3; __modls
    0000307E E000                   MOV         #0,R0
    00003080 3027                   CMP/GT      R2,R0
    00003082 320E                   ADDC        R0,R2
    00003084 50F6                   MOV.L       @(24,R15),R0
    00003086 4221                   SHAR        R2
    00003088 320C                   ADD         R0,R2
    0000308A 6043                   MOV         R4,R0
    0000308C 1F21                   MOV.L       R2,@(4,R15)
    0000308E 430B                   JSR         @R3
    00003090 61E3                   MOV         R14,R1
    00003092 6E03                   MOV         R0,R14
      Monochrome  1445        if (angle < 0) angle += 360;
    00003094 4E11                   CMP/PZ      R14
    00003096 8900                   BT          L1600
    00003098 3E4C                   ADD         R4,R14
    0000309A              L1600:                            
      Monochrome  1446        if (angle == 0) {cosinus = 16384; sinus = 0;}
    0000309A 2EE8                   TST         R14,R14
    0000309C 9457                   MOV.W       L1732+2,R4 ; H'4000
    0000309E 8B01                   BF          L1601
    000030A0 A00B                   BRA         L1097
    000030A2 6D43                   MOV         R4,R13
    000030A4              L1601:                            
      Monochrome  1447        else if (angle == 90) {cosinus = 0; sinus = -16384;}
    000030A4 9554                   MOV.W       L1732+4,R5 ; H'C000
    000030A6 60E3                   MOV         R14,R0
    000030A8 885A                   CMP/EQ      #90,R0
    000030AA 8B02                   BF          L1603
    000030AC 6D93                   MOV         R9,R13
    000030AE A043                   BRA         L1602
    000030B0 6B53                   MOV         R5,R11
    000030B2              L1603:                            
      Monochrome  1448        else if (angle == 180) {cosinus = -16384; sinus = 0;}
    000030B2 924E                   MOV.W       L1732+6,R2 ; H'00B4
    000030B4 3E20                   CMP/EQ      R2,R14
    000030B6 8B02                   BF          L1605
    000030B8 6D53                   MOV         R5,R13
    000030BA              L1097:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  145


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000030BA A03D                   BRA         L1602
    000030BC 6B93                   MOV         R9,R11
    000030BE              L1605:                            
      Monochrome  1449        else if (angle == 270) {cosinus = 0; sinus = 16384;}
    000030BE 9349                   MOV.W       L1732+8,R3 ; H'010E
    000030C0 3E30                   CMP/EQ      R3,R14
    000030C2 8B02                   BF          L1607
    000030C4 6D93                   MOV         R9,R13
    000030C6 A037                   BRA         L1602
    000030C8 6B43                   MOV         R4,R11
    000030CA              L1607:                            
      Monochrome  1450        else
      Monochrome  1451        {
      Monochrome  1452            cosinus = cosf(-3.14 * angle / 180.0) * 16384;
    000030CA 60E3                   MOV         R14,R0
    000030CC D124                   MOV.L       L1732+20,R1; __itod
    000030CE 7FE0                   ADD         #-32,R15
    000030D0 410B                   JSR         @R1
    000030D2 2FF6                   MOV.L       R15,@-R15
    000030D4 D023                   MOV.L       L1732+24,R0; H'51EB851F
    000030D6 2F06                   MOV.L       R0,@-R15
    000030D8 D023                   MOV.L       L1732+28,R0; H'40091EB8
    000030DA 2F06                   MOV.L       R0,@-R15
    000030DC D023                   MOV.L       L1732+32,R0; __muld
    000030DE 61F3                   MOV         R15,R1
    000030E0 7110                   ADD         #16,R1
    000030E2 400B                   JSR         @R0
    000030E4 2F16                   MOV.L       R1,@-R15
    000030E6 E108                   MOV         #8,R1
    000030E8 31FC                   ADD         R15,R1
    000030EA 2F16                   MOV.L       R1,@-R15
    000030EC D120                   MOV.L       L1732+36,R1; __negd
    000030EE 410B                   JSR         @R1
    000030F0 0009                   NOP
    000030F2 E000                   MOV         #0,R0
    000030F4 2F06                   MOV.L       R0,@-R15
    000030F6 D01F                   MOV.L       L1732+40,R0; H'40668000
    000030F8 2F06                   MOV.L       R0,@-R15
    000030FA 61F3                   MOV         R15,R1
    000030FC D01E                   MOV.L       L1732+44,R0; __divdr
    000030FE 7110                   ADD         #16,R1
    00003100 400B                   JSR         @R0
    00003102 2F16                   MOV.L       R1,@-R15
    00003104 D11D                   MOV.L       L1732+48,R1; __dtos
    00003106 410B                   JSR         @R1
    00003108 0009                   NOP
    0000310A 1F03                   MOV.L       R0,@(12,R15)
    0000310C D21C                   MOV.L       L1732+52,R2; _cosf
    0000310E 420B                   JSR         @R2
    00003110 6403                   MOV         R0,R4
    00003112 D11C                   MOV.L       L1732+56,R1; H'46800000
    00003114 D31C                   MOV.L       L1732+60,R3; __muls
    00003116 430B                   JSR         @R3
    00003118 0009                   NOP
    0000311A D21C                   MOV.L       L1732+64,R2; __stoi
    0000311C 420B                   JSR         @R2
    0000311E 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  146


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1453            sinus = sinf(-3.14 * angle / 180.0) * 16384;
    00003120 D31B                   MOV.L       L1732+68,R3; _sinf
    00003122 6D03                   MOV         R0,R13
    00003124 430B                   JSR         @R3
    00003126 54F3                   MOV.L       @(12,R15),R4
    00003128 D116                   MOV.L       L1732+56,R1; H'46800000
    0000312A D217                   MOV.L       L1732+60,R2; __muls
    0000312C 420B                   JSR         @R2
    0000312E 0009                   NOP
    00003130 D316                   MOV.L       L1732+64,R3; __stoi
    00003132 430B                   JSR         @R3
    00003134 0009                   NOP
    00003136 6B03                   MOV         R0,R11
    00003138              L1602:                            
      Monochrome  1454        }
      Monochrome  1455        nb_width = width + 7 >> 3;
    00003138 52F4                   MOV.L       @(16,R15),R2
      Monochrome  1456    
      Monochrome  1457        for (i=0; i<width; i++)
    0000313A 6693                   MOV         R9,R6
    0000313C 980B                   MOV.W       L1732+10,R8; H'0080
    0000313E 7207                   ADD         #7,R2
    00003140 4221                   SHAR        R2
    00003142 4221                   SHAR        R2
    00003144 4221                   SHAR        R2
    00003146 2F22                   MOV.L       R2,@R15
    00003148 A082                   BRA         L1609
    0000314A EA07                   MOV         #7,R10
    0000314C              L1732:                            
    0000314C 0168                   .DATA.W     H'0168
    0000314E 4000                   .DATA.W     H'4000
    00003150 C000                   .DATA.W     H'C000
    00003152 00B4                   .DATA.W     H'00B4
    00003154 010E                   .DATA.W     H'010E
    00003156 0080                   .DATA.W     H'0080
    00003158 <00000000>             .DATA.L     _ML_vram_adress
    0000315C <00000000>             .DATA.L     __modls
    00003160 <00000000>             .DATA.L     __itod
    00003164 51EB851F               .DATA.L     H'51EB851F
    00003168 40091EB8               .DATA.L     H'40091EB8
    0000316C <00000000>             .DATA.L     __muld
    00003170 <00000000>             .DATA.L     __negd
    00003174 40668000               .DATA.L     H'40668000
    00003178 <00000000>             .DATA.L     __divdr
    0000317C <00000000>             .DATA.L     __dtos
    00003180 <00000000>             .DATA.L     _cosf
    00003184 46800000               .DATA.L     H'46800000
    00003188 <00000000>             .DATA.L     __muls
    0000318C <00000000>             .DATA.L     __stoi
    00003190 <00000000>             .DATA.L     _sinf
    00003194              L1610:                            
      Monochrome  1458        {
      Monochrome  1459            bit = 0x80 >> (i & 7);
    00003194 6263                   MOV         R6,R2
    00003196 22A9                   AND         R10,R2
    00003198 622B                   NEG         R2,R2
    0000319A 6383                   MOV         R8,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  147


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000319C 432C                   SHAD        R2,R3
      Monochrome  1460            i3 = i >> 3;
    0000319E 6563                   MOV         R6,R5
    000031A0 1F38                   MOV.L       R3,@(32,R15)
      Monochrome  1461            dx = x + i - ox;
      Monochrome  1462            for (j=0; j<height; j++)
    000031A2 6C93                   MOV         R9,R12
    000031A4 54F5                   MOV.L       @(20,R15),R4
    000031A6 E054                   MOV         #84,R0
    000031A8 52F2                   MOV.L       @(8,R15),R2
    000031AA 4521                   SHAR        R5
    000031AC 67F2                   MOV.L       @R15,R7
    000031AE 346C                   ADD         R6,R4
    000031B0 51F7                   MOV.L       @(28,R15),R1
    000031B2 4521                   SHAR        R5
    000031B4 5EF6                   MOV.L       @(24,R15),R14
    000031B6 3428                   SUB         R2,R4
    000031B8 0C77                   MUL.L       R7,R12
    000031BA 4521                   SHAR        R5
    000031BC 53F1                   MOV.L       @(4,R15),R3
    000031BE 071A                   STS         MACL,R7
    000031C0 04D7                   MUL.L       R13,R4
    000031C2 375C                   ADD         R5,R7
    000031C4 371C                   ADD         R1,R7
    000031C6 021A                   STS         MACL,R2
    000031C8 1F29                   MOV.L       R2,@(36,R15)
    000031CA 04B7                   MUL.L       R11,R4
    000031CC 041A                   STS         MACL,R4
    000031CE 1F4A                   MOV.L       R4,@(40,R15)
    000031D0 01FE                   MOV.L       @(R0,R15),R1
    000031D2 4115                   CMP/PL      R1
    000031D4 8F3B                   BF/S        L1611
    000031D6 3E38                   SUB         R3,R14
    000031D8              L1612:                            
      Monochrome  1463            {
      Monochrome  1464                dy = y + j - oy;
      Monochrome  1465                xr = ox + (dx * cosinus - dy * sinus >> 14);
    000031D8 54F9                   MOV.L       @(36,R15),R4
      Monochrome  1466                yr = oy + (dx * sinus + dy * cosinus >> 14);
    000031DA E1F2                   MOV         #-14,R1
    000031DC 50F1                   MOV.L       @(4,R15),R0
    000031DE 65E3                   MOV         R14,R5
    000031E0 52F2                   MOV.L       @(8,R15),R2
    000031E2 05B7                   MUL.L       R11,R5
    000031E4 031A                   STS         MACL,R3
    000031E6 3438                   SUB         R3,R4
    000031E8 05D7                   MUL.L       R13,R5
    000031EA E3F2                   MOV         #-14,R3
    000031EC 443C                   SHAD        R3,R4
    000031EE 342C                   ADD         R2,R4
    000031F0 53FA                   MOV.L       @(40,R15),R3
    000031F2 051A                   STS         MACL,R5
    000031F4 353C                   ADD         R3,R5
    000031F6 451C                   SHAD        R1,R5
      Monochrome  1467                if (!(xr < 0 || xr > 127 || yr < 0 || yr > 63))
    000031F8 4411                   CMP/PZ      R4
    000031FA 8F20                   BF/S        L1613




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  148


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000031FC 350C                   ADD         R0,R5
    000031FE E17F                   MOV         #127,R1
    00003200 3417                   CMP/GT      R1,R4
    00003202 891C                   BT          L1613
    00003204 4511                   CMP/PZ      R5
    00003206 8B1A                   BF          L1613
    00003208 E33F                   MOV         #63,R3
    0000320A 3537                   CMP/GT      R3,R5
    0000320C 8917                   BT          L1613
      Monochrome  1468                {
      Monochrome  1469                    pixel = bmp[i3 + nb_width * j] & bit;
    0000320E 6170                   MOV.B       @R7,R1
    00003210 53F8                   MOV.L       @(32,R15),R3
    00003212 611C                   EXTU.B      R1,R1
    00003214 2139                   AND         R3,R1
      Monochrome  1470                    if (pixel != 0) vram[(yr<<4)+(xr>>3)] |= 128>>(xr&7);
    00003216 2118                   TST         R1,R1
    00003218 8D11                   BT/S        L1613
    0000321A 1F13                   MOV.L       R1,@(12,R15)
    0000321C 50FB                   MOV.L       @(44,R15),R0
    0000321E 6183                   MOV         R8,R1
    00003220 6253                   MOV         R5,R2
    00003222 4208                   SHLL2       R2
    00003224 4208                   SHLL2       R2
    00003226 6343                   MOV         R4,R3
    00003228 4321                   SHAR        R3
    0000322A 4321                   SHAR        R3
    0000322C 4321                   SHAR        R3
    0000322E 323C                   ADD         R3,R2
    00003230 6343                   MOV         R4,R3
    00003232 23A9                   AND         R10,R3
    00003234 633B                   NEG         R3,R3
    00003236 413C                   SHAD        R3,R1
    00003238 032C                   MOV.B       @(R0,R2),R3
    0000323A 231B                   OR          R1,R3
    0000323C 0234                   MOV.B       R3,@(R0,R2)
    0000323E              L1613:                            
    0000323E 7C01                   ADD         #1,R12
    00003240 62F2                   MOV.L       @R15,R2
    00003242 E054                   MOV         #84,R0
    00003244 03FE                   MOV.L       @(R0,R15),R3
    00003246 372C                   ADD         R2,R7
    00003248 3C33                   CMP/GE      R3,R12
    0000324A 8FC5                   BF/S        L1612
    0000324C 7E01                   ADD         #1,R14
    0000324E              L1611:                            
    0000324E 7601                   ADD         #1,R6
    00003250              L1609:                            
    00003250 53F4                   MOV.L       @(16,R15),R3
    00003252 3633                   CMP/GE      R3,R6
    00003254 8B9E                   BF          L1610
    00003256              L1599:                            
      Monochrome  1471                }
      Monochrome  1472            }
      Monochrome  1473        }
      Monochrome  1474    }
    00003256 7F30                   ADD         #48,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  149


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00003258 4F16                   LDS.L       @R15+,MACL
    0000325A 4F26                   LDS.L       @R15+,PR
    0000325C 68F6                   MOV.L       @R15+,R8
    0000325E 69F6                   MOV.L       @R15+,R9
    00003260 6AF6                   MOV.L       @R15+,R10
    00003262 6BF6                   MOV.L       @R15+,R11
    00003264 6CF6                   MOV.L       @R15+,R12
    00003266 6DF6                   MOV.L       @R15+,R13
    00003268 000B                   RTS
    0000326A 6EF6                   MOV.L       @R15+,R14
      Monochrome  1475    #endif
      Monochrome  1476    
      Monochrome  1477    #ifdef ML_BMP_AND_ROTATE
      Monochrome  1478    void ML_bmp_and_rotate(const unsigned char *bmp, int x, int y, int width, int height, int angle)
    0000326C              _ML_bmp_and_rotate:              ; function: ML_bmp_and_rotate
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __muld, __divdr, __negd, __dtos, __stoi, __itod
    0000326C 2FE6                   MOV.L       R14,@-R15
    0000326E E058                   MOV         #88,R0
      Monochrome  1479    {
      Monochrome  1480        int i, j, i3, dx, dy, ox, oy, xr, yr, nb_width, pixel, bit;
      Monochrome  1481        int cosinus, sinus;
      Monochrome  1482        char* vram = ML_vram_adress();
    00003270 D31B                   MOV.L       L1734+4,R3 ; _ML_vram_adress
    00003272 2FD6                   MOV.L       R13,@-R15
    00003274 2FC6                   MOV.L       R12,@-R15
    00003276 2FB6                   MOV.L       R11,@-R15
    00003278 2FA6                   MOV.L       R10,@-R15
    0000327A 2F96                   MOV.L       R9,@-R15
    0000327C 2F86                   MOV.L       R8,@-R15
    0000327E E900                   MOV         #0,R9
    00003280 4F22                   STS.L       PR,@-R15
    00003282 4F12                   STS.L       MACL,@-R15
    00003284 7FD0                   ADD         #-48,R15
    00003286 1F47                   MOV.L       R4,@(28,R15)
    00003288 1F55                   MOV.L       R5,@(20,R15)
    0000328A 1F66                   MOV.L       R6,@(24,R15)
    0000328C 1F74                   MOV.L       R7,@(16,R15)
    0000328E 430B                   JSR         @R3
    00003290 0EFE                   MOV.L       @(R0,R15),R14
    00003292 1F0B                   MOV.L       R0,@(44,R15)
      Monochrome  1483    
      Monochrome  1484        if (!bmp) return;
    00003294 53F7                   MOV.L       @(28,R15),R3
    00003296 2338                   TST         R3,R3
    00003298 8B01                   BF          L1735
    0000329A A0F9                   BRA         L1616
    0000329C 0009                   NOP
    0000329E              L1735:                            
      Monochrome  1485        ox = x + width / 2;
    0000329E E200                   MOV         #0,R2
    000032A0 51F5                   MOV.L       @(20,R15),R1
      Monochrome  1486        oy = y + height / 2;
    000032A2 E054                   MOV         #84,R0
      Monochrome  1487        angle %= 360;
    000032A4 941A                   MOV.W       L1734,R4   ; H'0168




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  150


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000032A6 53F4                   MOV.L       @(16,R15),R3
    000032A8 3237                   CMP/GT      R3,R2
    000032AA 332E                   ADDC        R2,R3
    000032AC 4321                   SHAR        R3
    000032AE 331C                   ADD         R1,R3
    000032B0 1F32                   MOV.L       R3,@(8,R15)
    000032B2 02FE                   MOV.L       @(R0,R15),R2
    000032B4 D30B                   MOV.L       L1734+8,R3 ; __modls
    000032B6 E000                   MOV         #0,R0
    000032B8 3027                   CMP/GT      R2,R0
    000032BA 320E                   ADDC        R0,R2
    000032BC 50F6                   MOV.L       @(24,R15),R0
    000032BE 4221                   SHAR        R2
    000032C0 320C                   ADD         R0,R2
    000032C2 6043                   MOV         R4,R0
    000032C4 1F21                   MOV.L       R2,@(4,R15)
    000032C6 430B                   JSR         @R3
    000032C8 61E3                   MOV         R14,R1
    000032CA 6E03                   MOV         R0,R14
      Monochrome  1488        if (angle < 0) angle += 360;
    000032CC 4E11                   CMP/PZ      R14
    000032CE 8900                   BT          L1617
    000032D0 3E4C                   ADD         R4,R14
    000032D2              L1617:                            
      Monochrome  1489        if (angle == 0) {cosinus = 16384; sinus = 0;}
    000032D2 2EE8                   TST         R14,R14
    000032D4 9403                   MOV.W       L1734+2,R4 ; H'4000
    000032D6 8B07                   BF          L1618
    000032D8 A011                   BRA         L1098
    000032DA 6D43                   MOV         R4,R13
    000032DC              L1734:                            
    000032DC 0168                   .DATA.W     H'0168
    000032DE 4000                   .DATA.W     H'4000
    000032E0 <00000000>             .DATA.L     _ML_vram_adress
    000032E4 <00000000>             .DATA.L     __modls
    000032E8              L1618:                            
      Monochrome  1490        else if (angle == 90) {cosinus = 0; sinus = -16384;}
    000032E8 9552                   MOV.W       L1736,R5   ; H'C000
    000032EA 60E3                   MOV         R14,R0
    000032EC 885A                   CMP/EQ      #90,R0
    000032EE 8B02                   BF          L1620
    000032F0 6D93                   MOV         R9,R13
    000032F2 A043                   BRA         L1619
    000032F4 6B53                   MOV         R5,R11
    000032F6              L1620:                            
      Monochrome  1491        else if (angle == 180) {cosinus = -16384; sinus = 0;}
    000032F6 924C                   MOV.W       L1736+2,R2 ; H'00B4
    000032F8 3E20                   CMP/EQ      R2,R14
    000032FA 8B02                   BF          L1622
    000032FC 6D53                   MOV         R5,R13
    000032FE              L1098:
    000032FE A03D                   BRA         L1619
    00003300 6B93                   MOV         R9,R11
    00003302              L1622:                            
      Monochrome  1492        else if (angle == 270) {cosinus = 0; sinus = 16384;}
    00003302 9347                   MOV.W       L1736+4,R3 ; H'010E
    00003304 3E30                   CMP/EQ      R3,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  151


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00003306 8B02                   BF          L1624
    00003308 6D93                   MOV         R9,R13
    0000330A A037                   BRA         L1619
    0000330C 6B43                   MOV         R4,R11
    0000330E              L1624:                            
      Monochrome  1493        else
      Monochrome  1494        {
      Monochrome  1495            cosinus = cosf(-3.14 * angle / 180.0) * 16384;
    0000330E 60E3                   MOV         R14,R0
    00003310 D121                   MOV.L       L1736+8,R1 ; __itod
    00003312 7FE0                   ADD         #-32,R15
    00003314 410B                   JSR         @R1
    00003316 2FF6                   MOV.L       R15,@-R15
    00003318 D020                   MOV.L       L1736+12,R0; H'51EB851F
    0000331A 2F06                   MOV.L       R0,@-R15
    0000331C D020                   MOV.L       L1736+16,R0; H'40091EB8
    0000331E 2F06                   MOV.L       R0,@-R15
    00003320 D020                   MOV.L       L1736+20,R0; __muld
    00003322 61F3                   MOV         R15,R1
    00003324 7110                   ADD         #16,R1
    00003326 400B                   JSR         @R0
    00003328 2F16                   MOV.L       R1,@-R15
    0000332A E108                   MOV         #8,R1
    0000332C 31FC                   ADD         R15,R1
    0000332E 2F16                   MOV.L       R1,@-R15
    00003330 D11D                   MOV.L       L1736+24,R1; __negd
    00003332 410B                   JSR         @R1
    00003334 0009                   NOP
    00003336 E000                   MOV         #0,R0
    00003338 2F06                   MOV.L       R0,@-R15
    0000333A D01C                   MOV.L       L1736+28,R0; H'40668000
    0000333C 2F06                   MOV.L       R0,@-R15
    0000333E 61F3                   MOV         R15,R1
    00003340 D01B                   MOV.L       L1736+32,R0; __divdr
    00003342 7110                   ADD         #16,R1
    00003344 400B                   JSR         @R0
    00003346 2F16                   MOV.L       R1,@-R15
    00003348 D11A                   MOV.L       L1736+36,R1; __dtos
    0000334A 410B                   JSR         @R1
    0000334C 0009                   NOP
    0000334E 1F03                   MOV.L       R0,@(12,R15)
    00003350 D219                   MOV.L       L1736+40,R2; _cosf
    00003352 420B                   JSR         @R2
    00003354 6403                   MOV         R0,R4
    00003356 D119                   MOV.L       L1736+44,R1; H'46800000
    00003358 D319                   MOV.L       L1736+48,R3; __muls
    0000335A 430B                   JSR         @R3
    0000335C 0009                   NOP
    0000335E D219                   MOV.L       L1736+52,R2; __stoi
    00003360 420B                   JSR         @R2
    00003362 0009                   NOP
      Monochrome  1496            sinus = sinf(-3.14 * angle / 180.0) * 16384;
    00003364 D318                   MOV.L       L1736+56,R3; _sinf
    00003366 6D03                   MOV         R0,R13
    00003368 430B                   JSR         @R3
    0000336A 54F3                   MOV.L       @(12,R15),R4
    0000336C D113                   MOV.L       L1736+44,R1; H'46800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  152


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000336E D214                   MOV.L       L1736+48,R2; __muls
    00003370 420B                   JSR         @R2
    00003372 0009                   NOP
    00003374 D313                   MOV.L       L1736+52,R3; __stoi
    00003376 430B                   JSR         @R3
    00003378 0009                   NOP
    0000337A 6B03                   MOV         R0,R11
    0000337C              L1619:                            
      Monochrome  1497        }
      Monochrome  1498        nb_width = width + 7 >> 3;
    0000337C 52F4                   MOV.L       @(16,R15),R2
      Monochrome  1499    
      Monochrome  1500        for (i=0; i<width; i++)
    0000337E 6693                   MOV         R9,R6
    00003380 9809                   MOV.W       L1736+6,R8 ; H'0080
    00003382 7207                   ADD         #7,R2
    00003384 4221                   SHAR        R2
    00003386 4221                   SHAR        R2
    00003388 4221                   SHAR        R2
    0000338A 2F22                   MOV.L       R2,@R15
    0000338C A07D                   BRA         L1626
    0000338E EA07                   MOV         #7,R10
    00003390              L1736:                            
    00003390 C000                   .DATA.W     H'C000
    00003392 00B4                   .DATA.W     H'00B4
    00003394 010E                   .DATA.W     H'010E
    00003396 0080                   .DATA.W     H'0080
    00003398 <00000000>             .DATA.L     __itod
    0000339C 51EB851F               .DATA.L     H'51EB851F
    000033A0 40091EB8               .DATA.L     H'40091EB8
    000033A4 <00000000>             .DATA.L     __muld
    000033A8 <00000000>             .DATA.L     __negd
    000033AC 40668000               .DATA.L     H'40668000
    000033B0 <00000000>             .DATA.L     __divdr
    000033B4 <00000000>             .DATA.L     __dtos
    000033B8 <00000000>             .DATA.L     _cosf
    000033BC 46800000               .DATA.L     H'46800000
    000033C0 <00000000>             .DATA.L     __muls
    000033C4 <00000000>             .DATA.L     __stoi
    000033C8 <00000000>             .DATA.L     _sinf
    000033CC              L1627:                            
      Monochrome  1501        {
      Monochrome  1502            bit = 0x80 >> (i & 7);
    000033CC 6263                   MOV         R6,R2
    000033CE 22A9                   AND         R10,R2
    000033D0 622B                   NEG         R2,R2
    000033D2 6383                   MOV         R8,R3
    000033D4 432C                   SHAD        R2,R3
      Monochrome  1503            i3 = i >> 3;
    000033D6 6563                   MOV         R6,R5
    000033D8 1F38                   MOV.L       R3,@(32,R15)
      Monochrome  1504            dx = x + i - ox;
      Monochrome  1505            for (j=0; j<height; j++)
    000033DA 6C93                   MOV         R9,R12
    000033DC 54F5                   MOV.L       @(20,R15),R4
    000033DE E054                   MOV         #84,R0
    000033E0 52F2                   MOV.L       @(8,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  153


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000033E2 4521                   SHAR        R5
    000033E4 67F2                   MOV.L       @R15,R7
    000033E6 346C                   ADD         R6,R4
    000033E8 51F7                   MOV.L       @(28,R15),R1
    000033EA 4521                   SHAR        R5
    000033EC 5EF6                   MOV.L       @(24,R15),R14
    000033EE 3428                   SUB         R2,R4
    000033F0 0C77                   MUL.L       R7,R12
    000033F2 4521                   SHAR        R5
    000033F4 53F1                   MOV.L       @(4,R15),R3
    000033F6 071A                   STS         MACL,R7
    000033F8 04D7                   MUL.L       R13,R4
    000033FA 375C                   ADD         R5,R7
    000033FC 371C                   ADD         R1,R7
    000033FE 021A                   STS         MACL,R2
    00003400 1F29                   MOV.L       R2,@(36,R15)
    00003402 04B7                   MUL.L       R11,R4
    00003404 041A                   STS         MACL,R4
    00003406 1F4A                   MOV.L       R4,@(40,R15)
    00003408 01FE                   MOV.L       @(R0,R15),R1
    0000340A 4115                   CMP/PL      R1
    0000340C 8F3C                   BF/S        L1628
    0000340E 3E38                   SUB         R3,R14
    00003410              L1629:                            
      Monochrome  1506            {
      Monochrome  1507                dy = y + j - oy;
      Monochrome  1508                xr = ox + (dx * cosinus - dy * sinus >> 14);
    00003410 54F9                   MOV.L       @(36,R15),R4
      Monochrome  1509                yr = oy + (dx * sinus + dy * cosinus >> 14);
    00003412 E1F2                   MOV         #-14,R1
    00003414 50F1                   MOV.L       @(4,R15),R0
    00003416 65E3                   MOV         R14,R5
    00003418 52F2                   MOV.L       @(8,R15),R2
    0000341A 05B7                   MUL.L       R11,R5
    0000341C 031A                   STS         MACL,R3
    0000341E 3438                   SUB         R3,R4
    00003420 05D7                   MUL.L       R13,R5
    00003422 E3F2                   MOV         #-14,R3
    00003424 443C                   SHAD        R3,R4
    00003426 342C                   ADD         R2,R4
    00003428 53FA                   MOV.L       @(40,R15),R3
    0000342A 051A                   STS         MACL,R5
    0000342C 353C                   ADD         R3,R5
    0000342E 451C                   SHAD        R1,R5
      Monochrome  1510                if (!(xr < 0 || xr > 127 || yr < 0 || yr > 63))
    00003430 4411                   CMP/PZ      R4
    00003432 8F21                   BF/S        L1630
    00003434 350C                   ADD         R0,R5
    00003436 E17F                   MOV         #127,R1
    00003438 3417                   CMP/GT      R1,R4
    0000343A 891D                   BT          L1630
    0000343C 4511                   CMP/PZ      R5
    0000343E 8B1B                   BF          L1630
    00003440 E33F                   MOV         #63,R3
    00003442 3537                   CMP/GT      R3,R5
    00003444 8918                   BT          L1630
      Monochrome  1511                {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  154


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1512                    pixel = bmp[i3 + nb_width * j] & bit;
    00003446 6170                   MOV.B       @R7,R1
    00003448 53F8                   MOV.L       @(32,R15),R3
    0000344A 611C                   EXTU.B      R1,R1
    0000344C 2139                   AND         R3,R1
      Monochrome  1513                    if (pixel == 0) vram[(yr<<4)+(xr>>3)] &= ~(128>>(xr&7));
    0000344E 2118                   TST         R1,R1
    00003450 8F12                   BF/S        L1630
    00003452 1F13                   MOV.L       R1,@(12,R15)
    00003454 50FB                   MOV.L       @(44,R15),R0
    00003456 6183                   MOV         R8,R1
    00003458 6253                   MOV         R5,R2
    0000345A 4208                   SHLL2       R2
    0000345C 4208                   SHLL2       R2
    0000345E 6343                   MOV         R4,R3
    00003460 4321                   SHAR        R3
    00003462 4321                   SHAR        R3
    00003464 4321                   SHAR        R3
    00003466 323C                   ADD         R3,R2
    00003468 6343                   MOV         R4,R3
    0000346A 23A9                   AND         R10,R3
    0000346C 633B                   NEG         R3,R3
    0000346E 413C                   SHAD        R3,R1
    00003470 032C                   MOV.B       @(R0,R2),R3
    00003472 6117                   NOT         R1,R1
    00003474 2319                   AND         R1,R3
    00003476 0234                   MOV.B       R3,@(R0,R2)
    00003478              L1630:                            
    00003478 62F2                   MOV.L       @R15,R2
    0000347A E054                   MOV         #84,R0
    0000347C 03FE                   MOV.L       @(R0,R15),R3
    0000347E 7C01                   ADD         #1,R12
    00003480 372C                   ADD         R2,R7
    00003482 3C33                   CMP/GE      R3,R12
    00003484 8FC4                   BF/S        L1629
    00003486 7E01                   ADD         #1,R14
    00003488              L1628:                            
    00003488 7601                   ADD         #1,R6
    0000348A              L1626:                            
    0000348A 53F4                   MOV.L       @(16,R15),R3
    0000348C 3633                   CMP/GE      R3,R6
    0000348E 8B9D                   BF          L1627
    00003490              L1616:                            
      Monochrome  1514                }
      Monochrome  1515            }
      Monochrome  1516        }
      Monochrome  1517    }
    00003490 7F30                   ADD         #48,R15
    00003492 4F16                   LDS.L       @R15+,MACL
    00003494 4F26                   LDS.L       @R15+,PR
    00003496 68F6                   MOV.L       @R15+,R8
    00003498 69F6                   MOV.L       @R15+,R9
    0000349A 6AF6                   MOV.L       @R15+,R10
    0000349C 6BF6                   MOV.L       @R15+,R11
    0000349E 6CF6                   MOV.L       @R15+,R12
    000034A0 6DF6                   MOV.L       @R15+,R13
    000034A2 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  155


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000034A4 6EF6                   MOV.L       @R15+,R14
      Monochrome  1518    #endif
      Monochrome  1519    
      Monochrome  1520    #ifdef ML_BMP_XOR_ROTATE
      Monochrome  1521    void ML_bmp_xor_rotate(const unsigned char *bmp, int x, int y, int width, int height, int angle)
    000034A6              _ML_bmp_xor_rotate:              ; function: ML_bmp_xor_rotate
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __modls, __muls, __muld, __divdr, __negd, __dtos, __stoi, __itod
    000034A6 E058                   MOV         #88,R0
      Monochrome  1522    {
      Monochrome  1523        int i, j, i3, dx, dy, ox, oy, xr, yr, nb_width, pixel, bit;
      Monochrome  1524        int cosinus, sinus;
      Monochrome  1525        char* vram = ML_vram_adress();
    000034A8 D31C                   MOV.L       L1737+6,R3 ; _ML_vram_adress
    000034AA 2FE6                   MOV.L       R14,@-R15
    000034AC 2FD6                   MOV.L       R13,@-R15
    000034AE 2FC6                   MOV.L       R12,@-R15
    000034B0 2FB6                   MOV.L       R11,@-R15
    000034B2 2FA6                   MOV.L       R10,@-R15
    000034B4 2F96                   MOV.L       R9,@-R15
    000034B6 E900                   MOV         #0,R9
    000034B8 2F86                   MOV.L       R8,@-R15
    000034BA 4F22                   STS.L       PR,@-R15
    000034BC 4F12                   STS.L       MACL,@-R15
    000034BE 7FD0                   ADD         #-48,R15
    000034C0 1F47                   MOV.L       R4,@(28,R15)
    000034C2 1F55                   MOV.L       R5,@(20,R15)
    000034C4 1F66                   MOV.L       R6,@(24,R15)
    000034C6 1F74                   MOV.L       R7,@(16,R15)
    000034C8 430B                   JSR         @R3
    000034CA 0EFE                   MOV.L       @(R0,R15),R14
    000034CC 1F0B                   MOV.L       R0,@(44,R15)
      Monochrome  1526    
      Monochrome  1527        if (!bmp) return;
    000034CE 53F7                   MOV.L       @(28,R15),R3
    000034D0 2338                   TST         R3,R3
    000034D2 8B01                   BF          L1738
    000034D4 A0F9                   BRA         L1633
    000034D6 0009                   NOP
    000034D8              L1738:                            
      Monochrome  1528        ox = x + width / 2;
    000034D8 53F4                   MOV.L       @(16,R15),R3
    000034DA E200                   MOV         #0,R2
    000034DC 51F5                   MOV.L       @(20,R15),R1
      Monochrome  1529        oy = y + height / 2;
    000034DE E054                   MOV         #84,R0
      Monochrome  1530        angle %= 360;
    000034E0 9419                   MOV.W       L1737,R4   ; H'0168
    000034E2 3237                   CMP/GT      R3,R2
    000034E4 332E                   ADDC        R2,R3
    000034E6 4321                   SHAR        R3
    000034E8 331C                   ADD         R1,R3
    000034EA 1F32                   MOV.L       R3,@(8,R15)
    000034EC 02FE                   MOV.L       @(R0,R15),R2
    000034EE E000                   MOV         #0,R0
    000034F0 D30B                   MOV.L       L1737+10,R3; __modls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  156


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000034F2 3027                   CMP/GT      R2,R0
    000034F4 320E                   ADDC        R0,R2
    000034F6 4221                   SHAR        R2
    000034F8 50F6                   MOV.L       @(24,R15),R0
    000034FA 320C                   ADD         R0,R2
    000034FC 1F21                   MOV.L       R2,@(4,R15)
    000034FE 6043                   MOV         R4,R0
    00003500 430B                   JSR         @R3
    00003502 61E3                   MOV         R14,R1
    00003504 6E03                   MOV         R0,R14
      Monochrome  1531        if (angle < 0) angle += 360;
    00003506 4E11                   CMP/PZ      R14
    00003508 8900                   BT          L1634
    0000350A 3E4C                   ADD         R4,R14
    0000350C              L1634:                            
      Monochrome  1532        if (angle == 0) {cosinus = 16384; sinus = 0;}
    0000350C 9404                   MOV.W       L1737+2,R4 ; H'4000
    0000350E 2EE8                   TST         R14,R14
    00003510 8B08                   BF          L1635
    00003512 A012                   BRA         L1099
    00003514 6D43                   MOV         R4,R13
    00003516              L1737:                            
    00003516 0168                   .DATA.W     H'0168
    00003518 4000                   .DATA.W     H'4000
    0000351A 0000                   .DATA.W     0
    0000351C <00000000>             .DATA.L     _ML_vram_adress
    00003520 <00000000>             .DATA.L     __modls
    00003524              L1635:                            
      Monochrome  1533        else if (angle == 90) {cosinus = 0; sinus = -16384;}
    00003524 9552                   MOV.W       L1739,R5   ; H'C000
    00003526 60E3                   MOV         R14,R0
    00003528 885A                   CMP/EQ      #90,R0
    0000352A 8B02                   BF          L1637
    0000352C 6D93                   MOV         R9,R13
    0000352E A043                   BRA         L1636
    00003530 6B53                   MOV         R5,R11
    00003532              L1637:                            
      Monochrome  1534        else if (angle == 180) {cosinus = -16384; sinus = 0;}
    00003532 924C                   MOV.W       L1739+2,R2 ; H'00B4
    00003534 3E20                   CMP/EQ      R2,R14
    00003536 8B02                   BF          L1639
    00003538 6D53                   MOV         R5,R13
    0000353A              L1099:
    0000353A A03D                   BRA         L1636
    0000353C 6B93                   MOV         R9,R11
    0000353E              L1639:                            
      Monochrome  1535        else if (angle == 270) {cosinus = 0; sinus = 16384;}
    0000353E 9347                   MOV.W       L1739+4,R3 ; H'010E
    00003540 3E30                   CMP/EQ      R3,R14
    00003542 8B02                   BF          L1641
    00003544 6D93                   MOV         R9,R13
    00003546 A037                   BRA         L1636
    00003548 6B43                   MOV         R4,R11
    0000354A              L1641:                            
      Monochrome  1536        else
      Monochrome  1537        {
      Monochrome  1538            cosinus = cosf(-3.14 * angle / 180.0) * 16384;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  157


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000354A 60E3                   MOV         R14,R0
    0000354C D121                   MOV.L       L1739+8,R1 ; __itod
    0000354E 7FE0                   ADD         #-32,R15
    00003550 410B                   JSR         @R1
    00003552 2FF6                   MOV.L       R15,@-R15
    00003554 D020                   MOV.L       L1739+12,R0; H'51EB851F
    00003556 2F06                   MOV.L       R0,@-R15
    00003558 D020                   MOV.L       L1739+16,R0; H'40091EB8
    0000355A 2F06                   MOV.L       R0,@-R15
    0000355C D020                   MOV.L       L1739+20,R0; __muld
    0000355E 61F3                   MOV         R15,R1
    00003560 7110                   ADD         #16,R1
    00003562 400B                   JSR         @R0
    00003564 2F16                   MOV.L       R1,@-R15
    00003566 E108                   MOV         #8,R1
    00003568 31FC                   ADD         R15,R1
    0000356A 2F16                   MOV.L       R1,@-R15
    0000356C D11D                   MOV.L       L1739+24,R1; __negd
    0000356E 410B                   JSR         @R1
    00003570 0009                   NOP
    00003572 E000                   MOV         #0,R0
    00003574 2F06                   MOV.L       R0,@-R15
    00003576 D01C                   MOV.L       L1739+28,R0; H'40668000
    00003578 2F06                   MOV.L       R0,@-R15
    0000357A 61F3                   MOV         R15,R1
    0000357C D01B                   MOV.L       L1739+32,R0; __divdr
    0000357E 7110                   ADD         #16,R1
    00003580 400B                   JSR         @R0
    00003582 2F16                   MOV.L       R1,@-R15
    00003584 D11A                   MOV.L       L1739+36,R1; __dtos
    00003586 410B                   JSR         @R1
    00003588 0009                   NOP
    0000358A 1F03                   MOV.L       R0,@(12,R15)
    0000358C D219                   MOV.L       L1739+40,R2; _cosf
    0000358E 420B                   JSR         @R2
    00003590 6403                   MOV         R0,R4
    00003592 D119                   MOV.L       L1739+44,R1; H'46800000
    00003594 D319                   MOV.L       L1739+48,R3; __muls
    00003596 430B                   JSR         @R3
    00003598 0009                   NOP
    0000359A D219                   MOV.L       L1739+52,R2; __stoi
    0000359C 420B                   JSR         @R2
    0000359E 0009                   NOP
      Monochrome  1539            sinus = sinf(-3.14 * angle / 180.0) * 16384;
    000035A0 D318                   MOV.L       L1739+56,R3; _sinf
    000035A2 6D03                   MOV         R0,R13
    000035A4 430B                   JSR         @R3
    000035A6 54F3                   MOV.L       @(12,R15),R4
    000035A8 D113                   MOV.L       L1739+44,R1; H'46800000
    000035AA D214                   MOV.L       L1739+48,R2; __muls
    000035AC 420B                   JSR         @R2
    000035AE 0009                   NOP
    000035B0 D313                   MOV.L       L1739+52,R3; __stoi
    000035B2 430B                   JSR         @R3
    000035B4 0009                   NOP
    000035B6 6B03                   MOV         R0,R11
    000035B8              L1636:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  158


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      Monochrome  1540        }
      Monochrome  1541        nb_width = width + 7 >> 3;
    000035B8 52F4                   MOV.L       @(16,R15),R2
      Monochrome  1542    
      Monochrome  1543        for (i=0; i<width; i++)
    000035BA 6693                   MOV         R9,R6
    000035BC 9809                   MOV.W       L1739+6,R8 ; H'0080
    000035BE 7207                   ADD         #7,R2
    000035C0 4221                   SHAR        R2
    000035C2 4221                   SHAR        R2
    000035C4 4221                   SHAR        R2
    000035C6 2F22                   MOV.L       R2,@R15
    000035C8 A07C                   BRA         L1643
    000035CA EA07                   MOV         #7,R10
    000035CC              L1739:                            
    000035CC C000                   .DATA.W     H'C000
    000035CE 00B4                   .DATA.W     H'00B4
    000035D0 010E                   .DATA.W     H'010E
    000035D2 0080                   .DATA.W     H'0080
    000035D4 <00000000>             .DATA.L     __itod
    000035D8 51EB851F               .DATA.L     H'51EB851F
    000035DC 40091EB8               .DATA.L     H'40091EB8
    000035E0 <00000000>             .DATA.L     __muld
    000035E4 <00000000>             .DATA.L     __negd
    000035E8 40668000               .DATA.L     H'40668000
    000035EC <00000000>             .DATA.L     __divdr
    000035F0 <00000000>             .DATA.L     __dtos
    000035F4 <00000000>             .DATA.L     _cosf
    000035F8 46800000               .DATA.L     H'46800000
    000035FC <00000000>             .DATA.L     __muls
    00003600 <00000000>             .DATA.L     __stoi
    00003604 <00000000>             .DATA.L     _sinf
    00003608              L1644:                            
      Monochrome  1544        {
      Monochrome  1545            bit = 0x80 >> (i & 7);
    00003608 6263                   MOV         R6,R2
    0000360A 22A9                   AND         R10,R2
    0000360C 622B                   NEG         R2,R2
    0000360E 6383                   MOV         R8,R3
    00003610 432C                   SHAD        R2,R3
      Monochrome  1546            i3 = i >> 3;
    00003612 6563                   MOV         R6,R5
    00003614 1F38                   MOV.L       R3,@(32,R15)
      Monochrome  1547            dx = x + i - ox;
      Monochrome  1548            for (j=0; j<height; j++)
    00003616 6C93                   MOV         R9,R12
    00003618 54F5                   MOV.L       @(20,R15),R4
    0000361A E054                   MOV         #84,R0
    0000361C 52F2                   MOV.L       @(8,R15),R2
    0000361E 4521                   SHAR        R5
    00003620 67F2                   MOV.L       @R15,R7
    00003622 346C                   ADD         R6,R4
    00003624 51F7                   MOV.L       @(28,R15),R1
    00003626 4521                   SHAR        R5
    00003628 5EF6                   MOV.L       @(24,R15),R14
    0000362A 3428                   SUB         R2,R4
    0000362C 0C77                   MUL.L       R7,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  159


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000362E 4521                   SHAR        R5
    00003630 53F1                   MOV.L       @(4,R15),R3
    00003632 071A                   STS         MACL,R7
    00003634 04D7                   MUL.L       R13,R4
    00003636 375C                   ADD         R5,R7
    00003638 371C                   ADD         R1,R7
    0000363A 021A                   STS         MACL,R2
    0000363C 1F29                   MOV.L       R2,@(36,R15)
    0000363E 04B7                   MUL.L       R11,R4
    00003640 041A                   STS         MACL,R4
    00003642 1F4A                   MOV.L       R4,@(40,R15)
    00003644 01FE                   MOV.L       @(R0,R15),R1
    00003646 4115                   CMP/PL      R1
    00003648 8F3B                   BF/S        L1645
    0000364A 3E38                   SUB         R3,R14
    0000364C              L1646:                            
      Monochrome  1549            {
      Monochrome  1550                dy = y + j - oy;
      Monochrome  1551                xr = ox + (dx * cosinus - dy * sinus >> 14);
    0000364C 54F9                   MOV.L       @(36,R15),R4
      Monochrome  1552                yr = oy + (dx * sinus + dy * cosinus >> 14);
    0000364E E1F2                   MOV         #-14,R1
    00003650 50F1                   MOV.L       @(4,R15),R0
    00003652 65E3                   MOV         R14,R5
    00003654 52F2                   MOV.L       @(8,R15),R2
    00003656 05B7                   MUL.L       R11,R5
    00003658 031A                   STS         MACL,R3
    0000365A 3438                   SUB         R3,R4
    0000365C 05D7                   MUL.L       R13,R5
    0000365E E3F2                   MOV         #-14,R3
    00003660 443C                   SHAD        R3,R4
    00003662 342C                   ADD         R2,R4
    00003664 53FA                   MOV.L       @(40,R15),R3
    00003666 051A                   STS         MACL,R5
    00003668 353C                   ADD         R3,R5
    0000366A 451C                   SHAD        R1,R5
      Monochrome  1553                if (!(xr < 0 || xr > 127 || yr < 0 || yr > 63))
    0000366C 4411                   CMP/PZ      R4
    0000366E 8F20                   BF/S        L1647
    00003670 350C                   ADD         R0,R5
    00003672 E17F                   MOV         #127,R1
    00003674 3417                   CMP/GT      R1,R4
    00003676 891C                   BT          L1647
    00003678 4511                   CMP/PZ      R5
    0000367A 8B1A                   BF          L1647
    0000367C E33F                   MOV         #63,R3
    0000367E 3537                   CMP/GT      R3,R5
    00003680 8917                   BT          L1647
      Monochrome  1554                {
      Monochrome  1555                    pixel = bmp[i3 + nb_width * j] & bit;
    00003682 6170                   MOV.B       @R7,R1
    00003684 53F8                   MOV.L       @(32,R15),R3
    00003686 611C                   EXTU.B      R1,R1
    00003688 2139                   AND         R3,R1
      Monochrome  1556                    if (pixel != 0) vram[(yr<<4)+(xr>>3)] ^= 128>>(xr&7);
    0000368A 2118                   TST         R1,R1
    0000368C 8D11                   BT/S        L1647




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE  160


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000368E 1F13                   MOV.L       R1,@(12,R15)
    00003690 50FB                   MOV.L       @(44,R15),R0
    00003692 6183                   MOV         R8,R1
    00003694 6253                   MOV         R5,R2
    00003696 4208                   SHLL2       R2
    00003698 4208                   SHLL2       R2
    0000369A 6343                   MOV         R4,R3
    0000369C 4321                   SHAR        R3
    0000369E 4321                   SHAR        R3
    000036A0 4321                   SHAR        R3
    000036A2 323C                   ADD         R3,R2
    000036A4 6343                   MOV         R4,R3
    000036A6 23A9                   AND         R10,R3
    000036A8 633B                   NEG         R3,R3
    000036AA 413C                   SHAD        R3,R1
    000036AC 032C                   MOV.B       @(R0,R2),R3
    000036AE 231A                   XOR         R1,R3
    000036B0 0234                   MOV.B       R3,@(R0,R2)
    000036B2              L1647:                            
    000036B2 7C01                   ADD         #1,R12
    000036B4 62F2                   MOV.L       @R15,R2
    000036B6 E054                   MOV         #84,R0
    000036B8 03FE                   MOV.L       @(R0,R15),R3
    000036BA 372C                   ADD         R2,R7
    000036BC 3C33                   CMP/GE      R3,R12
    000036BE 8FC5                   BF/S        L1646
    000036C0 7E01                   ADD         #1,R14
    000036C2              L1645:                            
    000036C2 7601                   ADD         #1,R6
    000036C4              L1643:                            
    000036C4 53F4                   MOV.L       @(16,R15),R3
    000036C6 3633                   CMP/GE      R3,R6
    000036C8 8B9E                   BF          L1644
    000036CA              L1633:                            
      Monochrome  1557                }
      Monochrome  1558            }
      Monochrome  1559        }
      Monochrome  1560    }
    000036CA 7F30                   ADD         #48,R15
    000036CC 4F16                   LDS.L       @R15+,MACL
    000036CE 4F26                   LDS.L       @R15+,PR
    000036D0 68F6                   MOV.L       @R15+,R8
    000036D2 69F6                   MOV.L       @R15+,R9
    000036D4 6AF6                   MOV.L       @R15+,R10
    000036D6 6BF6                   MOV.L       @R15+,R11
    000036D8 6CF6                   MOV.L       @R15+,R12
    000036DA 6DF6                   MOV.L       @R15+,R13
    000036DC 000B                   RTS
    000036DE 6EF6                   MOV.L       @R15+,R14
      Monochrome  1561    #endif
D   00000000              __$SysCallCode:                  ; static: SysCallCode
    00000000 D201422B60             .DATA.L     H'D201422B,H'60F20000,H'80010070
             F200008001   
             0070         
    0000000C              __$SysCall:                      ; static: SysCall
    0000000C <00000000>             .DATA.L     __$SysCallCode





SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Jul-2015 16:57:49  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1560



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000036E0 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000010 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000036F0 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           21
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          47
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           582






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\OLIVIE~1\AppData\Local\Temp\hmk9844.tmp 

