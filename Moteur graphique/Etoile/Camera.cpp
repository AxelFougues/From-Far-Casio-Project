/****************************************************************************/
/*                                                                          */
/*                                 CAMERA                                   */
/*                                                                          */
/****************************************************************************/


#include "Camera.hpp"


/****************************************************************************/
/*                             INITIALSATION                                */
/****************************************************************************/
Camera::Camera()
{
    x = 0; y = 0; z = -20000;
    theta = 0; move_theta(0);
    phi = 0; move_phi(0);
    focal = 250;
}


/****************************************************************************/
/*                             move_forward                                 */
/****************************************************************************/
void Camera::move_forward(int distance)
{
    x += distance * cos_phi * sin_theta / (SHIFT_V * SHIFT_V);
    y += distance * sin_phi             / SHIFT_V;
    z += distance * cos_phi * cos_theta / (SHIFT_V * SHIFT_V);
}


/****************************************************************************/
/*                              move_theta                                  */
/****************************************************************************/
void Camera::move_theta(float value)
{
    theta += value;
    cos_theta = cosf(theta) * SHIFT_V;
    sin_theta = sinf(theta) * SHIFT_V;
}


/****************************************************************************/
/*                               move_phi                                   */
/****************************************************************************/
void Camera::move_phi(float value)
{
    phi += value;
    if (phi > 1.507)  phi = 1.507;
    if (phi < -1.507) phi = -1.507;
    cos_phi = cosf(phi) * SHIFT_V;
    sin_phi = sinf(phi) * SHIFT_V;
}
